(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{Nr4K:function(t,e,s){"use strict";s.r(e),s.d(e,"AccessModule",function(){return H});var i=s("mrSG"),r=s("PCx1"),a=s("FQmJ"),n=s("/Uzn"),o=s("d+0u"),l=s("fXoL"),d=s("tyNb"),c=s("5eHb"),p=s("SxV6");let m=class{constructor(t,e,s,i,r,a,n){this.route=t,this.router=e,this.dataService=s,this.tokenService=i,this.toastr=r,this.constants=a,this.functions=n,this.pk="policyID",this.title="Password Policies",this.object="Password Policy",this.objects="Dashboard",this.parentUrl="/dashboard",this.loading=!1,this.errorMessage="",this.rows=[],this.filter={term:null}}loadRecords(){this.dataService.getAll().subscribe(t=>{t=this.functions.objectify(t,"policyCode"),this.rows=[];for(let e of this.constants.passwordPolicies)if(t[e.policyCode]){let s=t[e.policyCode].policyValue;"date"==t[e.policyCode].type&&(s=s&&""!=s?new Date(s):null),e[this.pk]=t[e.policyCode][this.pk],e.active=t[e.policyCode].active||"N",e.policyValue=s,this.rows.push(e)}else this.rows.push(e)},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)})}ngOnInit(){this.loadRecords()}onSubmit(t){this.loading=!0,t[this.pk]?this.updateRecord(t,t[this.pk]):this.createRecord(t)}createRecord(t){this.dataService.create(t).subscribe(e=>{Object.assign(t,e),this.toastr.success(o.a.Messages.SAVE_SUCCESS,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}updateRecord(t,e){this.dataService.update(e,t).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.UPDATE_SUCCESS,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}};m.ctorParameters=()=>[{type:d.a},{type:d.f},{type:r.a},{type:a.a},{type:c.b},{type:o.a},{type:n.a}],m=Object(i.c)([Object(l.Component)({selector:"password-policy",template:'<app-basic-crumb [title]="title" [objects]="objects" [url]="parentUrl"></app-basic-crumb>\r\n<div class="row">\r\n  \t<div class="col-xl-12 col-md-12">\r\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\r\n\t\t\t<div class="table-responsive">\r\n\t\t        <table class="table-sm">\r\n\t\t          <tbody>          \t\r\n\t\t          \t  <tr>\r\n\t\t          \t  \t<th>Password Policy</th>\r\n\t\t          \t  \t<th>Default Value</th>\r\n\t\t          \t  \t<th width="100" class="text-center">Enabled?</th>\r\n\t\t          \t  </tr>\r\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\r\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\r\n\t\t\t\t\t\t\t{{\r\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\r\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase())\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t</td>\r\n\t\t\t\t\t  </tr>\r\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'description\'];let i=index;">\r\n\t\t\t            <td>{{ row.description }}</td>\t\t\t            \r\n\t\t\t            <td *ngIf="!row?.type || row?.type==\'text\'">\r\n\t\t\t            \t<input type="text" name="policyValue" id="policyValue" class="form-control input-sm"\r\n\t\t\t\t              \t[(ngModel)]="row.policyValue" [readonly]="row.active!=\'Y\'" (blur)="onSubmit(row)">           \r\n\t\t\t            </td>\r\n\t\t\t            <td *ngIf="row?.type && row?.type==\'number\'">\r\n\t\t\t            \t<input type="number" name="policyValue" id="policyValue" class="form-control input-sm"\r\n\t\t\t\t              \t[(ngModel)]="row.policyValue" [readonly]="row.active!=\'Y\'" (blur)="onSubmit(row)">           \r\n\t\t\t            </td>\r\n\t\t\t            <td *ngIf="row?.type && row?.type==\'date\'">\r\n\t\t\t            \t<input type="text" name="policyValue" id="policyValue" class="form-control input-sm"\r\n\t\t\t\t              \t[(ngModel)]="row.policyValue" [readonly]="row.active!=\'Y\'" placeholder="dd-mmm-yyyy" (change)="onSubmit(row)"\r\n\t\t\t\t              \t#datepickerYMD="bsDatepicker" bsDatepicker placement="top" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\' }">           \r\n\t\t\t            </td>\r\n\t\t\t            <td *ngIf="row?.type && row?.type==\'options\'">\r\n\t\t\t            \t<select class="form-control" [(ngModel)]="row.policyValue" (change)="onSubmit(row)"\r\n\t\t\t        \t\t\t[ngModelOptions]="{standalone: true}" [disabled]="row.active!=\'Y\'">\r\n\t\t\t\t                <option *ngFor="let p of (row.options || [])">{{p}}</option>\r\n\t\t\t\t            </select>         \r\n\t\t\t            </td>\r\n\t\t\t            <td class="text-center">\r\n\t\t\t            \t<input type="checkbox" name="active" id="active{{i}}" (change)="onSubmit(row)"\r\n\t\t\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" [(ngModel)]="row.active">\r\n\t\t\t            </td>\t\t            \r\n\t\t\t          </tr>\r\n\t\t          </tbody>\r\n\t\t        </table>\r\n\t       </div>\r\n    \t</app-card>\r\n  \t</div>\r\n </div>',styles:[""]})],m);var h=s("Sy8X"),u=s("tk/3");const g=s("AytR").a.apiUrl+"positions",v={headers:new u.f({"Content-Type":"application/json"})};let f=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(g+"?filter="+JSON.stringify(t),v)}get(t){return this.http.get(`${g}/${t}`)}create(t){return this.http.post(g,t,v)}update(t,e){return this.http.patch(`${g}/${t}`,e,v)}delete(t){return this.http.delete(`${g}/${t}`,v)}deleteAll(){return this.http.delete(g,v)}findByPosition(t){return this.http.get(`${g}?position=${t}`,v)}};f.ctorParameters=()=>[{type:u.b}],f=Object(i.c)([Object(l.Injectable)({providedIn:"root"})],f);var b=s("3Pt+");let y=class{constructor(t,e,s,i,r,a){this.formBuilder=t,this.route=e,this.router=s,this.dataService=i,this.toastr=r,this.constants=a,this.pk="positionID",this.object="Position",this.parentUrl="/access/positions",this.editUrl="/access/positions/",this.loading=!1,this.errorMessage="",this.submitted=!1,this.rows=[],this.filter={term:null}}loadRecords(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)})}initForm(){this.form=this.formBuilder.group({position:["",b.j.required],positionRank:[null,b.j.required],enabled:["Y",b.j.required]})}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.initForm(),this.route.params.subscribe(t=>{this.id=t.id,this.isAddMode||this.dataService.get(this.id).pipe(Object(p.a)()).subscribe(t=>{this.form.patchValue(t),this.toastr.success(o.a.Messages.RECORD_LOADED,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])})}),this.loadRecords()}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION):(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())}createRecord(){this.dataService.create(this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.SAVE_SUCCESS,o.a.Title.RECORD_OPERATION),this.initForm(),this.loadRecords(),this.position.clear(),this.position.focus()},t=>{this.errorMessage=t.message?t.message:o.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}updateRecord(){this.dataService.update(this.id,this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.UPDATE_SUCCESS,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}deleteRow(t){return Object(i.b)(this,void 0,void 0,function*(){let e=yield n.a.alertDelete(o.a.Title.RECORD_OPERATION,o.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(o.a.Messages.DELETE_SUCCESS,o.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=n.a.handleError(e,o.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}))})}get f(){return this.form.controls}};y.ctorParameters=()=>[{type:b.b},{type:d.a},{type:d.f},{type:f},{type:c.b},{type:o.a}],y.propDecorators={position:[{type:l.ViewChild,args:["position"]}]},y=Object(i.c)([Object(l.Component)({selector:"positions",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t      <access-tabs selectedPath="/access/positions"></access-tabs>\n\t      <h5 class="">{{title}}</h5>\n\t      <form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t        <div class="form-row">\n\t          <div class="form-group col-md-7 col-sm-12">\n\t            <input type="text" formControlName="position" class="form-control" #position\n\t                [ngClass]="{ \'is-invalid\': submitted && f.position.errors }" placeholder="Enter new position to save"/>\n\t            <div *ngIf="submitted && f.position.errors" class="invalid-feedback">\n\t              <div *ngIf="f.position.errors.required">Position name is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-2 col-sm-12">\n\t            <input type="number" formControlName="positionRank" class="form-control" \n\t                [ngClass]="{ \'is-invalid\': submitted && f.positionRank.errors }" placeholder="Rank/Order"/>\n\t            <div *ngIf="submitted && f.positionRank.errors" class="invalid-feedback">\n\t              <div *ngIf="f.positionRank.errors.required">Position\'s Rank is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12 text-right">\n\t            <div class="text-right">\n\t              <a routerLink="{{parentUrl}}" class="btn btn-danger">Cancel</a>\n\t              &nbsp;\n\t              <button [disabled]="loading" class="btn btn-primary">\n\t                <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t                {{isAddMode? \'Add\' : \'Save\'}} Position\n\t              </button>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </form>\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t            <th>#</th>\n\t\t\t            <th>Position Name</th>\n\t\t\t            <th>Rank/Order</th>\n\t\t\t            <th class="text-center">Active</th>\n\t\t\t            <th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'positionRank\'];let i=index;">\n\t\t\t            <td>{{ (i+1) }}</td>\n\t\t\t            <td>{{ row.position }}</td>\n\t\t\t            <td class="text-center">\n\t\t\t            \t{{ row.positionRank }}\n\t\t\t            </td>\n\t\t\t            <td class="text-center">{{ row.enabled }}</td>\t\t            \n\t\t\t           \t<td class="text-right">\n\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t          </tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],y);var I=s("VITL"),O=s("feko");let R=class{constructor(t,e,s,i,r,a,n,o){this.formBuilder=t,this.route=e,this.router=s,this.dataService=i,this.userService=r,this.tokenService=a,this.toastr=n,this.constants=o,this.pk="companyID",this.object="Company",this.parentUrl="/access/companies",this.editUrl="/access/companies/",this.usersUrl="/access/users/",this.loading=!1,this.errorMessage="",this.submitted=!1,this.rows=[],this.filter={term:null}}openLogoEditor(t){this.imageChangedEvent=null,this.croppedImage=null,this.logoEditor.show()}fileChangeEvent(t){this.imageChangedEvent=t}imageCropped(t){this.croppedImage=t.base64}onAddLogo(t){this.form.patchValue({logo:this.croppedImage}),this.logoEditor.hide()}onRemoveProfilePicture(t){return Object(i.b)(this,void 0,void 0,function*(){this.form.get("logo")?(this.croppedImage=null,this.form.patchValue({logo:null}),this.imageChangedEvent=null):(this.imageChangedEvent=null,this.croppedImage=null)})}loadRecords(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)})}initForm(){this.form=this.formBuilder.group({fullName:["",b.j.required],logo:[""],enabled:["Y",b.j.required]})}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.initForm(),this.route.params.subscribe(t=>{this.id=t.id,this.isAddMode||this.dataService.get(this.id).pipe(Object(p.a)()).subscribe(t=>{this.form.patchValue(t),this.toastr.success(o.a.Messages.RECORD_LOADED,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])})}),this.loadRecords()}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION):(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())}createRecord(){this.dataService.create(this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.SAVE_SUCCESS,o.a.Title.RECORD_OPERATION),this.initForm(),this.loadRecords(),this.fullName.clear(),this.fullName.focus()},t=>{this.errorMessage=t.message?t.message:o.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}updateRecord(){this.dataService.update(this.id,this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.UPDATE_SUCCESS,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}deleteRow(t){return Object(i.b)(this,void 0,void 0,function*(){let e=yield n.a.alertDelete(o.a.Title.RECORD_OPERATION,o.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(o.a.Messages.DELETE_SUCCESS,o.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=n.a.handleError(e,o.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}))})}get f(){return this.form.controls}};R.ctorParameters=()=>[{type:b.b},{type:d.a},{type:d.f},{type:O.a},{type:I.a},{type:a.a},{type:c.b},{type:o.a}],R.propDecorators={fullName:[{type:l.ViewChild,args:["fullName"]}],logoEditor:[{type:l.ViewChild,args:["logoEditor"]}]},R=Object(i.c)([Object(l.Component)({selector:"companies",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  <access-tabs selectedPath="/access/companies"></access-tabs>\n\t\t  <h5 class="">{{title}}</h5>\n\t      <form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t        <div class="form-row">\n\t          <div class="form-group col-md-6 col-sm-12">\n\t            <input type="text" formControlName="fullName" class="form-control" #fullName\n\t                [ngClass]="{ \'is-invalid\': submitted && f.fullName.errors }" placeholder="Enter new company to save"/>\n\t            <div *ngIf="submitted && f.fullName.errors" class="invalid-feedback">\n\t              <div *ngIf="f.fullName.errors.required">Company name is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-2 col-sm-12 text-center">\n\t          \t\n\t          \t\x3c!-- Begin: Add or change company logo  --\x3e\n\t          \t<button type="button" class="btn btn-success" (click)="openLogoEditor($event)">\n\t          \t\t{{f?.logo?.value? \'Change Logo\' : \'Add Logo\'}}\n\t          \t</button>\t\n\t          \t           \t\n\t\t\t\t<app-ui-modal #logoEditor  [dialogClass]="\'modal-lg\'">\n\t\t\t       <div class="app-modal-header">\n\t\t\t         <h5 class="modal-title">\t\n\t\t\t         \t{{f.fullName.value? (\'Edit \' + f?.fullName?.value + \' Logo\') : \'Add Company Logo\'}}\t          \n\t\t\t         </h5>\n\t\t\t         <button type="button" class="close basic-close" data-dismiss="modal" \n\t\t\t         \taria-label="Close" (click)="logoEditor.hide()">\n\t\t\t         \t<span aria-hidden="true">&times;</span>\n\t\t\t         </button>\n\t\t\t       </div>\n\t\t\t       <div class="app-modal-body">\t\t\t         \n\t\t\t        <div class="form-row mt-2">   \n\t\t\t\t        <div class="form-group col-sm-12">\n\t\t\t        \t\t<input type="file" style="display: none" #fileInput\n\t\t\t            \t\t(change)="fileChangeEvent($event)"/>\n\t\t\t            \t<div *ngIf="!croppedImage">\t\t\t\t\t            \t\n\t\t\t\t         \t\t<a type="button" (click)="fileInput.click()" class="btn btn-primary">\n\t\t\t\t                \t<i class="fa fa-file-image"></i>\t\t\n\t\t\t\t                \t{{(croppedImage || f?.logo?.value)? \'Replace\' : \'Upload\'}} Company Logo                \t\n\t\t\t\t                </a>\n\t\t\t\t                &nbsp;\n\t\t\t\t                <a type="button" class="btn btn-danger" (click)="onRemoveProfilePicture($event)"\n\t\t\t\t                \t*ngIf="croppedImage || f?.logo?.value">\n\t\t\t\t                \tRemove Company Logo\n\t\t\t\t                </a>\n\t\t\t                </div>\n\t\t\t         \t</div>\n\t\t\t         </div>\n\t\t\t\t\t <div class="form-row">   \n\t\t\t\t        <div class="form-group col-md-6 col-sm-12 mb-0" *ngIf="imageChangedEvent">\n\t\t\t\t\t\t\t<image-cropper\n\t\t\t\t\t\t\t    [imageChangedEvent]="imageChangedEvent"\n\t\t\t\t\t\t\t    [maintainAspectRatio]="true"\n\t\t\t\t\t\t\t    [aspectRatio]="4 / 4"\n\t\t\t\t\t\t\t    format="png"\n\t\t\t\t\t\t\t    resizeToWidth="200"\n\t\t\t\t\t\t\t    resizeToHeight="200"\n\t\t\t\t\t\t\t    (imageCropped)="imageCropped($event)">\n\t\t\t\t\t\t\t</image-cropper>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="form-group col-md-6 col-sm-12 mb-0"\n\t\t\t\t\t\t\t*ngIf="croppedImage || f?.logo?.value" [ngClass]="{\'text-right\':croppedImage}">\t\t\t\t\t\t\n\t\t\t\t\t\t\t<img [src]="croppedImage || f?.logo?.value" width="50%" class="img-radius"/>\n\t\t\t\t\t\t\t<div *ngIf="croppedImage">\t\n\t\t\t\t\t\t\t\t<br/>\t\t\t\t            \t\n\t\t\t\t         \t\t<a type="button" (click)="fileInput.click()" class="btn btn-primary">\n\t\t\t\t                \t<i class="fa fa-file-image"></i>\t\t\n\t\t\t\t                \t{{(croppedImage || f?.logo?.value)? \'Replace\' : \'Upload\'}} Logo                \t\n\t\t\t\t                </a>\n\t\t\t\t                <br/><br/>\n\t\t\t\t                <a type="button" class="btn btn-danger" (click)="onRemoveProfilePicture($event)"\n\t\t\t\t                \t*ngIf="croppedImage || f?.logo?.value">\n\t\t\t\t                \tRemove Logo\n\t\t\t\t                </a>\n\t\t\t\t         \t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t   </div>\n\t\t\t\t   <div class="app-modal-footer p-2">\n\t\t\t          <button type="button" class="btn btn-secondary" data-dismiss="modal" \n\t\t\t          \t(click)="logoEditor.hide()">Close\n\t\t\t          </button>\n\t\t\t          &nbsp;\n\t\t\t          <button type="button" class="btn btn-primary" \n\t\t\t          \t(click)="onAddLogo($event)">OK\n\t\t\t          </button>\n\t\t\t        </div>\t\t\t\t   \n\t\t\t\t</app-ui-modal>\n\t\t\t\t\x3c!-- End: Add or change company logo  --\x3e\n\t\t\t\t\n\t          </div>\n\t          <div class="form-group col-md-4 col-sm-12 text-right">\n\t            <div class="text-right">\n\t              <a routerLink="{{parentUrl}}" class="btn btn-danger">Cancel</a>\n\t              &nbsp;\n\t              <button [disabled]="loading" class="btn btn-primary" *ngIf="tokenService.getUsername()==\'admin\'">\n\t                <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t                {{isAddMode? \'Add\' : \'Save\'}} Company\n\t              </button>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </form>\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t            <th>#</th>\n\t\t\t            <th>Company Name</th>\n\t\t\t            <th>Members</th>\n\t\t\t            <th class="text-center">Active</th>\n\t\t\t            <th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'fullName\'];let i=index;">\n\t\t\t            <td>{{ (i+1) }}</td>\n\t\t\t            <td>{{ row.fullName }}</td>\n\t\t\t            <td class="text-center">\n\t\t\t            \t<a routerLink="{{usersUrl}}" [queryParams]="{companyID: row.companyID}">\n\t\t\t            \t\t{{ row?.associates.length || 0 }}\n\t\t\t            \t</a>\n\t\t\t            </td>\n\t\t\t            <td class="text-center">{{ row.enabled }}</td>\t\t            \n\t\t\t           \t<td class="text-right">\n\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)"\n\t\t\t\t\t\t\t\t*ngIf="tokenService.getUsername()==\'admin\'">\n\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t          </tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],R);var w=s("u0kB"),E=s("V22Z");let D=class{constructor(t,e,s,i,r,a,n){this.route=t,this.tokenService=e,this.teamService=s,this.companyService=i,this.reportService=r,this.dataService=a,this.toastr=n,this.pk="id",this.title="Users",this.object="User",this.editUrl="access/edit-user/",this.addUrl="access/add-user",this.profileUrl="access/profile",this.rows=[],this.errorMessage=null,this.filter={term:null,teamID:"",companyID:""},this.teams=[],this.companies=[]}ngOnInit(){this.route.queryParams.subscribe(t=>{this.teamID=t.teamID||"",this.filter.teamID=this.teamID,this.companyID=t.companyID||this.tokenService.getSelectedCompany().companyID||"",this.filter.companyID=this.companyID}),this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}),this.teamService.getAll().subscribe(t=>{this.teams=t}),this.companyService.getAll().subscribe(t=>{this.companies=t})}deleteRow(t){return Object(i.b)(this,void 0,void 0,function*(){let e=yield n.a.alertDelete(o.a.Title.RECORD_OPERATION,o.a.Messages.CONFIRM_SUSPEND);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(o.a.Messages.SUSPEND_SUCCESS,o.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=n.a.handleError(e,o.a.Messages.SUSPEND_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}))})}};D.ctorParameters=()=>[{type:d.a},{type:a.a},{type:E.a},{type:O.a},{type:w.a},{type:I.a},{type:c.b}],D=Object(i.c)([Object(l.Component)({selector:"app-users",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n  \t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  \t<access-tabs selectedPath="/access/users"></access-tabs>\n\t\t\t<div class="form-row">\n\t\t\t\t<div class="form-group col-md-3 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.teamID" class="form-control">\n\t\t\t\t\t\t<option value="">Search By Team</option>\n\t\t\t\t\t    <option *ngFor="let team of teams" value="{{team.teamID}}">\n\t\t\t\t\t    \t{{team.teamName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-3 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.companyID" class="form-control">\n\t\t\t\t\t\t<option value="">Search By Company</option>\n\t\t\t\t\t    <option *ngFor="let company of companies" value="{{company.companyID}}">\n\t\t\t\t\t    \t{{company.fullName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-3 col-sm-12">\n\t\t\t\t\t<input class="form-control" placeholder="Search {{title}} Here.." [(ngModel)]="filter.term"\n\t\t\t\t\t\t(keyup)="($event.keyCode == 13 ? dataService.findByName(filter.term) : null)"/>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-3 col-sm-12 text-right">\n\t\t\t\t\t<a class="btn btn-primary" rel="tooltip" routerLink="/{{addUrl}}"\n\t\t\t\t\t\t[attr.disabled]="false" type="button" data-original-title=""\n\t\t\t\t\t\ttitle="Add new {{object}} to system" *ngIf="tokenService.getUsername()==\'admin\'">\n\t\t\t\t\t\t<span><i class="fa fa-plus"></i> &nbsp;Add {{object}}</span>\n\t\t\t\t\t</a>\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<button class="btn btn-warning">\n\t\t\t\t\t\t<span class="fa fa-file-pdf"></span>&nbsp;\n\t\t\t\t\t\t<pdf-viewer [src]="reportService.getActiveUsersURL()" [title]="\'REPORT\'"></pdf-viewer>\n\t\t\t\t   </button>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\t\t          \t\n\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t<th>Full Name</th>\n\t\t\t\t\t\t<th>Email Address</th>\n\t\t\t\t\t\t<th>Phone Number</th>\n\t\t\t\t\t\t<th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term |\n\t\t\t          \t\tKeyFilter:\'teams\':filter.teamID | KeyFilter:\'companies\':filter.companyID |  \n\t\t\t          \t\tOrderBy:[\'fullName\']; let i=index;">\n\t\t\t\t\t\t\t<td>{{(i+1) + \'.\'}}</td>\t\t\t\t\t\t\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<a routerLink="/{{profileUrl + \'/\' +row[pk]}}">{{row.fullName | uppercase}}</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>{{row.email | lowercase}}</td>\n\t\t\t\t\t\t\t<td>{{row.phoneNo | mask:\'+000 000 000 000\'}}</td>\n\t\t\t\t\t\t\t<td class="text-right">\n\t\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t<a *ngIf="tokenService.getUsername()==\'admin\'" class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\t\ttitle="Suspend {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\t\tSuspend\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],D);var C=s("9+1D");let S=class{constructor(t,e,s,i,r,a,n){this.route=t,this.dataService=e,this.resourceService=s,this.positionService=i,this.tokenStorage=r,this.functions=a,this.toastr=n,this.pk="id",this.title="Board Directory",this.object="Board",this.profileUrl="access/profile",this.errorMessage=null,this.filter={term:null},this.icons={},this.positions={}}ngOnInit(){let t={where:{userType:o.a.UserTypes.board.name}};this.companyID=this.tokenStorage.getSelectedCompany().companyID||"",this.dataService.getAll(t).subscribe(t=>{this.rows=t},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}),this.getProfileIcons(),this.positionService.getAll().subscribe(t=>{this.positions=this.functions.objectify(t,"positionID")})}getProfileIcons(){let t=this.tokenStorage.getSelectedCompany().companyID||"";this.resourceService.getAll({where:{moduleCode:"usr",companyID:t}}).subscribe(t=>{for(let e of t)this.icons[e.extraData.userID]=this.resourceService.downloadUrl+e.resourceID})}};S.ctorParameters=()=>[{type:d.a},{type:I.a},{type:C.a},{type:f},{type:a.a},{type:n.a},{type:c.b}],S=Object(i.c)([Object(l.Component)({selector:"board",template:'<div class="row">\n  <div class="col-sm-12">\n    <app-card hidHeader="true" cardTitle="Board Members" cardClass="table-card" blockClass="p-0">\n      <div class="dt-responsive table-responsive p-0">\n        <table class="table row-border">\n          <tbody>\n\t          <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t{{\n\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t}}\n\t\t\t\t</td>\n\t\t\t  </tr>\n\t\t\t  <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term \n\t\t\t  \t| KeyFilter:\'companies\':companyID | OrderBy:\'positionRank\';let i=index;">\n\t\t\t\t<td>\t\t\n\t              <div class="d-inline-block align-middle">\n\t                <img src="{{icons[row.id]? icons[row.id] + \'?\' + tokenStorage.getClientCodeQuery() : \'assets/images/user/default-user.png\'}}" \n\t                \talt="user image" class="img-radius align-top m-r-15" style="width:40px;">\n\t                <div class="d-inline-block">\n\t                  <h6 class="m-b-0">{{row.fullName}}</h6>\n\t                  <p class="m-b-0">{{row.email}}</p>\n\t                </div>\n\t              </div>\n\t            </td>\n\t            <td>{{row?.positionID? positions[row?.positionID[companyID]]?.position : \'Member\'}}</td>\n\t            <td>\n\t            \t<a class="btn btn-primary" routerLink="/{{profileUrl + \'/\' +row[pk]}}">...</a>\n\t            </td>\n\t          </tr>\n\t\t</tbody>\n        </table>\n      </div>\n    </app-card>\n  </div>\n</div>\n',styles:[""]})],S);var N=s("gG2O"),T=s("Qaiu"),M=s("7Vn+");let A=class{constructor(t,e,s,i,r,a,n,o,l,d,c,p){this.formBuilder=t,this.route=e,this.router=s,this.userService=i,this.authService=r,this.tokenStorage=a,this.resourceService=n,this.notificationService=o,this.positionService=l,this.constants=d,this.functions=c,this.toastr=p,this.pk="id",this.errorMessage="",this.objects="Users",this.object="User",this.me={},this.submitted=!1,this.counters={},this.positions={},this.loading=!1,this.editUrl="access/edit-user/"}ngOnInit(){this.id=this.route.snapshot.params.id,this.isMe=!this.id,this.title=this.isMe?"My Profile":"User Profile";const t=this.tokenStorage.getUser();this.id=this.isMe?t.id:this.id,this.companyID=this.tokenStorage.getSelectedCompany().companyID||"",this.form=this.formBuilder.group({title:[{value:"",disabled:!0},b.j.required],username:[{value:"",disabled:!0},b.j.required],fullName:[{value:"",disabled:!0},b.j.required],position:[{value:"",disabled:!0}],bio:[{value:"I am a distinguished user on this system. I joined early this..",disabled:!0}],email:[{value:"",disabled:!0},[b.j.required,b.j.email]],userType:[{value:"",disabled:!0},b.j.required],phoneNo:[{value:"+254",disabled:!0},b.j.required],company:[{value:o.a.AppSettings.company,disabled:!0}],otpOn:["N"]}),this.isMe&&(this.me=t,this.form.patchValue(t)),this.userService.get(this.id).pipe(Object(p.a)()).subscribe(t=>{t.resourceID&&(t.icon=this.resourceService.downloadUrl+t.resourceID+"?"+this.tokenStorage.getClientCodeQuery()),this.me=t,this.form.patchValue(t)});for(let e of this.constants.notificationType)this.notificationService.count({messageFolderType:"IB",messageType:e.value}).subscribe(t=>{this.counters[e.value]=t.count});this.positionService.getAll().subscribe(t=>{this.positions=this.functions.objectify(t,"positionID")})}editProfile(){this.submitted=!0,this.loading=!0,this.userService.update(this.id,Object.assign(this.form.value,{otpValidated:"N"})).subscribe(()=>{},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE}).add(()=>{this.loading=!1,this.submitted=!1})}get f(){return this.form.controls}};A.ctorParameters=()=>[{type:b.b},{type:d.a},{type:d.f},{type:I.a},{type:M.a},{type:a.a},{type:C.a},{type:T.a},{type:f},{type:o.a},{type:n.a},{type:c.a}],A=Object(i.c)([Object(l.Component)({selector:"app-profile",template:'<div class="main-content">\n\t<div class="row">\n\t\t<div class="col-4">\n\t\t\t<app-card [customHeader]="true" headerClass="border-0 p-2 pb-0" [options]="false" cardClass="user-card user-card-1" blockClass="pt-0 users-contact">\n                <div class="app-card-header">\n                  <div class="cover-img-block">\n                    <img src="assets/images/widget/slider5.jpg" alt="" class="img-fluid">\n                  </div>\n                </div>\n                <div class="user-about-block text-center">\n                  <div class="row align-items-end">\n                    <div class="col"></div>\n                    <div class="col">\n                      <div class="position-relative d-inline-block">\n                        <img class="img-radius img-fluid wid-80" src="{{ me.icon || \'assets/images/user/default-user.png\'}}" alt="User image">\n                      </div> \n                    </div>\n                    <div class="col"></div>\n                  </div>\n                </div>\n                <div class="text-center">\n                  <h6 class="mb-1 mt-3">{{ me?.fullName || \'App User\'}}</h6>\n                  <p class="mb-3 text-muted" *ngIf="positions">\n                  \t{{ row?.positionID? positions[me?.positionID[companyID]]?.position : \'Member\'}}\n                  </p>\n                  <p class="mt-5 mb-5">{{ \'Joined: &nbsp;\' + (me?.effectiveFrom? (me?.effectiveFrom | date: \'d/m/Y\') : \'dd/mm/yyyy\')}}</p>\n                  <p class="mb-5">{{ \'Expiry: &nbsp;\' + (me?.effectiveTo? (me?.effectiveTo | date: \'d/m/Y\') : \'dd/mm/yyyy\')}}</p>\n                </div>\n                <hr class="wid-80 b-wid-3 my-4">\n                <div class="row text-center">\n                  <div class="col">\n                    <h6 class="mb-1">{{counters?.email || \'-\'}}</h6>\n                    <p class="mb-0">Mails</p>\n                  </div>\n                  <div class="col">\n                    <h6 class="mb-1">{{counters?.sms || \'-\'}}</h6>\n                    <p class="mb-0">Sms</p>\n                  </div>\n                  <div class="col">\n                    <h6 class="mb-1">{{counters?.inline || \'-\'}}</h6>\n                    <p class="mb-0">Notifications</p>\n                  </div>\n                </div>\t\n                <div class="text-center mt-5 mb-4" *ngIf="this.tokenStorage.getUserType()==\'admin\'">\n                \t<a title="Edit {{object}}" class="btn btn-primary" routerLink="/{{editUrl + id}}">\n\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit Profile\n\t\t\t\t\t</a>\n                </div>\t\t\t\n              </app-card>            \n\t\t</div>\n\t\t<div class="col-8">\n\t\t\t<div class="card">\n\t\t\t\t<div class="card-header">\n\t\t\t\t\t<h5 class="title">Profile</h5>\n\t\t\t\t</div>\n\t\t\t\t<div class="card-body">\n\t\t\t\t\t<form [formGroup]="form">\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-12">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label>Full Name</label>\n\t\t\t\t\t\t\t\t\t<input type="text" formControlName="fullName" class="form-control"\n\t\t\t\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.fullName.errors }"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-6 pr-1">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label for="exampleInputEmail1">Email address</label>\n\t\t\t\t\t\t\t\t\t<input type="text" formControlName="email" class="form-control"\n\t\t\t\t\t\t\t\t\t\t[ngClass]="{ \'is-invalid\': submitted && f.email.errors }"/>\n\t\t\t\t\t\t            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">\n\t\t\t\t\t\t                <div *ngIf="f.email.errors.required">Email is required</div>\n\t\t\t\t\t\t                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>\n\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="col-md-6 pl-1">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label>Phone Number</label>\n\t\t\t\t\t\t\t\t\t<input class="form-control" placeholder="e.g. +254 000 000 000" formControlName="phoneNo"\n\t\t\t\t\t\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.phoneNo.errors}"\n\t\t\t\t\t\t\t\t\t\tmask="(+000) 000-000000">\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-12">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label>Physical Address</label>\n\t\t\t\t\t\t\t\t\t<input class="form-control"\n\t\t\t\t\t\t\t\t\t\tplaceholder="Home Address" type="text"\n\t\t\t\t\t\t\t\t\t\tvalue="Nairobi, Kenya">\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-6 pr-1" *ngFor="let info of (me.other || [])">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label>{{info.info_type}}</label>\n\t\t\t\t\t\t\t\t\t<input type="text" [value]="info.info_value" class="form-control" readonly/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\t\t\t\t\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-12">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<label>Bio</label>\n\t\t\t\t\t\t\t\t\t<textarea formControlName="bio" class="form-control textarea" cols="80" rows="9">\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t</textarea>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t<div class="col-md-12">\n\t\t\t\t\t\t\t\t<div class="form-group">\n\t\t\t\t\t\t\t\t\t<div class="checkbox checkbox-primary d-inline">\n\t\t\t\t\t\t              <input type="checkbox" name="otpOn" id="otpOn" (change) = "editProfile()"\n\t\t\t\t\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" formControlName="otpOn">\n\t\t\t\t\t\t              <label for="otpOn" class="cr">\n\t\t\t\t\t\t              \t{{\n\t\t\t\t\t\t              \t\t(f.otpOn.value==\'Y\')? \n\t\t\t\t\t\t              \t\t\'Deactivate OTP verification\' : \'Activate OTP verification\'\n\t\t\t\t\t\t              \t}}\n\t\t\t\t\t\t              </label>\n\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>',styles:[""]})],A);let k=class{constructor(t,e,s,i,r,a,n,o){this.formBuilder=t,this.route=e,this.router=s,this.dataService=i,this.userService=r,this.tokenService=a,this.toastr=n,this.constants=o,this.pk="teamID",this.object="Team",this.parentUrl="/access/teams",this.editUrl="/access/teams/",this.usersUrl="/access/users/",this.loading=!1,this.errorMessage="",this.submitted=!1,this.rows=[],this.filter={term:null}}loadRecords(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)})}initForm(){this.form=this.formBuilder.group({teamName:["",b.j.required],enabled:["Y",b.j.required],companyID:[this.tokenService.getSelectedCompany().companyID||""]})}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.initForm(),this.route.params.subscribe(t=>{this.id=t.id,this.isAddMode||this.dataService.get(this.id).pipe(Object(p.a)()).subscribe(t=>{this.form.patchValue(t),this.toastr.success(o.a.Messages.RECORD_LOADED,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])})}),this.loadRecords()}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION):(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())}createRecord(){this.dataService.create(this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.SAVE_SUCCESS,o.a.Title.RECORD_OPERATION),this.initForm(),this.loadRecords(),this.teamName.clear(),this.teamName.focus()},t=>{this.errorMessage=t.message?t.message:o.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}updateRecord(){this.dataService.update(this.id,this.form.value).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.UPDATE_SUCCESS,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}deleteRow(t){return Object(i.b)(this,void 0,void 0,function*(){let e=yield n.a.alertDelete(o.a.Title.RECORD_OPERATION,o.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(o.a.Messages.DELETE_SUCCESS,o.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=n.a.handleError(e,o.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}))})}get f(){return this.form.controls}};k.ctorParameters=()=>[{type:b.b},{type:d.a},{type:d.f},{type:E.a},{type:I.a},{type:a.a},{type:c.b},{type:o.a}],k.propDecorators={teamName:[{type:l.ViewChild,args:["teamName"]}]},k=Object(i.c)([Object(l.Component)({selector:"app-teams",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  <access-tabs selectedPath="/access/teams"></access-tabs>\n\t      <h5 class="">{{title}}</h5>\n\t      <form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t        <div class="form-row">\n\t          <div class="form-group col-md-9 col-sm-12">\n\t            <input type="text" formControlName="teamName" class="form-control" #teamName\n\t                [ngClass]="{ \'is-invalid\': submitted && f.teamName.errors }" placeholder="Enter new team to save"/>\n\t            <div *ngIf="submitted && f.teamName.errors" class="invalid-feedback">\n\t              <div *ngIf="f.teamName.errors.required">Team name is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12 text-right">\n\t            <div class="text-right">\n\t              <a routerLink="{{parentUrl}}" class="btn btn-danger">Cancel</a>\n\t              &nbsp;\n\t              <button [disabled]="loading" class="btn btn-primary">\n\t                <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t                {{isAddMode? \'Add\' : \'Save\'}} Team\n\t              </button>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </form>\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t            <th>#</th>\n\t\t\t            <th>Team Name</th>\n\t\t\t            <th>Members</th>\n\t\t\t            <th class="text-center">Active</th>\n\t\t\t            <th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'teamName\'];let i=index;">\n\t\t\t            <td>{{ (i+1) }}</td>\n\t\t\t            <td>{{ row.teamName }}</td>\n\t\t\t            <td class="text-center">\n\t\t\t            \t<a routerLink="{{usersUrl}}" [queryParams]="{teamID: row.teamID}">\n\t\t\t            \t\t{{ row?.members.length || 0 }}\n\t\t\t            \t</a>\n\t\t\t            </td>\n\t\t\t            <td class="text-center">{{ row.enabled }}</td>\t\t            \n\t\t\t           \t<td class="text-right">\n\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\tDelete\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t          </tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],k);var P=s("XhZV"),U=s("eKYg"),x=s("LvDl"),_=s.n(x);let j=class extends P.a{constructor(t,e,s,i,r,a,n,o,l,d,c,p,m){super(e,o,n,l,c,p,m),this.formBuilder=t,this.route=e,this.router=s,this.dataService=i,this.positionService=r,this.teamService=a,this.companyService=n,this.resourceService=o,this.tokenService=l,this.passwordPolicyService=d,this.constants=c,this.functions=p,this.toastr=m,this.pk="id",this.objects="Users",this.object="User",this.parentUrl="/access/users",this.loading=!1,this.errorMessage="",this.submitted=!1,this.positions=[],this.modules={rows:[],selected:[]},this.teams={rows:[],selected:[]},this.companies={rows:[],selected:[]},this.other=[],this.moduleCode="usr",this.positionID={},this.employeeNumber={},this.passwordPolicies={}}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.companyID=this.tokenService.getSelectedCompany().companyID||"";const t=[b.j.minLength(8)];this.isAddMode&&t.push(b.j.required);let e=new Date(Date.now());const s={validators:Object(U.a)("password","confirmPassword")};this.form=this.formBuilder.group({dateCreated:[e,b.j.required],effectiveFrom:[null],effectiveTo:[null],channel:["email"],title:["",b.j.required],positionID:[{}],employeeNumber:[{}],username:["",b.j.required],fullName:["",b.j.required],email:["",[b.j.required,b.j.email]],userType:[o.a.UserTypes.board.name,b.j.required],password:["",[b.j.minLength(8),b.j.nullValidator]],confirmPassword:["",this.id?[]:[b.j.nullValidator]],phoneNo:["+254",[b.j.required,b.j.minLength(12),b.j.maxLength(12)]],teams:this.formBuilder.array([]),companies:this.formBuilder.array([]),modules:this.formBuilder.array([]),bio:[""],other:this.formBuilder.array([]),icon:[""],otpOn:["N"]},s),this.modules.rows=this.functions.indexify(this.constants.moduleCodes),this.teamService.getAll().subscribe(t=>{this.teams.rows=t}),this.positionService.getAll().subscribe(t=>{this.positions=t}),this.companyService.getAll().subscribe(t=>{this.companies.rows=t}),this.passwordPolicyService.enforcePolicy(this.form.get("password"),this.passwordPolicies,!1),this.removeFiles(),this.isAddMode||this.dataService.get(this.id).pipe(Object(p.a)()).subscribe(t=>{this.resourceID=t.resourceID||null,this.resourceID&&(t.icon=this.resourceService.downloadUrl+this.resourceID+"?"+this.tokenService.getClientCodeQuery()),this.form.patchValue(t),this.form.patchValue({confirmPassword:t.password}),this.teams.selected=t.teams||[],this.companies.selected=t.companies||[],this.modules.selected=t.modules||[],this.other=Array.isArray(t.other)?t.other:[],this.positionID="object"==typeof t.positionID?t.positionID:{},this.employeeNumber="object"==typeof t.employeeNumber?t.employeeNumber:{},this.form.patchValue({effectiveFrom:t.effectiveFrom?new Date(t.effectiveFrom):null}),this.form.patchValue({effectiveTo:t.effectiveTo?new Date(t.effectiveTo):null}),this.other.length>0&&this.populateOther(),this.toastr.success(o.a.Messages.RECORD_LOADED,o.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl],{relativeTo:this.route})})}onSubmit(){if(this.submitted=!0,this.form.invalid)return void this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION);let t=Object.assign(this.form.value,{modules:this.modules.selected,teams:this.teams.selected,companies:this.companies.selected,positionID:this.positionID,employeeNumber:this.employeeNumber});t=_.a.omit(t,"icon"),t=_.a.omit(t,"confirmPassword"),this.loading=!0,this.isAddMode?this.createRecord(t):this.updateRecord(t)}createRecord(t){this.dataService.create(t).pipe(Object(p.a)()).subscribe(t=>{this.toastr.success(o.a.Messages.SAVE_SUCCESS,o.a.Title.RECORD_OPERATION),this.uploadProfilePicture(t.id,t)},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.SAVE_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}updateRecord(t){this.dataService.update(this.id,t).pipe(Object(p.a)()).subscribe(()=>{this.toastr.success(o.a.Messages.UPDATE_SUCCESS,o.a.Title.RECORD_OPERATION),this.uploadProfilePicture(this.id,t)},t=>{this.errorMessage=t.message?t.message:o.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}onTeamsChange(t,e){if(e.target.checked)this.teams.selected.push(t.teamID);else{let e=this.teams.selected.indexOf(t.teamID);this.teams.selected.splice(e,1)}}onCompaniesChange(t,e){if(e.target.checked)this.companies.selected.push(t.companyID);else{let e=this.companies.selected.indexOf(t.companyID);this.companies.selected.splice(e,1)}}onModulesChange(t,e){if(e.target.checked)this.modules.selected.push(t.name);else{let e=this.modules.selected.indexOf(t.name);this.modules.selected.splice(e,1)}}onPositionsChange(t,e){e.target.value?Object.assign(this.positionID,JSON.parse('{"'+t+'":"'+e.target.value+'"}')):delete this.positionID[t]}onEmployeeNumberChange(t,e){e.target.value?Object.assign(this.employeeNumber,JSON.parse('{"'+t+'":"'+e.target.value+'"}')):delete this.employeeNumber[t]}uploadProfilePicture(t,e){let s=this.tokenService.getSelectedCompany().companyID||"";this.resourceID&&this.resourceService.deleteForever(this.resourceID).subscribe(()=>{}),this.uploadFiles(s,this.moduleCode,null,{userID:t}),this.router.navigate([this.parentUrl])}fileChangeEvent(t){this.imageChangedEvent=t}imageCropped(t){this.croppedImage=t.base64;let e=this.functions.randomWord(20)+(new Date).getTime()+".png",s=this.uploadService.base64ToFile(this.croppedImage,e);this.addMetaInfo(s),this.uploadService.selectedFiles=[s]}populateOther(){let t=this.form.get("other").length,e=this.other.length,s=e>t?e-t:0,i=t>e?t-e:0;for(let r=0;r<s;r++)this.addRowOther();for(let r=0;r<i;r++)this.deleteRowOther(r);this.form.patchValue({other:this.other})}addRowOther(){const t=this.form.get("other");t.push(this.formBuilder.group({id:[t.length+1],info_type:["",b.j.required],info_value:[""],isEditable:[!0]}))}deleteRowOther(t){this.form.get("other").removeAt(t)}onRemoveProfilePicture(t){return Object(i.b)(this,void 0,void 0,function*(){if(this.resourceID){let t=yield n.a.alertDelete(o.a.Title.RECORD_OPERATION,o.a.Messages.CONFIRM_DELETE_FOREVER);(null==t?void 0:t.value)&&this.resourceService.deleteForever(this.resourceID).subscribe(t=>{this.toastr.success(o.a.Messages.DELETE_SUCCESS,o.a.Title.RECORD_OPERATION),this.croppedImage=null,this.form.patchValue({icon:null}),this.imageChangedEvent=null,this.resourceID=null},t=>{this.errorMessage=n.a.handleError(t,o.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.RECORD_OPERATION)})}else this.imageChangedEvent=null,this.croppedImage=null})}get c(){return this.form.get("other")}get f(){return this.form.controls}};j.ctorParameters=()=>[{type:b.b},{type:d.a},{type:d.f},{type:I.a},{type:f},{type:E.a},{type:O.a},{type:C.a},{type:a.a},{type:r.a},{type:o.a},{type:n.a},{type:c.b}],j=Object(i.c)([Object(l.Component)({selector:"app-add-user",template:'<app-basic-crumb [title]="title" [objects]="objects" [url]="parentUrl"></app-basic-crumb>\n<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" blockClass="table-border-style">\n\t\t\t<form [formGroup]="form" (ngSubmit)="onSubmit()" autocomplete="off">\t\t\t\t\n\t\t\t    <div class="pb-4">\n\t\t\t        <strong>Enter basic user details below</strong>\n\t\t\t    </div>\n\t\t\t    <div class="form-row">\t\t\t        \n\t\t\t        <div class="form-group col-sm-12" *ngIf="tokenService.getUsername()==\'admin\'">\n\t\t\t            <label>Role*</label>\n\t\t\t            <select formControlName="userType" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.userType.errors }">\n\t\t\t                <option value="{{constants.userTypes.board.name}}">{{constants.userTypes.board.singular}}</option>\n\t\t\t                <option value="{{constants.userTypes.admin.name}}">{{constants.userTypes.admin.singular}}</option>\n\t\t\t                <option value="{{constants.userTypes.other.name}}">{{constants.userTypes.other.singular}}</option>\n\t\t\t            </select>\n\t\t\t            <div *ngIf="submitted && f.userType.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.userType.errors.required">User Type is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Full Name*</label>\n\t\t\t            <input type="text" autocomplete="off" formControlName="fullName"  placeholder="Enter user full name"\n\t\t\t            \tclass="form-control" [ngClass]="{ \'is-invalid\': submitted && f.fullName.errors }"/>\n\t\t\t            <div *ngIf="submitted && f.fullName.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.fullName.errors.required">Full Name is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\t\t      \n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Username*</label>\n\t\t\t            <input type="text" autocomplete="off" formControlName="username"  placeholder="Username"\n\t\t\t            \tclass="form-control" [ngClass]="{ \'is-invalid\': submitted && f.username.errors }"/>\n\t\t\t            <div *ngIf="submitted && f.username.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.username.errors.required">Username is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t    </div>\n\t\t\t    <div class="form-row mt-3">\n\t\t\t    \t<div class="form-group col-sm-12">\n\t\t\t            <label>Title*</label>\n\t\t\t            <select formControlName="title" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.title.errors }">\n\t\t\t                <option value=""></option>\n\t\t\t                <option value="Mr">Mr</option>\n\t\t\t                <option value="Mrs">Mrs</option>\n\t\t\t                <option value="Miss">Miss</option>\n\t\t\t                <option value="Ms">Ms</option>\n\t\t\t                <option value="Dr.">Dr.</option>\n\t\t\t                <option value="Eng.">Eng.</option>\n\t\t\t                <option value="Prof.">Prof.</option>\n\t\t\t                <option value="Hon.">Hon.</option>\n\t\t\t            </select>\n\t\t\t            <div *ngIf="submitted && f.title.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.title.errors.required">Title is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Email Address*</label>\n\t\t\t            <input type="text" autocomplete="off" formControlName="email" placeholder="e.g. xxxx@domain.com" \n\t\t\t            \tclass="form-control" [ngClass]="{ \'is-invalid\': submitted && f.email.errors }" />\n\t\t\t            <div *ngIf="submitted && f.email.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.email.errors.required">Email is required</div>\n\t\t\t                <div *ngIf="f.email.errors.email">Email must be a valid email address</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Phone Number*</label>\n\t\t\t            <input class="form-control" placeholder="e.g. +254 000 000 000" formControlName="phoneNo" \n\t\t\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.phoneNo.errors}"\n\t\t\t\t\t\t\tmask="(+000) 000-000000">\n\t\t\t            <div *ngIf="submitted && f.phoneNo.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.phoneNo.errors.required">Phone number is required</div>\n\t\t\t                <div *ngIf="f.phoneNo.errors.minlength">Must be equal to 12 character(s)</div>\n\t\t\t                <div *ngIf="f.phoneNo.errors.maxlength">Must be equal to 12 character(s)</div>\n\t\t\t\t\t\t\t<div *ngIf="f.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t    </div>\n\t\t\t    <div class="pt-3" *ngIf="!isAddMode">\n\t\t\t        <strong>(Password Reset Option)</strong>\n\t\t\t    </div>\n\t\t\t    <div class="pt-3" *ngIf="isAddMode">\n\t\t\t        <strong>(Leave blank to autogenerate password)</strong>\n\t\t\t    </div>\n\t\t\t    <div class="form-row pt-3">\n\t\t\t    \t<div class="form-group col-sm-12">\n\t\t\t    \t\t<div class="input-group mb-3">Choose reset method</div>\n\t\t\t\t\t\t<div class="form-group text-left mt-2">\n\t\t\t\t\t\t\t<div class="radio radio-primary d-inline">\n\t\t\t\t              <input type="radio" name="channel" id="channelSms" value="sms" \n\t\t\t\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t\t\t\t              <label for="channelSms" class="cr pr-3">Sms</label>\n\t\t\t\t            </div>\n\t\t\t\t            <div class="radio radio-primary d-inline">\n\t\t\t\t              <input type="radio" name="channel" id="channelEmail" value="email" \n\t\t\t\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t\t\t\t              <label for="channelEmail" class="cr pr-3">Email</label>\n\t\t\t\t            </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div *ngIf="submitted && f.channel.errors" class="invalid-option-check text-left">\n\t\t\t                <div *ngIf="f.channel.errors.required">Choose reset method</div>\n\t\t\t            </div>\n\t\t\t    \t</div>\n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Enter New Password</label>\n\t\t\t            <input type="password" autocomplete="off" formControlName="password" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.password.errors }" />\n\t\t\t            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.password.errors.required">Password is required</div>\n\t\t\t                <div *ngIf="f.password.errors.minlength">Password must be at least {{passwordPolicies?.PASSWORD_MIN_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.maxlength">Password must not exceed {{passwordPolicies?.PASSWORD_MAX_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.uppercase">Password must contain {{passwordPolicies?.PASSWORD_UPPERCASE_COUNT?.policyValue || 0}} uppercase letter(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.lowercase">Password must contain {{passwordPolicies?.PASSWORD_LOWERCASE_COUNT?.policyValue || 0}} lowercase letter(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.numeric">Password must contain {{passwordPolicies?.PASSWORD_NUMERIC_COUNT?.policyValue || 0}} numeric character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.special">Password must contain {{passwordPolicies?.PASSWORD_SPECIAL_CHAR_COUNT?.policyValue || 0}} special characters</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Confirm New Password</label>\n\t\t\t            <input type="password"  autocomplete="off" formControlName="confirmPassword" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.confirmPassword.errors }" />\n\t\t\t            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>\n\t\t\t                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t    </div>\n\t\t        <div class="mt-3 pb-4">\n\t\t\t        <strong></strong>\n\t\t\t    </div>\t\t\t    \n\t\t\t    <div class="form-row">\n\t\t\t       <div class="form-group col-sm-12"> \n\t\t\t    \t\t<div class="row">\n\t\t\t\t       \t  \t<div class="col-md-6 col-sm-6 col-xs-12">\n\t\t\t\t       \t  \t\t<strong>Add user to the companies below</strong>\n\t\t\t\t       \t  \t</div>\n\t\t\t\t       \t  \t<div class="col-md-4 col-sm-4  col-xs-12">\n\t\t\t\t       \t  \t\t<strong>Position</strong>\n\t\t\t\t       \t  \t</div>\n\t\t\t\t       \t  \t<div class="col-md-2 col-sm-2 col-xs-12">\n\t\t\t\t       \t  \t\t<strong>Employee No.</strong>\n\t\t\t\t       \t  \t</div>\n\t\t\t\t       \t</div>\n\t\t\t       </div>\n\t\t\t       <div class="form-group col-sm-12" *ngFor="let row of companies.rows | OrderBy:\'fullName\';">\n\t\t\t       \t  <div class="row">\n\t\t\t\t       \t  \t<div class="col-md-6 col-sm-6 col-xs-12">\n\t\t\t\t\t          <div class="checkbox checkbox-primary d-inline">\n\t\t\t\t\t              <input type="checkbox" name="{{row.fullName}}" id="{{row.companyID}}" \n\t\t\t\t\t              \t(change)="onCompaniesChange(row,$event)" [checked]="companies.selected.indexOf(row.companyID)>-1">\n\t\t\t\t\t              <label for="{{row.companyID}}" class="cr">{{row.fullName}}</label>\n\t\t\t\t\t          </div>\n\t\t\t\t\t        </div>\n\t\t\t\t        \t<div class="col-md-4 col-sm-4  col-xs-12">\n\t\t\t\t        \t\t<select (change)="onPositionsChange(row.companyID,$event)" class="form-control"\n\t\t\t\t        \t\t\t[(ngModel)]="positionID[row.companyID]" \n\t\t\t\t        \t\t\t[ngModelOptions]="{standalone: true}" [disabled]="companies.selected.indexOf(row.companyID)==-1" \n\t\t\t\t        \t\t\t[ngClass]="{ \'is-invalid\': submitted && f.positionID.errors }">\n\t\t\t\t        \t\t\t<option value="">Select Position</option>\n\t\t\t\t\t                <option *ngFor="let p of positions | OrderBy:\'positionRank\'" value="{{p.positionID}}">\n\t\t\t\t\t                \t{{p.position}}\n\t\t\t\t\t                </option>\n\t\t\t\t\t            </select>\n\t\t\t\t        \t</div>\n\t\t\t\t        \t<div class="col-md-2 col-sm-2 col-xs-12">\n\t\t\t\t        \t\t<input type="text" name="{{row.fullName + \'employeeNumber\'}}" class="form-control" \n\t\t\t\t        \t\t\tid="{{row.companyID+ \'employeeNumber\'}}" placeholder="Employee No."\n\t\t\t\t        \t\t\t[(ngModel)]="employeeNumber[row.companyID]" [ngModelOptions]="{standalone: true}" \n\t\t\t\t\t              \t(change)="onEmployeeNumberChange(row.companyID,$event)"/>\n\t\t\t\t        \t</div>\n\t\t\t           </div>\n\t\t\t       </div>\n\t\t        </div>\n\t\t\t    <div class="mt-3 pb-4" *ngIf="form.get(\'userType\').value==constants.userTypes.board.name\n\t\t\t    \t|| form.get(\'userType\').value==constants.userTypes.other.name">\n\t\t\t        <strong>Add user to the teams/groups below</strong>\n\t\t\t    </div>\t\t\t    \n\t\t\t    <div class="form-row" *ngIf="form.get(\'userType\').value==constants.userTypes.board.name\n\t\t\t    \t|| form.get(\'userType\').value==constants.userTypes.other.name">\n\t\t\t       <div class="form-group col-sm-12" *ngFor="let row of teams.rows | OrderBy:\'teamName\';">\n\t\t\t          <div class="checkbox checkbox-primary d-inline">\n\t\t\t              <input type="checkbox" name="{{row.teamName}}" id="{{row.teamID}}" \n\t\t\t              \t(change)="onTeamsChange(row,$event)" [checked]="teams.selected.indexOf(row.teamID)>-1">\n\t\t\t              <label for="{{row.teamID}}" class="cr">{{row.teamName}}</label>\n\t\t\t          </div>\n\t\t\t        </div>\n\t\t        </div>\n\t\t        <div class="mt-3 pb-4" *ngIf="tokenService.getUsername()==\'admin\'">\n\t\t\t        <strong>(Choose modules to be accessed by user below)</strong>\n\t\t\t    </div>\t\t\t    \n\t\t\t    <div class="form-row" *ngIf="tokenService.getUsername()==\'admin\'">\n\t\t\t       <div class="form-group col-lg-2 col-md-3 col-sm-4 col-xs-6" *ngFor="let row of modules.rows">\n\t\t\t          <div class="checkbox checkbox-primary d-inline">\n\t\t\t              <input type="checkbox" name="{{row.plural}}" id="{{row.name}}" \n\t\t\t              \t(change)="onModulesChange(row,$event)" [checked]="modules.selected.indexOf(row.name)>-1">\n\t\t\t              <label for="{{row.name}}" class="cr">{{row.plural | TitleCase}}</label>\n\t\t\t          </div>\n\t\t\t        </div>\n\t\t        </div>\t\t        \n\t\t        \x3c!--  profile picture upload here --\x3e\t \n\t\t        <div class="form-row mt-2">   \n\t\t\t        <div class="form-group col-sm-12">\n\t\t        \t\t<input type="file" style="display: none" #fileInput\n\t\t            \t\t(change)="fileChangeEvent($event)"/>\t\t\t\t\t            \t\n\t\t         \t\t<a type="button" (click)="fileInput.click()" class="btn btn-primary">\n\t\t                \t<i class="fa fa-file-image"></i>\t\t\n\t\t                \t{{(croppedImage || resourceID)? \'Replace\' : \'Upload\'}} Profile Photo                \t\n\t\t                </a>\n\t\t                &nbsp;\n\t\t                <a type="button" class="btn btn-danger" (click)="onRemoveProfilePicture($event)"\n\t\t                \t*ngIf="croppedImage || resourceID">\n\t\t                \tRemove Profile Photo\n\t\t                </a>\n\t\t         \t</div>\n\t\t         </div>\n\t\t\t\t <div class="form-row">   \n\t\t\t        <div class="form-group col-md-6 col-sm-12 mb-0" *ngIf="imageChangedEvent">\n\t\t\t\t\t\t<image-cropper\n\t\t\t\t\t\t    [imageChangedEvent]="imageChangedEvent"\n\t\t\t\t\t\t    [maintainAspectRatio]="true"\n\t\t\t\t\t\t    [aspectRatio]="4 / 4"\n\t\t\t\t\t\t    format="png"\n\t\t\t\t\t\t    resizeToWidth="200"\n\t\t\t\t\t\t    resizeToHeight="200"\n\t\t\t\t\t\t    (imageCropped)="imageCropped($event)">\n\t\t\t\t\t\t</image-cropper>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="form-group col-md-6 col-sm-12 mb-0"\n\t\t\t\t\t\t*ngIf="croppedImage || resourceID" [ngClass]="{\'text-right\':croppedImage}">\t\t\t\t\t\t\n\t\t\t\t\t\t<img [src]="croppedImage || f.icon.value" width="50%" class="img-radius"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n       \t\t    \x3c!--  profile picture upload here --\x3e\n       \t\t    \n\t\t        <div class="form-row">   \n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Bio:</label>\n\t\t\t            <textarea rows="8" formControlName="bio"  placeholder="Enter user\'s bio or description"\n\t\t\t            \tclass="form-control" [ngClass]="{ \'is-invalid\': submitted && f.bio.errors }">\n\t\t\t            </textarea>\n\t\t\t            <div *ngIf="submitted && f.bio.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.bio.errors.required">Bio is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t    </div>\t\t\n\t\t\t    <div class="form-row mt-3">   \t\t\t    \n\t\t\t        <div class="form-group col-sm-12">\n\t\t\t            <label>Other Info:</label>\n\t\t\t            <div class="table-responsive">\t\t\n\t\t\t\t\t        <table class="table table-borderless table-sm nopadding">\t\t\n\t\t\t\t\t\t\t\t<tr>\t\t\t\t\n\t\t\t\t\t\t\t\t\t<th width="50">No.</th>\n\t\t\t\t\t\t\t\t\t<th>Information Type</th>\n\t\t\t\t\t\t\t\t\t<th>Information Value</th>\t\n\t\t\t\t\t\t\t\t\t<th class="text-right">\n\t\t\t\t\t\t                <a href="javascript:" (click)="addRowOther();">\n\t\t\t\t\t\t                \t<i class="feather icon-plus f-16 ml-3 text-c-green"></i>\n\t\t\t\t\t\t                </a>\n\t\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t<ng-container formArrayName="other" *ngFor="let group of c.controls; let i=index">\n\t\t\t\t\t\t\t\t\t<tr [formGroupName]="i">\t\n\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t                {{group.controls.id.value}}.\n\t\t\t\t\t\t\t            </td>\t\t\t\t\t            \n\t\t\t\t\t\t\t            <td>\t\n\t\t\t\t\t\t\t                <select formControlName="info_type" class="form-control" [ngClass]="{ \'is-invalid\': submitted && group.controls.info_type.errors }">\n\t\t\t\t\t\t\t\t                <option value="">Information Type</option>\n\t\t\t\t\t\t\t\t                <option value="Date Of Birth">Date Of Birth</option>\n\t\t\t\t\t\t\t\t                <option value="ID Number">ID Number</option>\n\t\t\t\t\t\t\t\t                <option value="Passport Number">Passport Number</option>\n\t\t\t\t\t\t\t\t                <option value="PIN Number">PIN Number</option>\n\t\t\t\t\t\t\t\t                <option value="NSSF Number">NSSF Number</option>\n\t\t\t\t\t\t\t\t                <option value="NHIF Number">NHIF Number</option>\n\t\t\t\t\t\t\t\t            </select>\n\t\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.info_type.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t\t                <div *ngIf="group.controls.info_type.errors.required">Information Type is required</div>\n\t\t\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t\t\t\t</td> \n\t\t\t\t\t\t\t\t\t\t<td>\t\t\t\t            \t\t\t\n\t\t\t\t\t\t\t\t            <input class="form-control" type="text" formControlName="info_value"\n\t\t\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.info_value.errors }"\n\t\t\t\t\t\t\t                \tplaceholder="Information Value">\n\t\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.info_value.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t\t                <div *ngIf="group.controls.info_value.errors.required">Information Value is required</div>\n\t\t\t\t\t\t\t\t            </div> \n\t\t\t\t\t\t\t\t\t\t</td>\t\t\t\t\t\t            \t\n\t\t\t\t\t\t\t            <td class="text-right pt-3">\n\t\t\t\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRowOther(i)">\n\t\t\t\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t\t\t                \tRemove\n\t\t\t\t\t\t\t                </a>\n\t\t\t\t\t\t\t            </td>\n\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t</div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-md-6">\n\t\t\t            <label for="effectiveFrom">Effective From:</label>\n\t\t\t            <input type="text" class="form-control" formControlName="effectiveFrom" placeholder="dd-mmm-yyyy"\n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.effectiveFrom.errors }"\n\t\t\t            \t#datepickerYMD="bsDatepicker" bsDatepicker placement="top" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\' }">\n\t\t\t            <div *ngIf="submitted && f.effectiveFrom.errors" class="invalid-feedback">\n\t\t\t\t\t        <div *ngIf="f.effectiveFrom.errors.required">Effective from date is required</div>\n\t\t\t\t\t    </div>\n\t\t\t        </div>\t\n\t\t\t        <div class="form-group col-md-6">\n\t\t\t            <label for="effectiveTo">Effective To:</label>\n\t\t\t            <input type="text" class="form-control" formControlName="effectiveTo" placeholder="dd-mmm-yyyy"\n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.effectiveTo.errors }"\n\t\t\t            \t#datepickerYMD="bsDatepicker" bsDatepicker placement="top" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\' }">\n\t\t\t            <div *ngIf="submitted && f.effectiveTo.errors" class="invalid-feedback">\n\t\t\t\t\t        <div *ngIf="f.effectiveTo.errors.required">Effective to date is required</div>\n\t\t\t\t\t    </div>\n\t\t\t        </div>\t\n\t\t\t    </div>\t \t\t\t    \t\t  \n\t\t\t    <div class="form-group pt-2 pb-2">\n\t\t\t\t\t<div class="checkbox checkbox-primary d-inline">\n\t\t              <input type="checkbox" name="otpOn" id="otpOn"\n\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" formControlName="otpOn">\n\t\t              <label for="otpOn" class="cr">\n\t\t              \t{{\n\t\t              \t\t(f.otpOn?.value==\'Y\')? \n\t\t              \t\t\'Deactivate OTP verification\' : \'Activate OTP verification\'\n\t\t              \t}}\n\t\t              </label>\n\t\t\t        </div>\n\t\t\t\t</div> \n\t\t\t    <div class="form-group">\n\t\t\t        <button [disabled]="loading" class="btn btn-primary">\n\t\t\t            <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t\t\t            Save\n\t\t\t        </button>\n\t\t\t        <a routerLink="{{parentUrl}}" class="btn btn-link">Cancel</a>\n\t\t\t    </div>\n\t\t\t</form>\n\t\t</app-card>\n\t</div>\n</div>',styles:[""]})],j);const F=[{path:"",redirectTo:"users",pathMatch:"full"},{path:"me",component:A,canActivate:[N.a]},{path:"change-password",component:h.a,canActivate:[N.a]},{path:"password-policy",component:m,canActivate:[N.a]},{path:"profile/:id",component:A,canActivate:[N.a],data:{roles:["admin","board","other"]}},{path:"board",component:S,canActivate:[N.a],data:{roles:["admin","board"]}},{path:"users",component:D,canActivate:[N.a],data:{roles:["admin"]}},{path:"add-user",component:j,canActivate:[N.a],data:{roles:["admin"]}},{path:"edit-user/:id",component:j,canActivate:[N.a],data:{roles:["admin"]}},{path:"teams",component:k,canActivate:[N.a],data:{roles:["admin"]}},{path:"teams/:id",component:k,canActivate:[N.a],data:{roles:["admin"]}},{path:"companies",component:R,canActivate:[N.a],data:{roles:["admin"]}},{path:"companies/:id",component:R,canActivate:[N.a],data:{roles:["admin"]}},{path:"positions",component:y,canActivate:[N.a],data:{roles:["admin"]}},{path:"positions/:id",component:y,canActivate:[N.a],data:{roles:["admin"]}}];let L=class{};L=Object(i.c)([Object(l.NgModule)({imports:[d.g.forChild(F)],exports:[d.g]})],L);var V=s("1kSV"),q=s("ebz3"),B=s("ofXK"),$=s("njyG");let Y=class{constructor(){this.tabs=[{name:"Users",path:"/access/users"},{name:"Teams",path:"/access/teams"},{name:"Companies",path:"/access/companies"},{name:"Positions",path:"/access/positions"}],this.title="Users Management"}ngOnInit(){}};Y.ctorParameters=()=>[],Y.propDecorators={selectedPath:[{type:l.Input}]},Y=Object(i.c)([Object(l.Component)({selector:"access-tabs",template:'<h5 class="mb-3">{{title}}</h5>\n<ul class="nav nav-tabs">\n  <li class="nav-item" *ngFor="let t of tabs">\n  \t<a class="nav-link" [ngClass]="{\'active\':(t?.path==selectedPath)}" routerLink="{{t?.path}}">{{t?.name}}</a>\n  </li>\n</ul>\n',styles:[""]})],Y);let H=class{};H=Object(i.c)([Object(l.NgModule)({declarations:[D,A,j,k,S,R,y,Y,m],imports:[B.CommonModule,L,q.a,$.a,V.h],exports:[A]})],H)},V22Z:function(t,e,s){"use strict";s.d(e,"a",function(){return l});var i=s("mrSG"),r=s("tk/3"),a=s("fXoL");const n=s("AytR").a.apiUrl+"teams",o={headers:new r.f({"Content-Type":"application/json"})};let l=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(n+"?filter="+JSON.stringify(t),o)}getAllByTeamID(t){let e={where:{teamID:{inq:t=Array.isArray(t)?t:[t]}}};return this.http.get(n+"?filter="+JSON.stringify(e),o)}get(t){return this.http.get(`${n}/${t}`)}create(t){return this.http.post(n,t,o)}update(t,e){return this.http.patch(`${n}/${t}`,e,o)}delete(t){return this.http.delete(`${n}/${t}`,o)}deleteAll(){return this.http.delete(n,o)}findByName(t){return this.http.get(`${n}?teamName=${t}`,o)}};l.ctorParameters=()=>[{type:r.b}],l=Object(i.c)([Object(a.Injectable)({providedIn:"root"})],l)},XhZV:function(t,e,s){"use strict";s.d(e,"a",function(){return h});var i=s("mrSG"),r=s("FQmJ"),a=s("feko"),n=s("d+0u"),o=s("/Uzn"),l=s("9+1D"),d=s("fXoL"),c=s("tk/3"),p=s("5eHb"),m=s("tyNb");let h=class{constructor(t,e,s,i,r,a,n){this.route=t,this.uploadService=e,this.companyService=s,this.tokenService=i,this.constants=r,this.functions=a,this.toastr=n,this.moduleCode="",this.parentUrl="/resources/folders",this.knowlegeUrl="/resources/knowledge-center",this.browseUrl="/resources/folders",this.parentID=null,this.objects="Resources",this.title="Upload Resource",this.errorMessage="",this.companies=[],this.companyID="",this.parents=[],this.documents=[],this.uploadService.selectedFiles}ngOnInit(){this.moduleCode=(this.route.snapshot.queryParams.moduleCode||"").trim().toLowerCase(),this.parentID=this.route.snapshot.queryParams.parentID||null,this.parentUrl="kwt"==this.moduleCode?this.knowlegeUrl:this.parentUrl,this.objects="kwt"==this.moduleCode?"Knowledge Center":this.objects,this.uploadService.selectedFiles=[],this.companyID=this.tokenService.getSelectedCompany().companyID||"",this.companyService.getUserCompanies().subscribe(t=>{this.companies=t});let t=this.constants.moduleCodes[this.moduleCode];this.parents=[{name:t.plural}],this.uploadService.getParents(this.parentID).subscribe(t=>{for(let e of t)this.parents.push(e)})}addMetaInfo(t){Object.assign(t,{value:0,error:!1,message:null,data:{moduleCode:this.moduleCode,parentID:this.parentID,resourceName:t.name,resourceSize:t.size,resourceType:"file",mimeType:t.type}})}selectFiles(t){for(let e of t.target.files)this.addMetaInfo(e),this.uploadService.selectedFiles.push(e)}removeFiles(t){t?this.uploadService.selectedFiles.splice(t,1):this.uploadService.selectedFiles=[]}uploadFiles(t,e,s,i){e=e||this.moduleCode,s=s||this.parentID,t=t||this.companyID,i=i||{},this.uploadService.progress.all=0,this.uploadService.progress.completed=0,this.uploadService.progress.failed=0;for(let r=0;r<this.uploadService.selectedFiles.length;r++){let a=this.uploadService.selectedFiles[r],n=a.data&&a.data.extraData?a.data.extraData:{};this.addMetaInfo(a),Object.assign(a.data,{moduleCode:e,parentID:s,companyID:t,extraData:Object.assign(n,i)}),this.upload(r,a)}}upload(t,e){this.uploadService.upload(e).subscribe(e=>{e.type===c.e.UploadProgress?this.uploadService.selectedFiles[t].value=Math.round(100*e.loaded/e.total):c.i,this.uploadService.selectedFiles[t].message="upload success",this.uploadService.progress.all++,this.uploadService.progress.completed++},e=>{this.uploadService.selectedFiles[t].error=!0,this.uploadService.selectedFiles[t].message="upload failure",this.uploadService.selectedFiles[t].value=0,this.uploadService.progress.all++,this.uploadService.progress.failed++})}deleteResource(t){return Object(i.b)(this,void 0,void 0,function*(){let e=yield o.a.alertDelete(n.a.Title.RECORD_OPERATION,n.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.uploadService.delete(t.resourceID).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.documents=this.documents.filter(e=>e.resourceID!==t.resourceID),this.toastr.success(n.a.Messages.DELETE_SUCCESS,n.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=o.a.handleError(e,n.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,n.a.Title.RECORD_OPERATION)}))})}};h.ctorParameters=()=>[{type:m.a},{type:l.a},{type:a.a},{type:r.a},{type:n.a},{type:o.a},{type:p.b}],h=Object(i.c)([Object(d.Component)({selector:"upload",template:'<app-basic-crumb [title]="title" [objects]="objects" [url]="parentUrl"\n\t[params]="{parentID:parentID, moduleCode:moduleCode}">\n</app-basic-crumb>\n<div class="row">\n\t<div class="col-sm-12">\t    \n\t    <app-card cardTitle="{{\'File Uploader\' | uppercase}}" \n\t    \tcardClass="table-card" blockClass="pl-3 pr-3 pb-0 pt-0 mb-0">\n\t    \t<div class="form-row mt-0 mb-0 pl-3">\n\t\t\t\t<div class="form-group col-md-12 form-inline pt-0">\n\t\t\t\t\t<div *ngFor="let p of parents; let i = index;">\n\t\t\t\t\t\t<a *ngIf="i==0" title="{{p.name | TitleCase}}" routerLink="{{browseUrl}}" \n\t\t\t            \t[queryParams]="{moduleCode:moduleCode}">\n\t\t\t            \t{{p.name | TitleCase}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a *ngIf="i>0" title="{{p.name | TitleCase}}" routerLink="{{browseUrl}}" \n\t\t\t            \t[queryParams]="{parentID:p.id,moduleCode:moduleCode}">\n\t\t\t            \t{{p.name | TitleCase}}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<span *ngIf="i<parents.length-1">&nbsp;>>&nbsp;</span>\n\t\t\t\t\t\t<span *ngIf="i==parents.length-1">&nbsp;>>&nbsp;</span>\n\t\t\t\t\t</div>\t\n\t\t\t\t</div>\n\t\t\t</div>\t\n\t    \t<div class="form-group col-sm-12">\n\t            <label>Owner Company*</label>\n\t            <select class="form-control" [(ngModel)]="companyID">\n\t\t\t  \t\t<option value="">No Company Selected</option>\n\t\t\t        <option *ngFor="let c of companies | OrderBy:\'fullName\'" value="{{c.companyID}}">\n\t\t\t        \t{{c.fullName}}\n\t\t\t        </option>\n\t\t\t    </select>\n\t        </div>\t\t\n\t    \t<div class="form-group col-sm-12">\n\t    \t\t<label>Select Module To Upload To</label>\n\t\t\t\t<select [(ngModel)]="moduleCode" class="form-control" [disabled]="moduleCode==\'kwt\'">\n\t\t\t\t    <option *ngFor="let m of functions.indexify(constants.moduleCodes)\n\t\t    \t\t\t| KeyFilter:\'isResourcePack\':true" value="{{m.name}}">\n\t\t\t\t    \t{{m?.plural}}\n\t\t\t\t    </option>\n\t\t\t\t    <option value="kwt" *ngIf="moduleCode==\'kwt\'">KNOWLEDGE CENTER</option>\n\t\t\t\t</select>\n\t\t\t</div>\n\t    \t\n\t    \t<div class="form-group col-sm-12" *ngIf="uploadService.selectedFiles.length==0">\n\t\t\t\t<div class="text-left text-danger" colspan="100%">\n\t\t\t\t\tNo files added to the queue! Click add button below.\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t \n\t\t\t<div class="form-group col-sm-12" template #elseBlock>\n\t\t\t\t<div *ngFor="let f of uploadService.selectedFiles; let i = index;" class="mb-2">\n\t\t\t\t  <span>\n\t\t\t\t  \t<span class="{{ functions.getResourceIcon(f.data.mimeType) }} mr-2 ml-2"></span>\n\t\t\t\t  \t{{ f.data.resourceName }}\n\t\t\t\t  </span>\n\t\t\t\t  <span> &nbsp; | &nbsp; {{ functions.getResourceSize(f.data.resourceSize) }}</span>\n\t\t\t\t  &nbsp;\n\t\t\t\t  <a type="button" (click)="removeFiles(i)">\n\t\t\t\t  \t<span class="fa fa-times text-danger cursor"></span>\n\t\t\t\t  </a>\n\t\t\t\t  <span class="{{f.error? \'text-danger\' : \'text-success\'}}" *ngIf="f.message">\n\t\t\t\t  \t&nbsp; | &nbsp; {{f.message}}\n\t\t\t\t  </span>\n\t\t\t\t  <div class="progress">\n\t\t\t\t    <div class="progress-bar progress-bar-info progress-bar-striped"\n\t\t\t\t      role="progressbar" *ngIf="!(f.value==100)"\n\t\t\t\t      attr.aria-valuenow="{{ f.value }}"\n\t\t\t\t      aria-valuemin="0"\n\t\t\t\t      aria-valuemax="100"\n\t\t\t\t      [ngStyle]="{ width: f.value + \'%\' }">\n\t\t\t\t      {{ f.value }}%\n\t\t\t\t    </div>\n\t\t\t\t  </div>\t\t\t  \n\t\t\t\t</div>\t\n\t\t\t</div>\n\t\t\t\n\t\t\t<div class="form-group">\n\t\t\t\t<a class="btn btn-link" routerLink="{{parentUrl}}"\n\t\t\t\t\t[queryParams]="{parentID:parentID, moduleCode:moduleCode}">Go Back</a>\t\t\n\t\t\t\t<button type="button" class="btn btn-primary" (click)="fileInput.click()">\n\t\t\t\t\t<i class="fa fa-plus"></i> \n\t\t\t\t\tAdd Files\n\t\t\t\t</button>\n\t\t\t\t<input type="file" multiple="true" (change)="selectFiles($event)" \n\t\t\t\t  \tstyle="display: none" #fileInput/>\n\t\t\t\t&nbsp;\n\t\t\t\t<button class="btn btn-primary" *ngIf="uploadService.selectedFiles.length>0" (click)="uploadFiles()">\n\t\t\t\t\t<i class="fa fa-upload"></i>\n\t\t\t\t  \tUpload All\n\t\t\t\t</button>\t\n\t\t\t\t&nbsp;\t\t\n\t\t\t\t<button class="btn btn-danger" *ngIf="uploadService.selectedFiles.length>0" (click)="removeFiles()">\n\t\t\t\t\t<i class="fa fa-upload"></i>\n\t\t\t\t  \tRemove All\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</app-card>\n\t</div>\n</div>',styles:[""]})],h)}}]);