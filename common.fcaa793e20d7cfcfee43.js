(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{PCx1:function(t,e,s){"use strict";s.d(e,"a",function(){return v});var r=s("mrSG"),o=s("d+0u"),i=s("/Uzn");function a(t=0){return e=>{let s=new RegExp("(?:[^`!@#$%^&*-_=+'/.,]*[`!@#$%^&*-_=+'/.,]){"+t+"}");return 0==t||s.test(e.value)?null:{special:!0}}}function n(t=0){return e=>{let s=new RegExp("(?=(?:\\D*\\d){"+t+"})");return 0==t||s.test(e.value)?null:{numeric:!0}}}function l(t=0){return e=>{let s=new RegExp("(?=(?:[^a-z]*[a-z]){"+t+"})");return 0==t||s.test(e.value)?null:{lowercase:!0}}}function c(t=0){return e=>{let s=new RegExp("(?=(?:[^A-Z]*[A-Z]){"+t+"})");return 0==t||s.test(e.value)?null:{uppercase:!0}}}var d=s("tk/3"),u=s("fXoL"),p=s("AytR"),f=s("3Pt+");const h=p.a.apiUrl+"password-policies",m={headers:new d.f({"Content-Type":"application/json"})};let v=class{constructor(t,e,s){this.http=t,this.functions=e,this.constants=s}getAll(t){return t=t||{},this.http.get(h+"?filter="+JSON.stringify(t),m)}get(t){return this.http.get(`${h}/${t}`)}create(t){return this.http.post(h,t,m)}update(t,e){return this.http.patch(`${h}/${t}`,e,m)}delete(t){return this.http.delete(`${h}/${t}`,m)}deleteAll(){return this.http.delete(h,m)}findByDescription(t){return this.http.get(`${h}?description=${t}`,m)}enforcePolicy(t,e,s=!0){this.getAll().subscribe(r=>{let o=this.functions.objectify(r,"policyCode");if(o=Object.assign(e||{},o||{}),o&&Object.keys(o).length>0){let e=o.PASSWORD_MIN_LENGTH.policyValue||0,r=o.PASSWORD_MAX_LENGTH.policyValue||0,i=o.PASSWORD_UPPERCASE_COUNT.policyValue||0,d=o.PASSWORD_LOWERCASE_COUNT.policyValue||0,u=o.PASSWORD_NUMERIC_COUNT.policyValue||0,p=o.PASSWORD_SPECIAL_CHAR_COUNT.policyValue||0;t.clearValidators();let h=s?[f.j.required]:[];t.setValidators(h.concat([,f.j.minLength(e),f.j.maxLength(r),c(i),l(d),n(u),a(p)]))}})}};v.ctorParameters=()=>[{type:d.b},{type:i.a},{type:o.a}],v=Object(r.c)([Object(u.Injectable)({providedIn:"root"})],v)},Sy8X:function(t,e,s){"use strict";s.d(e,"a",function(){return f});var r=s("mrSG"),o=s("PCx1"),i=s("eKYg"),a=s("7Vn+"),n=s("/Uzn"),l=s("d+0u"),c=s("fXoL"),d=s("5eHb"),u=s("tyNb"),p=s("3Pt+");let f=class{constructor(t,e,s,r,o,i,a){this.constants=t,this.functions=e,this.authService=s,this.passwordPolicyService=r,this.toastr=o,this.router=i,this.formBuilder=a,this.title="Change Password",this.objects="Dashboard",this.errorMessage="",this.submitted=!1,this.loading=!1,this.passwordPolicies={}}ngOnInit(){const t={validators:Object(i.a)("password","confirmPassword")};this.form=this.formBuilder.group({oldPassword:["",p.j.required],password:["",[p.j.minLength(8),p.j.required]],confirmPassword:["",p.j.required]},t),this.passwordPolicyService.enforcePolicy(this.form.get("password"),this.passwordPolicies)}onSubmit(){this.submitted=!0,this.form.invalid?n.a.alertError(l.a.Title.FORM_VALIDATION,l.a.Messages.FORM_ERROR_FOUND):(this.loading=!0,this.authService.changeLoggedInPassword(this.form.value,this.form.value.channel).subscribe(t=>{this.toastr.success(l.a.Messages.PASSWORD_CHANGE_SUCCESS,l.a.Title.PASSWORD_RESET),this.router.navigate([this.authService.lockPath])},t=>{this.errorMessage=n.a.handleError(t,l.a.Messages.PASSWORD_RESET_FAILURE),this.toastr.error(this.errorMessage,l.a.Title.PASSWORD_RESET)}).add(()=>{this.loading=!1}))}get f(){return this.form.controls}};f.ctorParameters=()=>[{type:l.a},{type:n.a},{type:a.a},{type:o.a},{type:d.b},{type:u.f},{type:p.b}],f=Object(r.c)([Object(c.Component)({selector:"change-password",template:'<app-basic-crumb [title]="title" [objects]="objects" url="/{{authService.homePath}}"></app-basic-crumb>\n<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" blockClass="table-border-style">\n\t\t\t<form [formGroup]="form" (ngSubmit)="onSubmit()" autocomplete="off">\n\t\t\t\t\n\t\t\t    <div class="form-row">\n\t\t\t        <div class="form-group col-md-12">\n\t\t\t            <label>Old Password</label>\n\t\t\t            <input type="password" formControlName="oldPassword" class="form-control" \n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.oldPassword.errors }" autocomplete="off"/>\n\t\t\t            <div *ngIf="submitted && f.oldPassword.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.oldPassword.errors.required">Old password is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-md-12">\n\t\t\t            <label>Password</label>\n\t\t\t            <input type="password" formControlName="password" class="form-control" \n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.password.errors }" autocomplete="off"/>\n\t\t\t            <div *ngIf="submitted && f.password.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.password.errors.required">Password is required</div>\n\t\t\t                <div *ngIf="f.password.errors.minlength">Password must be at least {{passwordPolicies?.PASSWORD_MIN_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.maxlength">Password must not exceed {{passwordPolicies?.PASSWORD_MAX_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.uppercase">Password must contain {{passwordPolicies?.PASSWORD_UPPERCASE_COUNT?.policyValue || 0}} uppercase letter(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.lowercase">Password must contain {{passwordPolicies?.PASSWORD_LOWERCASE_COUNT?.policyValue || 0}} lowercase letter(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.numeric">Password must contain {{passwordPolicies?.PASSWORD_NUMERIC_COUNT?.policyValue || 0}} numeric character(s)</div>\n\t\t\t                <div *ngIf="f.password.errors.special">Password must contain {{passwordPolicies?.PASSWORD_SPECIAL_CHAR_COUNT?.policyValue || 0}} special characters</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t        <div class="form-group col-md-12">\n\t\t\t            <label>Confirm Password</label>\n\t\t\t            <input type="password" formControlName="confirmPassword" class="form-control" \n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.confirmPassword.errors }" autocomplete="off"/>\n\t\t\t            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.confirmPassword.errors.required">Confirm Password is required</div>\n\t\t\t                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>\n\t\t\t            </div>\n\t\t\t        </div>\n\t\t\t    </div>\n\t\t\t    <div class="form-row">\n\t\t\t\t    <div class="form-group col-md-12">\n\t\t\t\t        <button [disabled]="loading" class="btn btn-primary">\n\t\t\t\t            <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t\t\t\t            Save\n\t\t\t\t        </button>\n\t\t\t\t        <a routerLink="/{{authService.homePath}}" class="btn btn-link">Cancel</a>\n\t\t\t\t    </div>\n\t\t\t    </div>\n\t\t\t</form>\n\t\t</app-card>\n\t</div>\n</div>',styles:[""]})],f)},eKYg:function(t,e,s){"use strict";function r(t,e){return s=>{const r=s,o=r.controls[t],i=r.controls[e];return i.errors&&!i.errors.mustMatch||(o.value&&""!=o.value.trim()&&o.value!==i.value?i.setErrors({mustMatch:!0}):i.setErrors(null)),null}}s.d(e,"a",function(){return r})},u0kB:function(t,e,s){"use strict";s.d(e,"a",function(){return u});var r=s("mrSG"),o=s("FQmJ"),i=s("tk/3"),a=s("fXoL"),n=s("AytR"),l=s("jhN1");const c=n.a.apiUrl+"reports",d={headers:new i.f({"Content-Type":"application/json"})};let u=class{constructor(t,e,s){this.http=t,this.sanitizer=e,this.tokenService=s,this.downloadUrl=c}getConflictInterestURL(t){let e=this.downloadUrl+"/conflict-of-interest/"+t+"?"+this.tokenService.getClientCodeQuery();return this.sanitizer.bypassSecurityTrustResourceUrl(e)}getActiveUsersURL(){let t=this.downloadUrl+"/users?"+this.tokenService.getClientCodeQuery();return this.sanitizer.bypassSecurityTrustResourceUrl(t)}getEvaluationReport(t,e){return this.http.post(c+"/evaluation-report/"+t,{evaluateeID:e},d)}getEvaluationGraph(t,e){return this.http.post(c+"/evaluation-graph/"+t,{evaluateeID:e},d)}getResults(t){return this.http.get(`${c}/election-results/${t}`)}};u.ctorParameters=()=>[{type:i.b},{type:l.DomSanitizer},{type:o.a}],u=Object(r.c)([Object(a.Injectable)({providedIn:"root"})],u)}}]);