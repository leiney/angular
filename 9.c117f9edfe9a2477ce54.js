(window.webpackJsonp=window.webpackJsonp||[]).push([[9,14],{HRAb:function(t,e,s){"use strict";s.r(e),s.d(e,"ElectionsModule",function(){return W});var r=s("mrSG"),i=s("1kSV"),n=s("ebz3"),o=s("fXoL"),a=s("ofXK"),l=s("tk/3"),c=s("AytR");const d=c.a.apiUrl+"election-types",p={headers:new l.f({"Content-Type":"application/json"})};let h=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(d+"?filter="+JSON.stringify(t),p)}get(t){return this.http.get(`${d}/${t}`)}create(t){return this.http.post(d,t,p)}update(t,e){return this.http.patch(`${d}/${t}`,e,p)}delete(t){return this.http.delete(`${d}/${t}`,p)}deleteAll(){return this.http.delete(d,p)}findByType(t){return this.http.get(`${d}?electionTypeTitle=${t}`,p)}};h.ctorParameters=()=>[{type:l.b}],h=Object(r.c)([Object(o.Injectable)({providedIn:"root"})],h);var m=s("/Uzn"),u=s("d+0u"),g=s("3Pt+"),v=s("tyNb"),b=s("5eHb"),f=s("SxV6");let y=class{constructor(t,e,s,r,i,n){this.formBuilder=t,this.route=e,this.router=s,this.dataService=r,this.toastr=i,this.constants=n,this.pk="electionTypeID",this.object="Election Type",this.parentUrl="/elections/types",this.editUrl="/elections/edit-type/",this.loading=!1,this.errorMessage="",this.submitted=!1,this.rows=[],this.filter={term:null}}loadRecords(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)})}initForm(){this.form=this.formBuilder.group({electionTypeName:["",g.j.required],enabled:["Y",g.j.required],position:[0]})}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.initForm(),this.route.params.subscribe(t=>{this.id=t.id,this.isAddMode||this.dataService.get(this.id).pipe(Object(f.a)()).subscribe(t=>{this.form.patchValue(t),this.toastr.success(u.a.Messages.RECORD_LOADED,u.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:u.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])})}),this.loadRecords()}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(u.a.Messages.FORM_ERROR_FOUND,u.a.Title.FORM_VALIDATION):(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())}createRecord(){this.dataService.create(this.form.value).pipe(Object(f.a)()).subscribe(()=>{this.toastr.success(u.a.Messages.SAVE_SUCCESS,u.a.Title.RECORD_OPERATION),this.initForm(),this.loadRecords(),this.electionTypeName.clear(),this.electionTypeName.focus()},t=>{this.errorMessage=t.message?t.message:u.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}updateRecord(){this.dataService.update(this.id,this.form.value).pipe(Object(f.a)()).subscribe(()=>{this.toastr.success(u.a.Messages.UPDATE_SUCCESS,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:u.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}deleteRow(t){return Object(r.b)(this,void 0,void 0,function*(){let e=yield m.a.alertDelete(u.a.Title.RECORD_OPERATION,u.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(u.a.Messages.DELETE_SUCCESS,u.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=m.a.handleError(e,u.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}))})}get f(){return this.form.controls}};y.ctorParameters=()=>[{type:g.b},{type:v.a},{type:v.f},{type:h},{type:b.b},{type:u.a}],y.propDecorators={electionTypeName:[{type:o.ViewChild,args:["electionTypeName"]}]},y=Object(r.c)([Object(o.Component)({selector:"app-election-types",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t      <form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t        <div class="form-row">\n\t          <div class="form-group col-md-9 col-sm-12">\n\t            <input type="text" formControlName="electionTypeName" class="form-control" #electionTypeName\n\t                [ngClass]="{ \'is-invalid\': submitted && f.electionTypeName.errors }" placeholder="Enter new election type to save"/>\n\t            <div *ngIf="submitted && f.electionTypeName.errors" class="invalid-feedback">\n\t              <div *ngIf="f.electionTypeName.errors.required">Election type is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12 text-right">\n\t            <div class="text-right">\n\t              <a routerLink="{{parentUrl}}" class="btn btn-danger">Cancel</a>\n\t              &nbsp;\n\t              <button [disabled]="loading" class="btn btn-primary">\n\t                <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t                {{isAddMode? \'Add\' : \'Save\'}} Type\n\t              </button>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </form>\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t            <th>#</th>\n\t\t\t            <th>Election Type</th>\n\t\t\t            <th class="text-center">Active</th>\n\t\t\t            <th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'electionTypeName\'];let i=index;">\n\t\t\t            <td>{{ (i+1) }}</td>\n\t\t\t            <td>{{ row.electionTypeName }}</td>\n\t\t\t            <td class="text-center">{{ row.enabled }}</td>\t\t            \n\t\t\t           \t<td class="text-right">\n\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\tArchive\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t          </tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],y);var O=s("gG2O"),N=s("MxsQ");let T=class extends N.a{constructor(t,e){super(t,e)}ngOnInit(){}};T.ctorParameters=()=>[{type:N.c},{type:v.a}],T=Object(r.c)([Object(o.Component)({selector:"create-election",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card cardTitle="{{\'Create Election\' | uppercase}}" cardClass="table-card" blockClass="pl-3 pr-3 pb-3 pt-0">\n\t\t\t<ng-wizard></ng-wizard>\n\t\t</app-card>\n\t</div>\n</div>',styles:[""]})],T);var I=s("FQmJ"),E=s("feko");const R=c.a.apiUrl+"elections",D={headers:new l.f({"Content-Type":"application/json"})};let S=class{constructor(t){this.http=t,this.formValues={}}getAll(t){return t=t||{},this.http.get(R+"?filter="+JSON.stringify(t),D)}get(t){return this.http.get(`${R}/${t}`)}create(t){return this.http.post(R,t,D)}update(t,e){return this.http.patch(`${R}/${t}`,e,D)}delete(t){return this.http.delete(`${R}/${t}`,D)}deleteAll(){return this.http.delete(R,D)}findByTitle(t){return this.http.get(`${R}?MeetingTitle=${t}`,D)}setFormValues(t){Object.assign(this.formValues,t)}};S.ctorParameters=()=>[{type:l.b}],S=Object(r.c)([Object(o.Injectable)({providedIn:"root"})],S);let w=class{constructor(t,e,s,r,i,n,o,a,l){this.dataService=t,this.electionTypeService=e,this.companyService=s,this.tokenService=r,this.constants=i,this.formBuilder=n,this.router=o,this.toastr=a,this.route=l,this.pk="electionID",this.object="Election",this.parentUrl="/elections",this.loading=!1,this.errorMessage="",this.electionTypes=[],this.companies=[]}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;new Date(Date.now());this.electionTypeService.getAll().subscribe(t=>{this.electionTypes=t}),this.form=this.formBuilder.group({electionTypeID:["",g.j.required],companyID:[this.tokenService.getSelectedCompany().companyID||""],electionName:["",g.j.required],electionDate:["",g.j.required],electionLocation:["",g.j.required],startTime:["",g.j.required],endTime:["",g.j.required],description:[""],sendSms:["N"],sendEmail:["Y"],electionStatus:["pending"]}),this.isAddMode?this.form.patchValue(this.dataService.formValues):this.dataService.get(this.id).pipe(Object(f.a)()).subscribe(t=>{this.dataService.setFormValues(t),this.form.patchValue(t),this.form.patchValue({electionDate:t.electionDate?new Date(t.electionDate):null}),this.toastr.success(u.a.Messages.RECORD_LOADED,u.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])}),this.companyService.getUserCompanies().subscribe(t=>{this.companies=t})}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(u.a.Messages.FORM_ERROR_FOUND,u.a.Title.FORM_VALIDATION),!1):(this.dataService.setFormValues(this.form.value),this.form.valid)}wsOnNext(){return!0}wsOnPrevious(){return!0}get f(){return this.form.controls}};w.ctorParameters=()=>[{type:S},{type:h},{type:E.a},{type:I.a},{type:u.a},{type:g.b},{type:v.f},{type:b.b},{type:v.a}],w=Object(r.c)([Object(o.Component)({selector:"app-election-info",template:'<div class="row">\r\n  <div class="col-sm-12">\r\n    \t<form [formGroup]="form">\r\n    \t\t<div class="form-row">    \t\t\t  \r\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\r\n\t            \t<label for="electionDate">Election Date:</label>\r\n\t            \t<input type="text" class="form-control" formControlName="electionDate" placeholder="dd-mmm-yyyy"\r\n\t            \t\t[ngClass]="{ \'is-invalid\': submitted && f.electionDate.errors }"\r\n\t            \t\t#datepickerYMD="bsDatepicker" bsDatepicker placement="bottom" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\' }">\r\n\t            \t<div *ngIf="submitted && f.electionDate.errors" class="invalid-feedback">\r\n\t\t\t        \t<div *ngIf="f.electionDate.errors.required">Election date is required</div>\r\n\t\t\t      \t</div>\r\n\t          \t</div>\t          \t\r\n\t          \t<div class="form-group col-md-4 col-sm-12">\r\n\t\t            <label for="startTime">Start Time:</label>\r\n\t\t            <ng-autocomplete \r\n\t\t\t\t\t  [data]="constants.times"\r\n\t\t\t\t\t  placeholder="HH:MM"\r\n\t\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.startTime.errors }"\r\n\t\t\t\t\t  [itemTemplate]="itemTemplate"\r\n\t\t\t\t\t  formControlName = \'startTime\'>                                 \r\n\t\t\t\t\t</ng-autocomplete>\t\r\n\t\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\r\n\t\t            <div *ngIf="submitted && f.startTime.errors" class="invalid-feedback">\r\n\t\t\t\t        <div *ngIf="f.startTime.errors.required">Start time is required</div>\r\n\t\t\t\t    </div>\r\n\t          \t</div>\r\n\t          \t<div class="form-group col-md-4 col-sm-12">\r\n\t\t            <label for="endTime">End Time:</label>\r\n\t\t            <ng-autocomplete \r\n\t\t\t\t\t  [data]="constants.times"\r\n\t\t\t\t\t  placeholder="HH:MM"\r\n\t\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.endTime.errors }"\r\n\t\t\t\t\t  [itemTemplate]="itemTemplate"\r\n\t\t\t\t\t  formControlName = \'endTime\'>                                 \r\n\t\t\t\t\t</ng-autocomplete>\t\r\n\t\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\r\n\t\t            <div *ngIf="submitted && f.endTime.errors" class="invalid-feedback">\r\n\t\t\t        \t<div *ngIf="f.endTime.errors.required">End time is required</div>\r\n\t\t\t      \t</div>\r\n\t          \t</div>\r\n\t        </div>\r\n\t        <div class="form-row">\r\n\t        \t<div class="form-group col-md-4 col-sm-12">\r\n\t\t            <label>Choose Election Type*</label>\r\n\t\t            <select formControlName="electionTypeID" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.electionTypeID.errors }">\r\n\t\t                <option value="{{a.electionTypeID}}" *ngFor="let a of electionTypes">{{a.electionTypeName}}</option>\r\n\t\t            </select>\r\n\t\t            <div *ngIf="submitted && f.electionTypeID.errors" class="invalid-feedback">\r\n\t\t                <div *ngIf="f.electionTypeID.errors.required">Election type is required</div>\r\n\t\t            </div>\r\n\t\t        </div>\r\n\t\t        <div class="form-group col-md-8 col-sm-12">\r\n\t\t          <label for="electionName">Election Name:</label>\r\n\t\t          <input type="text" class="form-control" formControlName="electionName" placeholder="e.g. Election of Board Chairman 2020"\r\n\t\t          \t [ngClass]="{ \'is-invalid\': submitted && f.electionName.errors }">\r\n\t\t          <div *ngIf="submitted && f.electionName.errors" class="invalid-feedback">\r\n\t\t\t        <div *ngIf="f.electionName.errors.required">Election name is required</div>\r\n\t\t\t      </div>\r\n\t\t        </div>\t      \r\n\t        </div>\t        \r\n\t        <div class="form-row">\r\n\t\t        <div class="form-group col-md-8 col-sm-12">\r\n\t\t          <label for="electionName">Venue/Location:</label>\r\n\t\t          <input type="text" class="form-control" formControlName="electionLocation" placeholder="Apartment, studio, or floor"\r\n\t\t          \t [ngClass]="{ \'is-invalid\': submitted && f.electionLocation.errors }">\r\n\t\t          <div *ngIf="submitted && f.electionLocation.errors" class="invalid-feedback">\r\n\t\t\t        <div *ngIf="f.electionLocation.errors.required">Election venue is required</div>\r\n\t\t\t      </div>\r\n\t\t        </div>\t     \r\n\t\t        <div class="form-group col-md-4 col-sm-12">\r\n\t\t            <label>Owner Company*</label>\r\n\t\t            <select class="form-control" formControlName="companyID" \r\n\t\t\t            [ngClass]="{ \'is-invalid\': submitted && f.companyID.errors }">\r\n\t\t\t\t  \t\t<option value="">No Company Selected</option>\r\n\t\t\t\t        <option *ngFor="let c of companies | OrderBy:\'fullName\'" value="{{c.companyID}}">\r\n\t\t\t\t        \t{{c.fullName}}\r\n\t\t\t\t        </option>\r\n\t\t\t\t    </select>\r\n\t\t            <div *ngIf="submitted && f.companyID.errors" class="invalid-feedback">\r\n\t\t                <div *ngIf="f.companyID.errors.required">Owner company is required</div>\r\n\t\t            </div>\r\n\t\t        </div>\t \r\n\t        </div>\t\t    \r\n\t        <div class="form-row">\r\n\t        \t<div class="form-group col-sm-12">\r\n\t\t          <div class="checkbox checkbox-primary d-inline">\r\n\t\t              <input type="checkbox" name="sendEmail" id="sendEmail" \r\n\t\t                trueFalseValue trueValue="Y" falseValue="N" formControlName="sendEmail">\r\n\t\t              <label for="sendEmail" class="cr">\r\n\t\t              \t\tNotify Voters Via \r\n\t\t              \t\t<span class="font-weight-bold">Email</span>&nbsp;<span class="feather icon-mail"></span>\r\n\t\t              </label>\r\n\t\t          </div>\r\n\t\t        </div>\r\n\t\t    </div>\t\t    \r\n\t        <div class="form-row">\r\n\t        \t<div class="form-group col-sm-12">\r\n\t\t          <div class="checkbox checkbox-primary d-inline">\r\n\t\t              <input type="checkbox" name="sendSms" id="sendSms" \r\n\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" formControlName="sendSms">\r\n\t\t              <label for="sendSms" class="cr">\r\n\t\t              \t\tNotify Voters Via \r\n\t\t              \t\t<span class="font-weight-bold">SMS</span>&nbsp;<span class="feather icon-message-square">\r\n\t\t              \t\t</span>\r\n\t\t              </label>\r\n\t\t          </div>\r\n\t\t        </div>\r\n\t\t    </div>\r\n      </form>\r\n  </div>\r\n</div>\r\n',styles:[""]})],w);var A=s("evKo"),C=s("VITL"),M=s("LvDl"),k=s.n(M);let j=class{constructor(t,e,s,r,i,n,o){this.userService=t,this.dataService=e,this.formBuilder=s,this.toastr=r,this.route=i,this.router=n,this.orderBy=o,this.pk="electionID",this.object="Election",this.parentUrl="/elections",this.loading=!1,this.errorMessage="",this.autocompleteArray=[],this.autocompleteField="name",this.autocompleteModel=null}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"elections/create":"elections/edit/"+this.id;!this.isAddMode||this.dataService.formValues?(this.form=this.formBuilder.group({contestants:this.formBuilder.array([])}),this.dataService.formValues.contestants?this.populateMany():this.addRow(),this.userService.getAll().subscribe(t=>{for(let e of t){let t=e.fullName+" - "+e.phoneNo;this.autocompleteArray.push(Object.assign(e,{id:e.id,name:t}))}})):this.router.navigate([t])}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(u.a.Messages.FORM_ERROR_FOUND,u.a.Title.FORM_VALIDATION),!1):(this.dataService.setFormValues(this.form.value),this.form.valid)}wsOnNext(){return!0}wsOnPrevious(){return!0}onUserChange(t,e){let s=this.dataService.formValues.contestants||[],r={teamID:t.teamID,id:t.id,fullName:t.fullName,phoneNo:t.phoneNo,positionNumber:e,email:t.email};0==s.filter(t=>t.id===r.id).length&&s.push(r),this.dataService.formValues.contestants=k.a.uniqBy(s,"id"),this.populateMany(),this.autocomplete.clear(),this.autocomplete.focus()}populateMany(){let t=this.form.get("contestants").length,e=this.dataService.formValues.contestants.length,s=e>t?e-t:0,r=t>e?t-e:0;for(let n=0;n<s;n++)this.addRow();for(let n=0;n<r;n++)this.deleteRow(n);let i=this.orderBy.transform(this.dataService.formValues.contestants,["fullName"]);this.form.patchValue({contestants:i})}addRow(){this.form.get("contestants").push(this.formBuilder.group({id:[""],teamID:[""],fullName:["",g.j.required],phoneNo:[""],email:[""],positionNumber:[""],complete:["N"],isEditable:[!0]}))}deleteRow(t,e){const s=this.form.get("contestants");if(e){let t=this.dataService.formValues.contestants;this.dataService.formValues.contestants=t.filter(t=>t.id!=e)}s.removeAt(t)}get c(){return this.form.get("contestants")}};j.ctorParameters=()=>[{type:C.a},{type:S},{type:g.b},{type:b.b},{type:v.a},{type:v.f},{type:A.a}],j.propDecorators={autocomplete:[{type:o.ViewChild,args:["autocomplete"]}]},j=Object(r.c)([Object(o.Component)({selector:"app-election-contestants",template:'<form [formGroup]="form">\t\r\n\t<div class="row">\t\r\n\t\t<div class="col-md-12 col-sm-12">\r\n\t\t\t<ngb-tabset>\r\n\t\t\t\t<ngb-tab title="{{p.positionName}}" *ngFor="let p of dataService?.formValues?.positions">\r\n\t\t\t\t\t<ng-template ngbTabContent>\r\n\t\t\t\t\t\t<div class="form-row">\r\n\t\t\t\t\t\t\t<div class="form-group col-md-12 mt-3">\r\n\t\t\t\t\t\t\t\t\t<ng-autocomplete \r\n\t\t\t\t\t\t\t\t\t  #autocomplete\r\n\t\t\t\t\t\t\t\t\t  [data]="autocompleteArray"\r\n\t\t\t\t\t\t\t\t\t  placeholder="Search contestants to add to list below"\r\n\t\t\t\t\t\t\t\t\t  [searchKeyword]="autocompleteField"\r\n\t\t\t\t\t\t\t\t\t  (selected)=\'onUserChange($event,p.positionNumber)\'\r\n\t\t\t\t\t\t\t\t\t  [ngModel] = \'autocompleteModel\'\r\n\t\t\t\t\t\t\t\t\t  [ngModelOptions]=\'{standalone: true}\'\r\n\t\t\t\t\t\t\t\t\t  [itemTemplate]="itemTemplate"\r\n\t\t\t\t\t\t\t\t\t  [notFoundTemplate]="notFoundTemplate">                                 \r\n\t\t\t\t\t\t\t\t\t</ng-autocomplete>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<ng-template #itemTemplate let-item>\r\n\t\t\t\t\t\t\t\t\t<a [innerHTML]="item.name"></a>\r\n\t\t\t\t\t\t\t\t\t</ng-template>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<ng-template #notFoundTemplate let-notFound>\r\n\t\t\t\t\t\t\t\t\t<div [innerHTML]="notFound"></div>\r\n\t\t\t\t\t\t\t\t\t</ng-template>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div class="table-responsive">\t\t\r\n\t\t\t\t\t        <table class="table table-borderless table-sm nopadding">\t\t\r\n\t\t\t\t\t\t\t\t<tr>\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<th>Added contestants</th>\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<th class="text-right">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t                \r\n\t\t\t\t\t\t\t\t\t</th>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t<ng-container formArrayName="contestants" *ngFor="let group of c.controls; let i=index">\r\n\t\t\t\t\t\t\t\t\t<tr [formGroupName]="i" *ngIf="group.controls?.positionNumber.value==p?.positionNumber">\t\t\t\t\t            \r\n\t\t\t\t\t\t\t            <td>\r\n\t\t\t\t\t\t\t            \t<div class="form-row">\r\n\t\t\t\t\t\t\t            \t\t<div class="form-group col-md-6">\t\t\t\t            \t\t\t\r\n\t\t\t\t\t\t\t\t\t                <input class="form-control font-weight-bold" type="text" formControlName="fullName"\r\n\t\t\t\t\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.fullName.errors }"\r\n\t\t\t\t\t\t\t\t\t                \t [readonly]="(group.controls.id.value!=\'\')">\r\n\t\t\t\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.fullName.errors" class="invalid-feedback">\r\n\t\t\t\t\t\t\t\t\t\t                <div *ngIf="group.controls.fullName.errors.required">Full name is required</div>\r\n\t\t\t\t\t\t\t\t\t\t            </div>  \r\n\t\t\t\t\t\t\t            \t\t</div>\r\n\t\t\t\t\t\t\t            \t\t<div class="form-group col-md-6">\t\t\t\t            \t\t\t\r\n\t\t\t\t\t\t\t\t\t\t            <input type="text" formControlName="email" class="form-control" \r\n\t\t\t\t\t\t\t            \t\t\t\t[ngClass]="{ \'is-invalid\': submitted && group.controls.email.errors }"\r\n\t\t\t\t\t\t\t            \t\t\t\t [readonly]="(group.controls.id.value!=\'\')"/>\r\n\t\t\t\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.email.errors" class="invalid-feedback">\r\n\t\t\t\t\t\t\t\t\t\t                <div *ngIf="group.controls.email.errors.required">Email is required</div>\r\n\t\t\t\t\t\t\t\t\t\t            </div>\r\n\t\t\t\t\t\t\t            \t\t</div>\r\n\t\t\t\t\t\t\t            \t</div>       \r\n\t\t\t\t\t\t\t            </td>\t\t\t\t\t\t            \t\r\n\t\t\t\t\t\t\t            <td class="text-right pt-4">\r\n\t\t\t\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRow(i,group.controls.id.value)">\r\n\t\t\t\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\r\n\t\t\t\t\t\t\t                \tDelete\r\n\t\t\t\t\t\t\t                </a>\r\n\t\t\t\t\t\t\t            </td>\r\n\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</ng-template>\r\n\t\t\t\t</ngb-tab>\r\n\t\t\t</ngb-tabset>\r\n\t\t</div>\r\n\t</div>\r\n</form>',styles:[""]})],j);let V=class{constructor(t,e,s,r,i){this.dataService=t,this.formBuilder=e,this.toastr=s,this.route=r,this.router=i,this.pk="electionID",this.object="Election",this.parentUrl="/elections",this.loading=!1,this.errorMessage=""}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"elections/create":"elections/edit/"+this.id;if(!this.isAddMode||this.dataService.formValues)if(this.form=this.formBuilder.group({positions:this.formBuilder.array([])}),this.dataService.formValues.positions){for(let t=0;t<this.dataService.formValues.positions.length;t++)this.addRow();this.form.patchValue({positions:this.dataService.formValues.positions})}else this.addRow();else this.router.navigate([t])}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(u.a.Messages.FORM_ERROR_FOUND,u.a.Title.FORM_VALIDATION),!1):(this.dataService.setFormValues(this.form.value),this.form.valid)}wsOnNext(){return!0}wsOnPrevious(){return!0}addRow(){const t=this.form.get("positions");t.push(this.formBuilder.group({positionNumber:[t.length+1,g.j.required],positionName:["",g.j.required],description:["",g.j.required],isEditable:[!0]}))}deleteRow(t){this.form.get("positions").removeAt(t)}get c(){return this.form.get("positions")}};V.ctorParameters=()=>[{type:S},{type:g.b},{type:b.b},{type:v.a},{type:v.f}],V=Object(r.c)([Object(o.Component)({selector:"app-election-positions",template:'<form [formGroup]="form">\n\t<div class="table-responsive">\n        <table class="table table-borderless table-sm nopadding">\n\t\t\t<tr>\t\t\t\t\n\t\t\t\t<th width="130">Sno.</th>\n\t\t\t\t<th>Elective Position</th>\n\t\t\t\t<th>Description</th>\t\t\t\t\t\n\t\t\t\t<th class="text-right">\n\t                <a href="javascript:" (click)="addRow();">\n\t                \t<i class="feather icon-plus f-16 ml-3 text-c-green"></i>\n\t                </a>\n\t\t\t\t</th>\n\t\t\t</tr>\n\t\t\t<ng-container formArrayName="positions" *ngFor="let group of c.controls ; let i=index">\n\t\t\t\t<tr [formGroupName]="i">\n\t\t\t\t\t<td>\n\t\t                <input class="form-control" type="number" formControlName="positionNumber" onlyNumber="true"\n\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.positionNumber.errors }">\n\t\t\t            <div *ngIf="submitted && group.controls.positionNumber.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="group.controls.positionNumber.errors.required">Position number is required</div>\n\t\t\t            </div>         \n\t\t            </td>\t\t\t\t\t\t            \n\t\t            <td>\n\t\t                <input class="form-control" type="text" formControlName="positionName"\n\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.positionName.errors }">\n\t\t\t            <div *ngIf="submitted && group.controls.positionName.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="group.controls.positionName.errors.required">Position name is required</div>\n\t\t\t            </div>         \n\t\t            </td>\n\t\t            <td>\n\t\t                <input class="form-control" type="text" formControlName="description"  \n\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.description.errors }">\n\t\t\t            <div *ngIf="submitted && group.controls.description.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="group.controls.description.errors.required">Description is required</div>\n\t\t\t            </div>         \n\t\t            </td>\t\t\t            \t\n\t\t            <td class="text-right pt-4">\n\t\t         \t\t<a href="javascript:" (click)="deleteRow(i)">\n\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t                </a>\n\t\t            </td>\n\t\t\t\t</tr>\n\t\t\t</ng-container>\n\t\t</table>\n\t</div>\n</form>',styles:[""]})],V);var x=s("V22Z");let U=class{constructor(t,e,s,r,i,n,o,a){this.teamService=t,this.userService=e,this.dataService=s,this.formBuilder=r,this.toastr=i,this.route=n,this.router=o,this.orderBy=a,this.pk="electionID",this.object="Election",this.parentUrl="/elections",this.loading=!1,this.errorMessage="",this.teams={rows:[],selected:[]}}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"elections/create":"elections/edit/"+this.id;!this.isAddMode||this.dataService.formValues?(this.form=this.formBuilder.group({voters:this.formBuilder.array([])}),this.dataService.formValues.voters?this.populateMany():(this.addRow(),this.addRow()),this.teams.selected=this.dataService.formValues.voterTeams||[],this.teamService.getAll().subscribe(t=>{this.teams.rows=t})):this.router.navigate([t])}wsIsValid(){return!0}wsOnNext(){return!0}wsOnPrevious(){return!0}onSubmit(t){return Object(r.b)(this,void 0,void 0,function*(){if(this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid)return this.toastr.error(u.a.Messages.FORM_ERROR_FOUND,u.a.Title.FORM_VALIDATION),!1;let e=t?"ongoing":"pending",s=Object.assign(this.form.value,{voterTeams:this.teams.selected,electionStatus:e});this.dataService.setFormValues(s);let r=yield m.a.alertDelete(u.a.Title.RECORD_OPERATION,u.a.Messages.CONFIRM_SUBMIT);(null==r?void 0:r.value)&&(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())})}createRecord(){this.dataService.create(this.dataService.formValues).pipe(Object(f.a)()).subscribe(()=>{this.dataService.formValues={},this.toastr.success(u.a.Messages.SAVE_SUCCESS,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}updateRecord(){this.dataService.update(this.id,this.dataService.formValues).pipe(Object(f.a)()).subscribe(()=>{this.dataService.formValues={},this.toastr.success(u.a.Messages.UPDATE_SUCCESS,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.SAVE_FAILURE),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}onTeamsChange(t,e){if(e.target.checked)this.teams.selected.push(t.teamID),this.userService.getAllByUserID(t.members).subscribe(e=>{let s=this.dataService.formValues.voters||[];for(let r of e){let e={teamID:t.teamID,id:r.id,fullName:r.fullName,phoneNo:r.phoneNo,email:r.email};0==s.filter(t=>t.id===e.id).length&&s.push(e)}this.dataService.formValues.voters=k.a.uniqBy(s,"id"),this.populateMany()});else{let e=this.teams.selected.indexOf(t.teamID);this.teams.selected.splice(e,1);let s=this.dataService.formValues.voters||[];this.dataService.formValues.voters=s.filter(e=>e.teamID!==t.teamID),this.populateMany()}this.dataService.setFormValues({voterTeams:this.teams.selected})}populateMany(){let t=this.form.get("voters").length,e=this.dataService.formValues.voters.length,s=e>t?e-t:0,r=t>e?t-e:0;for(let n=0;n<s;n++)this.addRow();for(let n=0;n<r;n++)this.deleteRow(n);let i=this.orderBy.transform(this.dataService.formValues.voters,["fullName"]);this.form.patchValue({voters:i})}addRow(){this.form.get("voters").push(this.formBuilder.group({id:[""],teamID:[""],fullName:["",g.j.required],phoneNo:[""],email:[""],complete:["N"],isEditable:[!0]}))}deleteRow(t){this.form.get("voters").removeAt(t)}get c(){return this.form.get("voters")}};U.ctorParameters=()=>[{type:x.a},{type:C.a},{type:S},{type:g.b},{type:b.b},{type:v.a},{type:v.f},{type:A.a}],U=Object(r.c)([Object(o.Component)({selector:"app-election-voters",template:'<form [formGroup]="form">\t\n\t<div class="row">\t\t\n\t\t<div class="col-md-4 col-sm-12">\n\t\t\t<h6 class="mb-3 text-normal text-italic">Click on the teams below to add voters to the right</h6>\n\t\t \t<div class="form-row">\n\t\t\t    <div class="form-group col-sm-12 p-0" *ngFor="let row of teams.rows | OrderBy:\'teamName\';">\n\t\t\t       <div class="checkbox checkbox-primary d-inline">\n\t\t\t           <input type="checkbox" name="{{row.teamName}}" id="{{row.teamID}}" \n\t\t\t           \t(change)="onTeamsChange(row,$event)" [checked]="teams.selected.indexOf(row.teamID)>-1">\n\t\t\t           <label for="{{row.teamID}}" class="cr">{{row.teamName + \' (\' + row.members.length + \')\'}}</label>\n\t\t\t       </div>\n\t\t\t    </div>\n\t\t    </div>\n\t\t</div>\n\t\t<div class="col-md-8 col-sm-12">\n\t\t\t<div class="table-responsive">\t\t\n\t\t        <table class="table table-borderless table-sm nopadding">\t\t\n\t\t\t\t\t<tr>\t\t\t\t\n\t\t\t\t\t\t<th>Added ({{ c.controls.length }}) voters</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th class="text-right">\n\t\t\t                Actions\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<ng-container formArrayName="voters" *ngFor="let group of c.controls; let i=index">\n\t\t\t\t\t\t<tr [formGroupName]="i">\t\t\t\t\t            \n\t\t\t\t            <td>\n\t\t\t\t            \t<div class="form-row">\n\t\t\t\t            \t\t<div class="form-group col-md-6">\t\t\t\t            \t\t\t\n\t\t\t\t\t\t                <input class="form-control font-weight-bold" type="text" formControlName="fullName"\n\t\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.fullName.errors }"\n\t\t\t\t\t\t                \t [readonly]="(group.controls.id.value!=\'\')">\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.fullName.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.fullName.errors.required">Full name is required</div>\n\t\t\t\t\t\t\t            </div>  \n\t\t\t\t            \t\t</div>\n\t\t\t\t            \t\t<div class="form-group col-md-6">\n\t\t\t\t            \t\t\t<input class="form-control" placeholder="e.g. +254 000 000 000" formControlName="phoneNo"\n\t\t\t\t\t\t\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && group.controls.phoneNo.errors}"\n\t\t\t\t\t\t\t\t\t\t\tmask="(+000) 000-000000" [readonly]="(group.controls.id.value!=\'\')">\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.phoneNo.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.required">Phone number is required</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.minlength">Must be equal to 12 character(s)</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.maxlength">Must be equal to 12 character(s)</div>\n\t\t\t\t\t\t\t\t\t\t\t<div *ngIf="group.controls.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t            \t\t</div>\t\t\t\t            \t\t\n\t\t\t\t            \t\t<div class="form-group col-md-12">\n\t\t\t\t            \t\t\t<input type="text" formControlName="email" class="form-control" \n\t\t\t\t\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && group.controls.email.errors }"\n\t\t\t\t\t\t\t            \t [readonly]="(group.controls.id.value!=\'\')"/>\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.email.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.email.errors.required">Email is required</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.email.errors.email">Email must be a valid email address</div>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t            \t\t</div>\n\t\t\t\t            \t</div>       \n\t\t\t\t            </td>\t\t\t\t\t\t            \t\n\t\t\t\t            <td class="text-right pt-4">\n\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRow(i)">\n\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t\t\t                \tDelete\n\t\t\t\t                </a>\n\t\t\t\t            </td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\t\n\t<button type="button" (click)="wsIsValid() && onSubmit()" class="btn btn-primary">Temporary Save</button>\n\t&nbsp;\n\t<button type="button" (click)="wsIsValid() && onSubmit(true)" class="btn btn-primary">Publish Election</button>\n</form>',styles:[""]})],U);const _=c.a.apiUrl+"election-votes",F={headers:new l.f({"Content-Type":"application/json"})};let P=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(_+"?filter="+JSON.stringify(t),F)}get(t){return this.http.get(`${_}/${t}`)}create(t){return this.http.post(_,t,F)}update(t,e){return this.http.patch(`${_}/${t}`,e,F)}delete(t){return this.http.delete(`${_}/${t}`,F)}deleteAll(){return this.http.delete(_,F)}};P.ctorParameters=()=>[{type:l.b}],P=Object(r.c)([Object(o.Injectable)({providedIn:"root"})],P);let q=class{constructor(t,e,s,r,i,n,o,a){this.dataService=t,this.voteService=e,this.tokenService=s,this.functions=r,this.router=i,this.toastr=n,this.route=o,this.orderBy=a,this.pk="electionID",this.title="Vote In Election",this.object="Election",this.parentUrl="/elections",this.resultsUrl="/elections/results/",this.loading=!1,this.submitted=!1,this.errorMessage="",this.votes={}}ngOnInit(){this.id=this.route.snapshot.params.id,this.loadDetails()}loadDetails(){this.dataService.get(this.id).pipe(Object(f.a)()).subscribe(t=>{this.data=t,this.toastr.success(u.a.Messages.RECORD_LOADED,u.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])}),this.voteService.getAll({where:{electionID:this.id,voterID:this.tokenService.getId()}}).subscribe(t=>{for(let e of t){let t=e.positionNumber,s=this.votes[t]||[];-1==s.indexOf(e.contestantID)&&s.push(e.contestantID),this.votes[t]=s}})}onVoteChange(t,e){return Object(r.b)(this,void 0,void 0,function*(){let s="Do you want vote "+t.fullName+" as "+e.positionName+"? You can only vote once.",r=yield m.a.alertDelete("Confirm Vote",s);if(null==r?void 0:r.value){this.loading=!0,this.submitted=!0;let s={electionID:this.id,positionNumber:e.positionNumber,contestantID:t.id,voterID:this.tokenService.getId()};this.voteService.create(s).pipe(Object(f.a)()).subscribe(()=>{let s=this.votes[e.positionNumber]||[];-1==s.indexOf(t.id)&&s.push(t.id),this.votes[e.positionNumber]=s,this.toastr.success(u.a.Messages.VOTE_SUCCESS,u.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:u.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}})}getChoice(t,e){let s=this.votes[t],r={};if(s){let t=e.filter(t=>t.id==s);r=t.length>0?t[0]:{}}return r}};q.ctorParameters=()=>[{type:S},{type:P},{type:I.a},{type:m.a},{type:v.f},{type:b.b},{type:v.a},{type:A.a}],q=Object(r.c)([Object(o.Component)({selector:"election-vote",template:'<div class="row">\r\n\t<div class="col-sm-12">\r\n\t    <app-card cardTitle="{{(data?.electionName || \'Election Name\') | uppercase}}" \r\n\t    \tcardCaption="Vote in your favorite candidate. You can only vote once per contestant"\r\n\t    \tcardClass="table" blockClass="pl-3 pr-3 pb-2 pt-0 mb-2">\t\r\n\t    \t <ngb-tabset>\r\n\t\t        <ngb-tab title="{{p.positionName}}" *ngFor="let p of data?.positions">\r\n\t\t          <ng-template ngbTabContent>\r\n\t\t\t\t\t<div class="dt-responsive table-responsive pr-0 pl-0 pt-1 pb-1">\r\n\t\t\t\t        <table class="table table-bordered table-sm">\r\n\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t  <tr>\r\n\t\t\t\t\t\t\t  \t<td colspan="100%">\r\n\t\t\t\t\t\t\t  \t\t<label class="mb-1">\r\n\t\t\t\t\t\t\t\t\t\tYour Choice: &nbsp;\r\n\t\t\t\t\t\t\t\t\t\t<span class="font-weight-bold">\r\n\t\t\t\t\t\t\t\t\t\t\t{{getChoice(p.positionNumber,data.contestants)?.fullName || \'(None)\'}}\r\n\t\t\t\t\t\t\t\t\t\t</span>\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t  \t</td>\r\n\t\t\t\t\t\t\t  </tr>\r\n\t\t\t\t\t          <tr *ngFor="let c of data?.contestants | \r\n\t\t\t\t\t          KeyFilter:\'positionNumber\':p.positionNumber; let i = index;" \r\n\t\t\t\t\t          \t(click)="votes[p.positionNumber]?.length!=1 && onVoteChange(c,p)">\r\n\t\t\t\t\t            <td>\r\n\t\t\t\t\t              <div class="d-inline-block align-middle">\r\n\t\t\t\t\t                <img src="{{c?.icon || \'assets/images/user/default-user.png\'}}"\r\n\t\t\t\t\t                \tclass="img-radius align-top m-r-15" style="width:40px;">\r\n\t\t\t\t\t                <div class="d-inline-block">\r\n\t\t\t\t\t                  <h6 class="mt-3 font-weight-normal">{{c.fullName | uppercase}}</h6>\r\n\t\t\t\t\t                </div>\r\n\t\t\t\t\t              </div>\r\n\t\t\t\t\t            </td>\r\n\t\t\t\t\t            <td class="pt-3">\r\n\t\t\t\t\t              <div class="checkbox checkbox-primary d-inline">\r\n\t\t\t\t\t\t              <input type="checkbox" name="vote{{i}}" id="vote{{i}}"\r\n\t\t\t\t\t\t              \t[checked]="votes[p.positionNumber] && votes[p.positionNumber]?.indexOf(c.id)>-1"\r\n\t\t\t\t\t\t              \t[disabled]="true">\r\n\t\t\t\t\t\t              <label for="vote{{i}}" class="cr"></label>\r\n\t\t\t\t\t\t          </div>\r\n\t\t\t\t\t            </td>\r\n\t\t\t\t\t          </tr>\r\n\t\t\t\t\t      </tbody>\r\n\t\t\t\t      </table>\r\n\t\t\t\t     </div>\r\n\t\t          </ng-template>\r\n\t\t        </ngb-tab>\r\n\t\t     </ngb-tabset>\r\n\t\t     \t\r\n\t\t\t<div class="pull-right wizard-submit">\r\n\t\t\t\t<button type="button" routerLink="{{parentUrl}}" class="btn btn-primary">Go Back</button>\t\r\n\t\t\t\t&nbsp;\r\n\t\t\t\t<button type="button" routerLink="{{resultsUrl + data[pk]}}" class="btn btn-primary">Results</button>\t\t\r\n\t\t\t</div>\t\t\t\t\t\t\t\r\n\t    </app-card>\r\n\t</div>\r\n</div>',styles:[""]})],q);var L=s("u0kB");let B=class{constructor(t,e,s,r,i,n,o,a){this.dataService=t,this.reportService=e,this.tokenService=s,this.functions=r,this.router=i,this.toastr=n,this.route=o,this.orderBy=a,this.pk="electionID",this.title="Vote In Election",this.object="Election",this.parentUrl="/elections",this.voteUrl="/elections/vote/",this.resultsUrl="/elections/results/",this.errorMessage="",this.results={}}ngOnInit(){this.id=this.route.snapshot.params.id,this.loadDetails()}loadDetails(){this.dataService.get(this.id).pipe(Object(f.a)()).subscribe(t=>{this.data=t,this.toastr.success(u.a.Messages.RECORD_LOADED,u.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])}),this.reportService.getResults(this.id).subscribe(t=>{this.results=t})}getWinner(t){return this.functions.maximumInArray(t,"voteCount")}};B.ctorParameters=()=>[{type:S},{type:L.a},{type:I.a},{type:m.a},{type:v.f},{type:b.b},{type:v.a},{type:A.a}],B=Object(r.c)([Object(o.Component)({selector:"election-results",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card cardTitle="{{(data?.electionName || \'Election Name\') | uppercase}}" \n\t    \tcardCaption="Live Election Results - {{data?.electionName}}"\n\t    \tcardClass="table" blockClass="p0 mb-2">\t\t    \t\t    \t\n\t    \t <ngb-tabset>\n\t\t        <ngb-tab title="{{p.positionName}}" *ngFor="let p of results">\n\t\t          <ng-template ngbTabContent>\n\t\t          \t<div class="form-row pt-3 pl-3 pr-3">\n\t\t\t          \t<div class="form-group col-md-3 col-sm-12">\n\t\t\t\t\t\t\t<label class="mb-1">\n\t\t\t\t\t\t\t\tVotes Cast: &nbsp;<span class="font-weight-bold">{{p.turnout || \'-\'}}</span>\t\t\t\t\t\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="form-group col-md-3 col-sm-12">\n\t\t\t\t\t\t\t<label class="mb-1">\n\t\t\t\t\t\t\t\tRegistered Voters: &nbsp;<span class="font-weight-bold">{{p.registered || \'-\'}}</span>\t\t\t\t\t\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t    \t<div class="form-group col-md-3 col-sm-6">\n\t\t\t\t    \t\t<label class="mb-1">% Turnout:</label>\n\t\t\t\t    \t\t<div class="mt-1">\n\t\t\t\t\t\t\t\t<ngb-progressbar [showValue]="true" [value]="p.percent"></ngb-progressbar>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\t\t\t\t\t\t\t\t\n\t\t\t\t    \t<div class="form-group col-md-3 col-sm-6 text-right">\n\t\t\t\t    \t\t<label class="mb-1">\n\t\t\t\t\t\t\t\tWinner: &nbsp;\n\t\t\t\t\t\t\t\t<span class="font-weight-bold">\n\t\t\t\t\t\t\t\t\t{{getWinner(p.contestants)?.fullName || \'(None)\'}}\n\t\t\t\t\t\t\t\t</span>\t\t\n\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t<span>{{getWinner(p.contestants)?.voteCount}} vote(s)</span>\t\t\t\n\t\t\t\t\t\t\t</label>\n\t\t\t\t    \t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class="dt-responsive table-responsive pr-0 pl-0 pt-1 pb-1">\n\t\t\t\t        <table class="table table-bordered table-sm">\t\n\t\t\t\t        \t<thead>\n\t\t\t\t\t\t\t  <tr>\n\t\t\t\t\t\t\t  \t<th width="100">Position</th>\n\t\t\t\t\t\t\t  \t<th>Name of Contestant</th>\n\t\t\t\t\t\t\t  \t<th width="100" class="text-right">Vote Count</th>\n\t\t\t\t\t\t\t  </tr>\n\t\t\t\t\t\t\t</thead>\t\t\t        \t\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t          <tr *ngFor="let c of p.contestants | OrderBy:\'-voteCount\'; let i = index;">\n\t\t\t\t\t          \t<td>{{(i+1) + \'.\'}}</td>\n\t\t\t\t\t            <td>\n\t\t\t\t\t              <div class="d-inline-block align-middle">\n\t\t\t\t\t                <img src="{{c?.icon || \'assets/images/user/default-user.png\'}}"\n\t\t\t\t\t                \tclass="img-radius align-top m-r-15" style="width:40px;">\n\t\t\t\t\t                <div class="d-inline-block">\n\t\t\t\t\t                  <h6 class="mt-3 font-weight-normal">{{c.fullName | uppercase}}</h6>\n\t\t\t\t\t                </div>\n\t\t\t\t\t              </div>\n\t\t\t\t\t            </td>\n\t\t\t\t\t            <td class="pt-3 text-right">\n\t\t\t\t\t              \t{{c?.voteCount || 0}}\n\t\t\t\t\t            </td>\n\t\t\t\t\t          </tr>\n\t\t\t\t\t      </tbody>\n\t\t\t\t      </table>\n\t\t\t\t     </div>\n\t\t          </ng-template>\n\t\t        </ngb-tab>\n\t\t     </ngb-tabset>\n\t\t     \t\n\t\t\t<div class="pull-right wizard-submit">\n\t\t\t\t<button type="button" routerLink="{{parentUrl}}" class="btn btn-primary">\n\t\t\t\t\tGo Back</button>\n\t\t\t\t&nbsp;\n\t\t\t\t<button type="button" *ngIf="data.electionStatus==\'ongoing\'"\n\t\t\t\t\trouterLink="{{voteUrl + data[pk]}}" class="btn btn-primary">Vote Now</button>\t\t\n\t\t\t</div>\n\t    </app-card>\n\t</div>\n</div>',styles:[""]})],B);let $=class{constructor(t,e,s,r,i,n,o,a){this.route=t,this.teamService=e,this.tokenService=s,this.userService=r,this.dataService=i,this.functions=n,this.constants=o,this.toastr=a,this.pk="electionID",this.title="Elections",this.object="Election",this.voteUrl="elections/vote/",this.resultsUrl="elections/results/",this.editUrl="elections/edit/",this.addUrl="elections/create",this.rows=[],this.errorMessage=null,this.filter={term:null,electionTypeID:null},this.status={},this.status=this.functions.objectify(this.constants.electionStatus,"value")}ngOnInit(){this.route.queryParams.subscribe(t=>{let e=t.electionTypeID;this.filter.electionTypeID=e;let s=e?{electionTypeID:e}:{};this.dataService.getAll({where:s}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=m.a.handleError(t,u.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)})})}deleteRow(t){return Object(r.b)(this,void 0,void 0,function*(){let e=yield m.a.alertDelete(u.a.Title.RECORD_OPERATION,u.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(u.a.Messages.DELETE_SUCCESS,u.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=m.a.handleError(e,u.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,u.a.Title.RECORD_OPERATION)}))})}};$.ctorParameters=()=>[{type:v.a},{type:x.a},{type:I.a},{type:C.a},{type:S},{type:m.a},{type:u.a},{type:b.b}],$=Object(r.c)([Object(o.Component)({selector:"app-elections",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" cardClass="table-card" blockClass="p-0">\n\t      <div class="table-responsive">\n\t      \t<election-tabs selectedTab="{{filter.electionTypeID}}"></election-tabs>\n\t        <table class="table">\n\t          <tr>\n\t          \t<th>#</th>\n\t            <th>Election Name</th>\n\t            <th>Election Date</th>\n\t            <th class="text-center">Status</th>\n\t            <th class="text-right">\n\t            \t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t            \t\ttitle="Add {{object}}" class="text-primary" routerLink="/{{addUrl}}">\n\t\t\t\t\t\t<i class="feather icon-plus"></i> Add Election\n\t\t\t\t\t</a>\n\t\t\t\t\t<span *ngIf="tokenService.getUserType()!=constants.userTypes.admin.name">\n\t\t\t\t\t\tActions\n\t\t\t\t\t</span>\n\t            </th>\n\t          </tr>                \t\n\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t{{\n\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t}}\n\t\t\t\t</td>\n\t\t\t  </tr>\n\t          <tr template #elseBlock *ngFor="let row of rows | OrderBy:[\'-dueDate\',\'-evaluationName\']; let i=index">           \n\t            <td>{{i+1}}.</td>\n\t            <td><a routerLink="/{{resultsUrl + row[pk]}}">{{row.electionName}}</a></td>\n\t            <td>{{row?.electionDate | date:\'dd-MMM-yyyy\'}}</td>\n\t            <td class="text-center">\n\t            \t<span class="{{status[row?.electionStatus]?.badge}}">{{row.electionStatus}}</span>\n\t            </td>\n\t            <td class="text-right">\n\t            \t<a  *ngIf="[\'ongoing\',\'pending\'].indexOf(row.electionStatus)>-1 ||\n\t            \t\ttokenService.getUserType()==constants.userTypes.admin.name" title="Vote" \n\t            \t\tclass="text-primary" routerLink="/{{voteUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-slack"></i> Vote\n\t\t\t\t\t</a>\n\t\t\t\t\t<a  *ngIf="row.electionStatus==\'complete\'" title="Results" \n\t            \t\tclass="text-primary" routerLink="/{{resultUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-eye"></i> Results\n\t\t\t\t\t</a>\n\t\t\t\t\t<a  *ngIf="row.electionStatus==\'pending\' &&\n\t\t\t\t\t\ttokenService.getUserType()==constants.userTypes.admin.name" title="Edit {{object}}" \n\t\t\t\t\t\tclass="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t</a>\t\t\t\t\t\n\t\t\t\t\t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t\t\t\t\t\tclass="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\ttitle="Archive {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\tArchive\n\t\t\t\t\t</a>\n\t            </td>\n\t          </tr>\n\t  \t\t</table>\n\t  \t</div>\n\t  </app-card>\n\t</div>\n</div>',styles:[""]})],$);const G={name:"NewElectionsWizard",navBar:{icons:{previous:'<i class="material-icons ng-wizard-icon">done</i>',current:'<i class="material-icons ng-wizard-icon">edit</i>',next:'<i class="material-icons ng-wizard-icon">lock</i>'}},roles:["admin"]},H={title:"Choose Voters",icon:'<i class="material-icons ng-wizard-icon">done_all</i>',buttons:{current:{}}},Y=[{path:"",redirectTo:"list",pathMatch:"full"},{path:"list",component:$,canActivate:[O.a]},{path:"types",component:y,canActivate:[O.a]},{path:"create",component:T,data:G,canActivate:[O.a],children:[{path:"",pathMatch:"full",redirectTo:"election-info"},{path:"election-info",component:w,data:{title:"Election Info"}},{path:"election-positions",component:V,data:{title:"Add Positions"}},{path:"election-contestants",component:j,data:{title:"Add Contestants"}},{path:"election-voters",component:U,data:H},{path:"**",redirectTo:"election-info"}]},{path:"edit/:id",component:T,data:G,canActivate:[O.a],children:[{path:"",pathMatch:"full",redirectTo:"election-info"},{path:"election-info",component:w,data:{title:"Election Info"}},{path:"election-positions",component:V,data:{title:"Edit Positions"}},{path:"election-contestants",component:j,data:{title:"Edit Contestants"}},{path:"election-voters",component:U,data:H},{path:"**",redirectTo:"election-info"}]},{path:"vote/:id",component:q,canActivate:[O.a]},{path:"results/:id",component:B,canActivate:[O.a]}];let z=class{};z=Object(r.c)([Object(o.NgModule)({imports:[v.g.forChild(Y)],exports:[v.g]})],z);let J=class{constructor(t){this.electionTypeService=t,this.selectedTab="",this.parentUrl="/elections/list",this.electionTypes=[],this.tabs=[],this.title="elections"}ngOnInit(){this.electionTypeService.getAll().subscribe(t=>{this.tabs.push({id:"",name:"All elections",path:this.parentUrl,params:[]});for(let e in t){let s=t[e],r={electionTypeID:s.electionTypeID};this.tabs.push({id:s.electionTypeID,name:s.electionTypeName,path:this.parentUrl,params:r})}})}};J.ctorParameters=()=>[{type:h}],J.propDecorators={selectedTab:[{type:o.Input}]},J=Object(r.c)([Object(o.Component)({selector:"election-tabs",template:'<ul class="nav nav-pills m-3">\n  <li class="nav-item" *ngFor="let t of tabs">\n  \t<a class="nav-link" [ngClass]="{\'active\':(t?.id==selectedTab)}" \n  \t\trouterLink="{{t?.path}}" [queryParams]="t?.params">{{t?.name}}</a>\n  </li>\n</ul>',styles:[""]})],J);let W=class{};W=Object(r.c)([Object(o.NgModule)({declarations:[$,T,V,w,j,B,q,U,y,J],imports:[a.CommonModule,z,n.a,i.h,i.g]})],W)},V22Z:function(t,e,s){"use strict";s.d(e,"a",function(){return l});var r=s("mrSG"),i=s("tk/3"),n=s("fXoL");const o=s("AytR").a.apiUrl+"teams",a={headers:new i.f({"Content-Type":"application/json"})};let l=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(o+"?filter="+JSON.stringify(t),a)}getAllByTeamID(t){let e={where:{teamID:{inq:t=Array.isArray(t)?t:[t]}}};return this.http.get(o+"?filter="+JSON.stringify(e),a)}get(t){return this.http.get(`${o}/${t}`)}create(t){return this.http.post(o,t,a)}update(t,e){return this.http.patch(`${o}/${t}`,e,a)}delete(t){return this.http.delete(`${o}/${t}`,a)}deleteAll(){return this.http.delete(o,a)}findByName(t){return this.http.get(`${o}?teamName=${t}`,a)}};l.ctorParameters=()=>[{type:i.b}],l=Object(r.c)([Object(n.Injectable)({providedIn:"root"})],l)},VITL:function(t,e,s){"use strict";s.d(e,"a",function(){return l});var r=s("mrSG"),i=s("tk/3"),n=s("fXoL");const o=s("AytR").a.apiUrl+"users",a={headers:new i.f({"Content-Type":"application/json"})};let l=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(o+"?filter="+JSON.stringify(t),a)}getAllByUserID(t,e){let s={where:{id:{inq:t=Array.isArray(t)?t:[t]}}};return e&&Object.assign(s.where,{companyID:e}),this.http.get(o+"?filter="+JSON.stringify(s),a)}getAllByType(t,e){let s={where:{userType:t}};return e&&Object.assign(s.where,{companyID:e}),this.http.get(o+"?filter="+JSON.stringify(s),a)}get(t){return this.http.get(`${o}/${t}`)}create(t){return this.http.post(o,t,a)}update(t,e){return this.http.patch(`${o}/${t}`,e,a)}delete(t){return this.http.delete(`${o}/${t}`,a)}deleteAll(){return this.http.delete(o,a)}deleteForever(t){return this.http.delete(`${o}/forever/${t}`,a)}deleteAllForever(){return this.http.delete("API_BASE/forever",a)}findByName(t){return this.http.get(`${o}?FullName=${t}`,a)}};l.ctorParameters=()=>[{type:i.b}],l=Object(r.c)([Object(n.Injectable)({providedIn:"root"})],l)}}]);