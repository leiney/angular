(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{lBUW:function(t,e,s){"use strict";s.r(e),s.d(e,"AuthModule",function(){return N});var r=s("mrSG"),n=s("FQmJ"),a=s("7Vn+"),i=s("/Uzn"),o=s("d+0u"),l=s("fXoL"),d=s("5eHb"),c=s("tyNb"),m=s("3Pt+");let p=class{constructor(t,e,s,r,n,a,i){this.constants=t,this.functions=e,this.authService=s,this.tokenService=r,this.toastr=n,this.router=a,this.formBuilder=i,this.errorMessage="",this.submitted=!1,this.codeSent=!1,this.loading=!1}ngOnInit(){this.form=this.formBuilder.group({channel:["sms",m.j.required],email:["",[m.j.email,m.j.pattern("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")]],phoneNo:["+254",[]],otpCode:["",m.j.required]});let t=this.tokenService.getUser();"sms"==t.channel&&this.form.patchValue({phoneNo:t.phoneNo}),this.form.patchValue({email:t.email}),this.resetOTP()}resetOTP(){this.submitted=!0,!this.form.get("channel").value||"sms"==this.form.get("channel").value&&!this.form.get("phoneNo").value||"email"==this.form.get("channel").value&&!this.form.get("email").value?this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION):(this.codeSent=!1,this.loading=!0,this.authService.resetOTP(this.form.value,this.form.value.channel).subscribe(t=>{let e="sms"==this.form.get("channel").value?this.form.value.phoneNo:this.form.value.email;this.codeSent=!0,this.submitted=!1,this.tokenService.setIsOTPValid("N"),this.toastr.success(o.a.Messages.PASSWORD_RESET_SUCCESS+e,o.a.Title.PASSWORD_RESET)},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.PASSWORD_RESET_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.PASSWORD_RESET)}).add(()=>{this.loading=!1}))}validateOTP(){this.submitted=!0,this.form.invalid?i.a.alertError(o.a.Title.FORM_VALIDATION,o.a.Messages.FORM_ERROR_FOUND):(this.loading=!0,this.authService.validateOTP(this.form.value,this.form.value.channel).subscribe(t=>{this.codeSent=!1,this.tokenService.setIsOTPValid("Y"),this.toastr.success(o.a.Messages.OTP_SUCCESS,o.a.Title.PASSWORD_RESET),this.router.navigate([this.authService.homePath])},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.OTP_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.PASSWORD_RESET)}).add(()=>{this.loading=!1}))}get f(){return this.form.controls}};p.ctorParameters=()=>[{type:o.a},{type:i.a},{type:a.a},{type:n.a},{type:d.b},{type:c.f},{type:m.b}],p=Object(r.c)([Object(l.Component)({selector:"app-two-factor",template:'<form (submit)="(codeSent? validateOTP() : resetOTP())" class="form" name="form" [formGroup]="form" novalidate autocomplete="off">\n\t<div class="auth-wrapper align-items-stretch aut-bg-img">\n\t  <div class="flex-grow-1">\n\t    <div class="h-100 d-md-flex align-items-center auth-side-img">\n\t      <div class="col-sm-10 auth-content w-auto">\n\t        <img src="assets/images/logo.png" alt="" class="img-fluid">\n\t        <h3 class="text-white my-4">OTP Validation</h3>\n\t        <h6 class="text-white font-weight-normal">\n\t        \tYou are one step away from getting into the system. Please validate your OTP Code.\n\t        </h6>\n\t      </div>\n\t    </div>\n\t    <div class="auth-side-form">\n\t      <div class=" auth-content">\n\t        <img src="assets/images/logo-dark.png" alt="" class="img-fluid mb-4 d-block d-xl-none d-lg-none">\n\t        <h3 class="mb-4 f-w-400">Validate OTP</h3>\n\t        <div style="display:none">\n\t\t\t    <input type="password" tabindex="-1"/>\n\t\t\t</div>\n\t\t\t<div class="input-group mb-3">Choose where to receive the OTP Code</div>\n\t\t\t<div class="input-group mb-3">\n\t\t\t\t<div class="radio radio-primary d-inline">\n\t              <input type="radio" name="channel" id="channelSms" value="sms" \n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t              <label for="channelSms" class="cr pr-3">Sms</label>\n\t            </div>\n\t            <div class="radio radio-primary d-inline">\n\t              <input type="radio" name="channel" id="channelEmail" value="email" \n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t              <label for="channelEmail" class="cr pr-3">Email</label>\n\t            </div>\n\t\t\t</div>\n\t\t\t<div *ngIf="submitted && f.channel.errors" class="invalid-feedback text-left">\n                <div *ngIf="f.channel.errors.required">Choose your OTP message channel</div>\n            </div>\n\t\t\t<div class="input-group mb-4" *ngIf="form.get(\'channel\').value==\'sms\'">\n\t\t\t\t<div class="input-group-prepend">\n\t\t\t\t\t<span class="input-group-text"><i\n\t\t\t\t\t\tclass="nc-icon nc-circle-10"></i></span>\n\t\t\t\t</div>\n\t\t\t\t<input class="form-control" placeholder="Enter phone number..." formControlName="phoneNo" \n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.phoneNo.errors}"\n\t\t\t\t\tmask="(+000) XXX XXX X00" [readonly]="true" [hiddenInput]="true">\n\t\t\t\t<div *ngIf="submitted && f.phoneNo.errors" class="invalid-feedback text-left">\n                    <div *ngIf="f.phoneNo.errors.required">Phone number is required {{f.phoneNo.errors | json}} </div>\n                    <div *ngIf="f.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\n                </div>\n\t\t\t</div>\n\t\t\t<div class="input-group mb-4" *ngIf="form.get(\'channel\').value==\'email\'">\n\t\t\t\t<div class="input-group-prepend">\n\t\t\t\t\t<span class="input-group-text"><i\n\t\t\t\t\t\tclass="nc-icon nc-email-85"></i></span>\n\t\t\t\t</div>\n\t\t\t\t<input class="form-control" placeholder="Enter email address..." formControlName="email" \n\t\t\t\t\ttype="email" [ngClass]="{\'is-invalid\': submitted && f.email.errors}" [readonly]="true" *ngIf="false">\n\t\t\t\t<input class="form-control" [readonly]="true"\n\t\t\t\t\t[value]="functions.maskEmail(f.email.value)" *ngIf="true">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t<div *ngIf="submitted && f.email.errors" class="invalid-feedback text-left">\n                    <div *ngIf="f.email.errors.required">Email address is required</div>\n                    <div *ngIf="f.email.errors.pattern">Incorrect! use format e.g. aa@abc.com</div>\t\t\t\t                            \n                </div>\n\t\t\t</div>\t\t\t\t\t\t\t\t\t\n\t\t    <div class="form-row mb-4" *ngIf="codeSent">\n\t\t    \t<div class="form-group col-12">\n\t\t            <input type="text" placeholder="Enter reset code received on {{form.get(\'channel\').value}}" formControlName="otpCode" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.otpCode.errors }" />\n\t\t            <div *ngIf="submitted && f.otpCode.errors" class="invalid-feedback text-left">\n\t\t                <div *ngIf="f.otpCode.errors.required">Enter OTP received on {{form.get(\'channel\').value}}</div>\n\t\t            </div>\n\t\t        </div>\n\t\t    </div>\n\t        <button [disabled]="loading" type="submit" class="btn btn-primary btn-block mb-3">\n\t        \t<span *ngIf="loading" class="spinner-border spinner-border-sm"></span>\n\t        \t{{codeSent? \'Submit\' : \'Send Code\'}}\n\t        </button>\n\t        <div class="text-center">\n\t          <div class="saprator my-4"><span>OR</span></div>\n\t          <p class="mt-4">Not received code on {{form.get(\'channel\').value}}? \n\t          \t<a type="button" class="f-w-400" (click)="resetOTP()">Resend Now</a>\n\t          </p>\n\t          <p class="mb-0 text-muted"> \n\t\t        Unable to continue..<a href="#" (click)="authService.logout()">Logout</a>\n\t\t      </p>\n\t        </div>\t        \n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n</form>',styles:[""]})],p);var u=s("Sy8X");let h=class{constructor(t,e,s,r,n){this.constants=t,this.authService=e,this.toastr=s,this.router=r,this.formBuilder=n,this.errorMessage="",this.submitted=!1,this.loading=!1}ngOnInit(){this.form=this.formBuilder.group({fullName:["",m.j.required],email:["",[m.j.required,m.j.email,m.j.pattern("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")]],phoneNo:["+254",[m.j.required,m.j.minLength(12),m.j.maxLength(12)]],channel:["",m.j.required]})}onSubmit(){this.submitted=!0,this.form.invalid?i.a.alertError(o.a.Title.FORM_VALIDATION,o.a.Messages.FORM_ERROR_FOUND):(this.loading=!0,this.authService.register(this.form.value,o.a.UserTypes.board.name).subscribe(t=>{this.toastr.success(o.a.Messages.SIGNUP_SUCCESS,o.a.Title.SIGNUP),this.router.navigate([this.authService.loginPath])},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.SIGNUP_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.SIGNUP)}).add(()=>{this.loading=!1}))}get f(){return this.form.controls}};h.ctorParameters=()=>[{type:o.a},{type:a.a},{type:d.b},{type:c.f},{type:m.b}],h=Object(r.c)([Object(l.Component)({selector:"app-register",template:'<form (submit)="onSubmit()" class="form" name="form" [formGroup]="form" novalidate>\r\n\t<div class="auth-wrapper align-items-stretch aut-bg-img">\r\n\t  <div class="flex-grow-1">\r\n\t    <div class="h-100 d-md-flex align-items-center auth-side-img">\r\n\t      <div class="col-sm-10 auth-content w-auto">\r\n\t        <img src="assets/images/logo.png" alt="" class="img-fluid">\r\n\t        <h3 class="text-white my-4">Welcome To {{constants.appSettings.title}}</h3>\r\n\t        <h6 class="text-white font-weight-normal">\r\n\t        \t{{constants.appSettings.motto}}\r\n\t        </h6>\r\n\t      </div>\r\n\t    </div>\r\n\t    <div class="auth-side-form">\r\n\t      <div class=" auth-content">\r\n\t        <img src="assets/images/logo-dark.png" alt="" class="img-fluid mb-4 d-block d-xl-none d-lg-none">\r\n\t        <h3 class="mb-4 f-w-400">Register</h3>\r\n\t        <h6 class="mb-4 f-w-400">Enter the details below to register today</h6>\r\n\t        <div class="input-group mb-3">\r\n\t\t\t\t<div class="input-group-prepend">\r\n\t\t\t\t\t<span class="input-group-text"><i class="feather icon-user"></i></span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input class="form-control" placeholder="Name..." formControlName="fullName" \r\n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.fullName.errors}">\r\n\t\t\t\t<div *ngIf="submitted && f.fullName.errors" class="invalid-feedback text-left">\r\n\t                <div *ngIf="f.fullName.errors.required">Your full name is required</div>\r\n\t            </div>\r\n\t\t\t</div>\r\n\t\t\t<div class="input-group mb-3">\r\n\t\t\t\t<div class="input-group-prepend">\r\n\t\t\t\t\t<span class="input-group-text"><i class="feather icon-phone"></i></span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input class="form-control" placeholder="Phone..." formControlName="phoneNo" \r\n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.phoneNo.errors}"\r\n\t\t\t\t\tmask="(+000) 000-000000">\r\n\t\t\t\t<div *ngIf="submitted && f.phoneNo.errors" class="invalid-feedback text-left">\r\n\t                <div *ngIf="f.phoneNo.errors.required">Phone number is required</div>\r\n\t                <div *ngIf="f.phoneNo.errors.minlength">Must be equal to 12 character(s)</div>\r\n\t\t\t\t\t\t\t\t<div *ngIf="f.phoneNo.errors.maxlength">Must be equal to 12 character(s)</div>\r\n\t                <div *ngIf="f.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\r\n\t            </div>\r\n\t\t\t</div>\r\n\t\t\t<div class="input-group mb-3">\r\n\t\t\t\t<div class="input-group-prepend">\r\n\t\t\t\t\t<span class="input-group-text"><i class="feather icon-mail"></i></span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<input class="form-control" placeholder="Email..." formControlName="email" \r\n\t\t\t\t\ttype="email" [ngClass]="{\'is-invalid\': submitted && f.email.errors}">\r\n\t\t\t\t<div *ngIf="submitted && f.email.errors" class="invalid-feedback text-left">\r\n\t                <div *ngIf="f.email.errors.required">Email address is required</div>\r\n\t                <div *ngIf="f.email.errors.pattern">Incorrect! use format e.g. aa@abc.com</div>\t\t\t\t                            \r\n\t            </div>\r\n\t\t\t</div>\t\t\t\t\t\t\t\t\t\r\n\t\t\t<div class="input-group mb-3">Choose where to receive credentials</div>\r\n\t\t\t<div class="form-group text-left mt-2">\r\n\t\t\t\t<div class="radio radio-primary d-inline">\r\n\t              <input type="radio" name="channel" id="channelSms" value="sms" \r\n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\r\n\t              <label for="channelSms" class="cr pr-3">Sms</label>\r\n\t            </div>\r\n\t            <div class="radio radio-primary d-inline">\r\n\t              <input type="radio" name="channel" id="channelEmail" value="email" \r\n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\r\n\t              <label for="channelEmail" class="cr pr-3">Email</label>\r\n\t            </div>\r\n\t\t\t</div>\r\n\t\t\t<div *ngIf="submitted && f.channel.errors" class="invalid-option-check text-left">\r\n                <div *ngIf="f.channel.errors.required">Choose your communication method</div>\r\n            </div>\r\n\t        <button [disabled]="loading" type="submit" class="btn btn-primary btn-block mb-4">\r\n\t        \t<span *ngIf="loading" class="spinner-border spinner-border-sm"></span>\r\n\t        \tSubmit\r\n\t        </button>\r\n\t        <div class="text-center">\r\n\t          <div class="saprator my-4"><span>OR</span></div>\r\n\t          <p class="mt-4">Already have an account? <a href="{{authService.loginPath}}" class="f-w-400">Login</a></p>\r\n\t        </div>\r\n\t      </div>\r\n\t    </div>\r\n\t  </div>\r\n\t</div>\r\n</form>',styles:[""]})],h);var f=s("ebz3"),v=s("ofXK"),g=s("PCx1"),b=s("eKYg");let S=class{constructor(t,e,s,r,n,a,i,o){this.constants=t,this.functions=e,this.authService=s,this.tokenStorage=r,this.passwordPolicyService=n,this.toastr=a,this.router=i,this.formBuilder=o,this.errorMessage="",this.submitted=!1,this.codeSent=!1,this.loading=!1,this.passwordPolicies={}}ngOnInit(){const t={validators:Object(b.a)("password","confirmPassword")};this.form=this.formBuilder.group({channel:["sms",m.j.required],email:["",[m.j.email,m.j.pattern("^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$")]],phoneNo:["+254",[]],password:["",[m.j.minLength(8),m.j.required]],confirmPassword:["",m.j.required],resetCode:["",m.j.required],clientCode:["",m.j.required]},t),this.passwordPolicies=this.functions.objectify(this.constants.passwordPolicies,"policyCode")}resetCode(){this.submitted=!0,!this.form.get("channel").value||"sms"==this.form.get("channel").value&&!this.form.get("phoneNo").value||"email"==this.form.get("channel").value&&!this.form.get("email").value?this.toastr.error(o.a.Messages.FORM_ERROR_FOUND,o.a.Title.FORM_VALIDATION):(this.codeSent=!1,this.loading=!0,this.authService.resetCode(this.form.value,this.form.value.channel).subscribe(t=>{let e="sms"==this.form.get("channel").value?this.form.value.phoneNo:this.form.value.email;this.codeSent=!0,this.submitted=!1,this.toastr.success(o.a.Messages.PASSWORD_RESET_SUCCESS+e,o.a.Title.PASSWORD_RESET)},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.PASSWORD_RESET_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.PASSWORD_RESET)}).add(()=>{this.loading=!1}))}changePassword(){this.submitted=!0,this.form.invalid?i.a.alertError(o.a.Title.FORM_VALIDATION,o.a.Messages.FORM_ERROR_FOUND):(this.loading=!0,this.authService.changeForgottenPassword(this.form.value,this.form.value.channel).subscribe(t=>{this.codeSent=!1,this.toastr.success(o.a.Messages.PASSWORD_CHANGE_SUCCESS,o.a.Title.PASSWORD_RESET),this.router.navigate([this.authService.lockPath])},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.PASSWORD_RESET_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.PASSWORD_RESET)}).add(()=>{this.loading=!1}))}changeClientCode(t){this.tokenStorage.saveClientCode(this.form.get("clientCode").value),this.passwordPolicyService.enforcePolicy(this.form.get("password"),this.passwordPolicies)}get f(){return this.form.controls}};S.ctorParameters=()=>[{type:o.a},{type:i.a},{type:a.a},{type:n.a},{type:g.a},{type:d.b},{type:c.f},{type:m.b}],S=Object(r.c)([Object(l.Component)({selector:"app-forgot-password",template:'<form (submit)="(codeSent? changePassword() : resetCode())" class="form" name="form" [formGroup]="form" novalidate autocomplete="off">\n\t<div class="auth-wrapper align-items-stretch aut-bg-img">\n\t  <div class="flex-grow-1">\n\t    <div class="h-100 d-md-flex align-items-center auth-side-img">\n\t      <div class="col-sm-10 auth-content w-auto">\n\t        <img src="assets/images/logo.png" alt="" class="img-fluid">\n\t        <h3 class="text-white my-4"> Forgot Your Password?</h3>\n\t        <h6 class="text-white font-weight-normal">\n\t        \tDo not worry. Choose your preferred password reset method on the right.\n\t\t\t\tThen hit on send reset button.\n\t        </h6>\n\t      </div>\n\t    </div>\n\t    <div class="auth-side-form">\n\t      <div class=" auth-content">\n\t        <img src="assets/images/logo-dark.png" alt="" class="img-fluid mb-4 d-block d-xl-none d-lg-none">\n\t        <h3 class="mb-4 f-w-400">Reset your password</h3>\n\t        <div style="display:none">\n\t\t\t    <input type="password" tabindex="-1"/>\n\t\t\t</div>\n\t\t\t<div class="input-group mb-3">Enter Client Code. Request From Admin</div>\n\t\t\t<div class="input-group mb-3">\n\t          \t<div class="input-group-prepend">\n\t            \t<span class="input-group-text"><i class="fa fa-hashtag"></i></span>\n\t          \t</div>\t          \n\t\t\t\t<input class="form-control" placeholder="Client Code" \n\t\t\t\t\tformControlName="clientCode" (change)="changeClientCode($event)" type="text" \n\t\t\t\t\t[ngClass]="{\'is-invalid\': submitted && f.clientCode.errors}" autocomplete="off">\n\t\t\t\t<div *ngIf="submitted && f.clientCode.errors" class="invalid-feedback">\n                    <div *ngIf="f.clientCode.errors.required">Enter client access code</div>\n                </div>\n\t        </div>\n\t\t\t<div class="input-group mb-3">Choose your password reset method</div>\n\t\t\t<div class="input-group mb-3">\n\t\t\t\t<div class="radio radio-primary d-inline">\n\t              <input type="radio" name="channel" id="channelSms" value="sms" \n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t              <label for="channelSms" class="cr pr-3">Sms</label>\n\t            </div>\n\t            <div class="radio radio-primary d-inline">\n\t              <input type="radio" name="channel" id="channelEmail" value="email" \n\t              \tformControlName="channel" [ngClass]="{\'is-invalid\': submitted && f.channel.errors}">\n\t              <label for="channelEmail" class="cr pr-3">Email</label>\n\t            </div>\n\t\t\t</div>\n\t\t\t<div *ngIf="submitted && f.channel.errors" class="invalid-feedback text-left">\n                <div *ngIf="f.channel.errors.required">Choose your password reset method</div>\n            </div>\n\t\t\t<div class="input-group mb-4" *ngIf="form.get(\'channel\').value==\'sms\'">\n\t\t\t\t<div class="input-group-prepend">\n\t\t\t\t\t<span class="input-group-text"><i\n\t\t\t\t\t\tclass="nc-icon nc-circle-10"></i></span>\n\t\t\t\t</div>\n\t\t\t\t<input class="form-control" placeholder="Enter phone number..." formControlName="phoneNo" \n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.phoneNo.errors}"\n\t\t\t\t\tmask="(+000) 000-000000">\n\t\t\t\t<div *ngIf="submitted && f.phoneNo.errors" class="invalid-feedback text-left">\n                    <div *ngIf="f.phoneNo.errors.required">Phone number is required {{f.phoneNo.errors | json}} </div>\n                    <div *ngIf="f.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\n                </div>\n\t\t\t</div>\n\t\t\t<div class="input-group mb-4" *ngIf="form.get(\'channel\').value==\'email\'">\n\t\t\t\t<div class="input-group-prepend">\n\t\t\t\t\t<span class="input-group-text"><i\n\t\t\t\t\t\tclass="nc-icon nc-email-85"></i></span>\n\t\t\t\t</div>\n\t\t\t\t<input class="form-control" placeholder="Enter email address..." formControlName="email" \n\t\t\t\t\ttype="email" [ngClass]="{\'is-invalid\': submitted && f.email.errors}">\n\t\t\t\t<div *ngIf="submitted && f.email.errors" class="invalid-feedback text-left">\n                    <div *ngIf="f.email.errors.required">Email address is required</div>\n                    <div *ngIf="f.email.errors.pattern">Incorrect! use format e.g. aa@abc.com</div>\t\t\t\t                            \n                </div>\n\t\t\t</div>\t\t\t\t\t\t\t\t\t\n\t\t    <div class="form-row mb-4" *ngIf="codeSent">\n\t\t    \t<div class="form-group col-12">\n\t\t            <input type="text" placeholder="Enter reset code received on {{form.get(\'channel\').value}}" formControlName="resetCode" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.resetCode.errors }" />\n\t\t            <div *ngIf="submitted && f.resetCode.errors" class="invalid-feedback text-left">\n\t\t                <div *ngIf="f.resetCode.errors.required">Enter code received on {{form.get(\'channel\').value}}</div>\n\t\t            </div>\n\t\t        </div>\n\t\t        <div class="form-group col">\n\t\t            <input type="password" placeholder="New Password" formControlName="password" class="form-control" \n\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.password.errors }" autocomplete="off"/>\n\t\t            <div *ngIf="submitted && f.password.errors" class="invalid-feedback text-left">\n\t\t                <div *ngIf="f.password.errors.required">Enter new password</div>\n\t\t                <div *ngIf="f.password.errors.minlength">Password must be at least {{passwordPolicies?.PASSWORD_MIN_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t\t            <div *ngIf="f.password.errors.maxlength">Password must not exceed {{passwordPolicies?.PASSWORD_MAX_LENGTH?.policyValue || 0}} character(s)</div>\n\t\t                <div *ngIf="f.password.errors.uppercase">Password must contain {{passwordPolicies?.PASSWORD_UPPERCASE_COUNT?.policyValue || 0}} uppercase letter(s)</div>\n\t\t                <div *ngIf="f.password.errors.lowercase">Password must contain {{passwordPolicies?.PASSWORD_LOWERCASE_COUNT?.policyValue || 0}} lowercase letter(s)</div>\n\t\t                <div *ngIf="f.password.errors.numeric">Password must contain {{passwordPolicies?.PASSWORD_NUMERIC_COUNT?.policyValue || 0}} numeric character(s)</div>\n\t\t                <div *ngIf="f.password.errors.special">Password must contain {{passwordPolicies?.PASSWORD_SPECIAL_CHAR_COUNT?.policyValue || 0}} special characters</div>\t\t                \n\t\t            </div>\n\t\t        </div>\n\t\t        <div class="form-group col">\n\t\t            <input type="password" placeholder="Confirm Password" formControlName="confirmPassword" class="form-control"\n\t\t             \t[ngClass]="{ \'is-invalid\': submitted && f.confirmPassword.errors }" autocomplete="off"/>\n\t\t            <div *ngIf="submitted && f.confirmPassword.errors" class="invalid-feedback text-left">\n\t\t                <div *ngIf="f.confirmPassword.errors.required">Re-enter your password</div>\n\t\t                <div *ngIf="f.confirmPassword.errors.mustMatch">Passwords must match</div>\n\t\t            </div>\n\t\t        </div>\n\t\t    </div>\n\t        <button [disabled]="loading" type="submit" class="btn btn-primary btn-block mb-3">\n\t        \t<span *ngIf="loading" class="spinner-border spinner-border-sm"></span>\n\t        \t{{codeSent? \'Submit\' : \'Send Code\'}}\n\t        </button>\n\t        <div class="text-center">\n\t          <div class="saprator my-4"><span>OR</span></div>\n\t          <p class="mt-4">Already have an account? <a href="{{authService.loginPath}}" class="f-w-400">Login</a></p>\n\t        </div>\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n</form>',styles:[""]})],S);var w=s("feko");let y=class{constructor(t,e,s,r,n,a,i){this.constants=t,this.authService=e,this.companyService=s,this.toastr=r,this.tokenStorage=n,this.router=a,this.formBuilder=i,this.errorMessage="",this.submitted=!1,this.loading=!1}ngOnInit(){this.form=this.formBuilder.group({username:["",m.j.required],password:["",m.j.required],clientCode:["",m.j.required]})}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(o.a.Messages.CREDENTIALS_REQUIRED,o.a.Title.FORM_VALIDATION):(this.loading=!0,this.authService.login(this.form.value).subscribe(t=>{this.tokenStorage.saveToken(t.token),this.tokenStorage.saveUser(t);const e=t.companies.length>0?t.companies[0]:"";this.tokenStorage.setSelectedCompany({companyID:e}),this.toastr.success(o.a.Messages.LOGIN_SUCCESS,o.a.Title.LOGIN),this.router.navigate([this.authService.homePath])},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.LOGIN_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.LOGIN)}).add(()=>{this.loading=!1}))}get f(){return this.form.controls}};y.ctorParameters=()=>[{type:o.a},{type:a.a},{type:w.a},{type:d.b},{type:n.a},{type:c.f},{type:m.b}],y=Object(r.c)([Object(l.Component)({selector:"app-login",template:'<form (submit)="onSubmit()" class="form" name="form" [formGroup]="form" novalidate autocomplete="off">\n\t<div class="auth-wrapper align-items-stretch aut-bg-img">\n\t  <div class="flex-grow-1">\n\t    <div class="h-100 d-md-flex align-items-center auth-side-img">\n\t      <div class="col-sm-10 auth-content w-auto">\n\t        <img src="assets/images/logo.png" alt="" class="img-fluid">\n\t        <h3 class="text-white my-4">Welcome To {{constants.appSettings.title}}</h3>\n\t        <h6 class="text-white font-weight-normal">\n\t        \t{{constants.appSettings.motto}}\n\t        </h6>\n\t      </div>\n\t    </div>\n\t    <div class="auth-side-form">\n\t      <div class=" auth-content">\n\t        <img src="assets/images/auth/auth-logo-dark.png" alt="" class="img-fluid mb-4 d-block d-xl-none d-lg-none">\n\t        <h3 class="mb-4 f-w-400">Login</h3>\n\t        <h6 class="mb-4 f-w-400">Enter phone or email to login to {{constants.appSettings.title}}</h6>\n\t        <div class="input-group mb-3">\n\t          \t<div class="input-group-prepend">\n\t            \t<span class="input-group-text"><i class="fa fa-hashtag"></i></span>\n\t          \t</div>\t          \n\t\t\t\t<input class="form-control" placeholder="Access Code" formControlName="clientCode" \n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.clientCode.errors}" autocomplete="off">\n\t\t\t\t<div *ngIf="submitted && f.clientCode.errors" class="invalid-feedback">\n                    <div *ngIf="f.clientCode.errors.required">Enter client access code</div>\n                </div>\n\t        </div>\n\t        <div class="input-group mb-3">\n\t          \t<div class="input-group-prepend">\n\t            \t<span class="input-group-text"><i class="feather icon-mail"></i></span>\n\t          \t</div>\t          \n\t\t\t\t<input class="form-control" placeholder="Phone or Email" formControlName="username" \n\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && f.username.errors}" autocomplete="off">\n\t\t\t\t<div *ngIf="submitted && f.username.errors" class="invalid-feedback">\n                    <div *ngIf="f.username.errors.required">Enter your phone or email</div>\n                </div>\n\t        </div>\n\t        <div class="input-group mb-4">\n\t          <div class="input-group-prepend">\n\t            <span class="input-group-text"><i class="feather icon-lock"></i></span>\n\t          </div>\n\t          <input class="form-control" placeholder="Your Password" formControlName="password" \n\t          \ttype="password" [ngClass]="{\'is-invalid\': submitted && f.password.errors}" autocomplete="off">\n\t\t\t  <div *ngIf="submitted && f.password.errors" class="invalid-feedback">\n\t\t\t\t\t<div *ngIf="f.password.errors.required">Enter your password here</div>\n              </div>\n\t        </div>\n\t        <div class="form-group text-left mt-2">\n\t          <div class="checkbox checkbox-primary d-inline">\n\t            <input type="checkbox" name="checkbox-p-1" id="checkbox-p-1" disabled="true">\n\t            <label for="checkbox-p-1" class="cr">Save credentials</label>\n\t          </div>\n\t        </div>\n\t        <button  [disabled]="loading" type="submit" class="btn btn-block btn-primary mb-0">\n\t        \t<span *ngIf="loading" class="spinner-border spinner-border-sm"></span>\n\t        \tLogin\n\t        </button>\n\t        <div class="text-center">\n\t          <div class="saprator my-4"><span>OR</span></div>\n\t          <p class="mb-2 text-muted">Forgot password? <a href="{{authService.forgotPasswordPath}}" class="f-w-400">Reset</a></p>\n\t          <p *ngIf="false" class="mb-0 text-muted">Don\'t have an account? <a href="{{authService.registerPath}}" class="f-w-400">Register</a></p>\n\t        </div>\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n</form>',styles:[""]})],y);let C=class{constructor(t,e,s,r,n){this.router=t,this.authService=e,this.toastr=s,this.tokenStorage=r,this.formBuilder=n,this.errorMessage="",this.submitted=!1,this.loading=!1}ngOnInit(){this.me=this.tokenStorage.getUser(),this.form=this.formBuilder.group({password:["",m.j.required]})}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(o.a.Messages.PASSWORD_REQUIRED,o.a.Title.FORM_VALIDATION):(this.loading=!0,this.authService.unlock(this.form.value).subscribe(t=>{this.tokenStorage.saveToken(t.token),this.tokenStorage.saveUser(t),this.toastr.success(o.a.Messages.LOGIN_SUCCESS,o.a.Title.LOGIN),this.router.navigate([this.authService.homePath])},t=>{this.errorMessage=i.a.handleError(t,o.a.Messages.LOGIN_FAILURE),this.toastr.error(this.errorMessage,o.a.Title.LOGIN)}).add(()=>{this.loading=!1}))}get f(){return this.form.controls}};C.ctorParameters=()=>[{type:c.f},{type:a.a},{type:d.b},{type:n.a},{type:m.b}],C=Object(r.c)([Object(l.Component)({selector:"app-lock",template:'<form (submit)="onSubmit()" class="form" name="form" [formGroup]="form" novalidate autocomplete="off">\n\t<div class="auth-wrapper">\n\t  <div class="auth-content">\n\t    <div class="auth-bg">\n\t      <span class="r"></span>\n\t      <span class="r s"></span>\n\t      <span class="r s"></span>\n\t      <span class="r"></span>\n\t    </div>\n\t    <div class="card">\n\t      <div class="card-body text-center">\n\t        <h5 class="mb-4">{{(me?.fullName | TitleCase) || \'XXXX XXXX\'}}</h5>\n\t        <img src="{{me?.icon || \'assets/images/user/default-user.png\'}}" class="img-radius mb-4" alt="User-Profile-Image">\n\t        <div class="mb-4 text-left">\n\t          <div class="form-group">\n\t\t\t\t\t<input class="form-control" placeholder="Enter password.." formControlName="password" \n\t\t\t\t\t\ttype="password" [ngClass]="{\'is-invalid\': submitted && f.password.errors}" autocomplete="off">\n\t\t\t\t\t<div *ngIf="submitted && f.password.errors" class="invalid-feedback">\n\t                    <div *ngIf="f.password.errors.required">Enter your password here</div>\n\t                </div>\n\t\t\t  </div>\n\t        </div>\n\t        <button [disabled]="loading" type="submit" class="btn btn-primary mb-4">\n\t        \t<span *ngIf="loading" class="spinner-border spinner-border-sm"></span>\n\t        \tUnlock\n\t        </button>\n\t        <p class="mb-0 text-muted">\n\t        \t{{\'Not \' + ((me?.fullName | lowercase) || \'XXXX XXXX\')}}? \n\t        \t<a href="#" (click)="authService.logout()">Logout</a>\n\t        </p>\n\t      </div>\n\t    </div>\n\t  </div>\n\t</div>\n</form>',styles:[""]})],C);var I=s("gG2O"),O=s("O2Uh");const P=[{path:"",redirectTo:"login",pathMatch:"full"},{path:"login",component:y,canActivate:[O.a]},{path:"forgot-password",component:S,canActivate:[O.a]},{path:"lock",component:C,canActivate:[I.a]},{path:"two-factor",component:p,canActivate:[I.a]}];let E=class{};E=Object(r.c)([Object(l.NgModule)({imports:[c.g.forChild(P)],exports:[c.g]})],E);let N=class{};N=Object(r.c)([Object(l.NgModule)({declarations:[y,u.a,h,S,C,p],imports:[E,v.CommonModule,f.a],exports:[u.a]})],N)}}]);