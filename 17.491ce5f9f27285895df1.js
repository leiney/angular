(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{XTeT:function(t,e,s){"use strict";s.r(e),s.d(e,"ComplianceModule",function(){return S});var a=s("mrSG"),r=s("ebz3"),i=s("fXoL"),n=s("ofXK"),o=s("/Uzn"),l=s("d+0u"),d=s("evKo"),c=s("tk/3"),h=s("AytR");const p=h.a.apiUrl+"compliance-bodies",b={headers:new c.f({"Content-Type":"application/json"})};let u=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(p+"?filter="+JSON.stringify(t),b)}get(t){return this.http.get(`${p}/${t}`)}create(t){return this.http.post(p,t,b)}update(t,e){return this.http.patch(`${p}/${t}`,e,b)}delete(t){return this.http.delete(`${p}/${t}`,b)}deleteAll(){return this.http.delete(p,b)}};u.ctorParameters=()=>[{type:c.b}],u=Object(a.c)([Object(i.Injectable)({providedIn:"root"})],u);var m=s("3Pt+"),g=s("tyNb"),v=s("5eHb"),f=s("SxV6");let y=class{constructor(t,e,s,a,r,i,n){this.formBuilder=t,this.route=e,this.router=s,this.dataService=a,this.orderBy=r,this.toastr=i,this.constants=n,this.pk="id",this.objects="Compliance Bodies",this.object="Body",this.parentUrl="/compliance/bodies",this.loading=!1,this.errorMessage="",this.submitted=!1}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Create":"Edit")+" "+this.object;new Date(Date.now());this.form=this.formBuilder.group({bodyName:["",m.j.required],bodyType:["",m.j.required],areas:this.formBuilder.array([])}),this.addRow(),this.addRow(),this.isAddMode||this.dataService.get(this.id).pipe(Object(f.a)()).subscribe(t=>{this.form.patchValue(t);const e=this.form.get("areas");for(let r=0;r<t.areas.length-e.length;r++)this.addRow();let s=this.orderBy.transform(t.areas,["areaName"]);this.form.patchValue({areas:s});let a=0;for(let r of e.controls){let t=s[a].complianceDate;r.patchValue({complianceDate:t?new Date(t):null}),a++}this.toastr.success(l.a.Messages.RECORD_LOADED,l.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:l.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl],{relativeTo:this.route})})}onSubmit(){return Object(a.b)(this,void 0,void 0,function*(){if(this.submitted=!0,this.form.invalid)return void this.toastr.error(l.a.Messages.FORM_ERROR_FOUND,l.a.Title.FORM_VALIDATION);let t=this.form.value,e=yield o.a.alertDelete(l.a.Title.RECORD_OPERATION,l.a.Messages.CONFIRM_SUBMIT);(null==e?void 0:e.value)&&(this.loading=!0,this.isAddMode?this.createRecord(this.form.value):this.updateRecord(t))})}createRecord(t){this.dataService.create(t).pipe(Object(f.a)()).subscribe(()=>{this.toastr.success(l.a.Messages.SAVE_SUCCESS,l.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.SAVE_FAILURE),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}updateRecord(t){this.dataService.update(this.id,t).pipe(Object(f.a)()).subscribe(()=>{this.toastr.success(l.a.Messages.UPDATE_SUCCESS,l.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:l.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}get f(){return this.form.controls}addRow(){this.form.get("areas").push(this.formBuilder.group({areaID:[""],areaCode:["",m.j.required],areaName:["",m.j.required],complianceDate:["",m.j.required],frequency:["",m.j.required],isEditable:[!0]}))}deleteRow(t){this.form.get("areas").removeAt(t)}get c(){return this.form.get("areas")}};y.ctorParameters=()=>[{type:m.b},{type:g.a},{type:g.f},{type:u},{type:d.a},{type:v.b},{type:l.a}],y=Object(a.c)([Object(i.Component)({selector:"add-body",template:'<div class="page-header">\n\t<h4 class="page-header-title">{{title}}</h4>\t\n    <ol class="breadcrumb">\n      <li class="breadcrumb-item"><a href="javascript:"><i class="feather icon-home"></i></a></li>\n      <li class="breadcrumb-item"><a routerLink="{{parentUrl}}">{{objects}}</a></li>\n      <li class="breadcrumb-item active" aria-current="page">{{title}}</li>\n    </ol>\n</div>\n<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" blockClass="table-border-style">\n\t\t\t<form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t\t\t    <div class="form-row">\t\t\t        \n\t\t\t        <div class="form-group col-sm-8">\n\t\t\t            <label>Enter Body Name*</label>\n\t\t\t            <input type="text" formControlName="bodyName"  placeholder="Enter compliance body name"\n\t\t\t            \tclass="form-control" [ngClass]="{ \'is-invalid\': submitted && f.bodyName.errors }"/>\n\t\t\t            <div *ngIf="submitted && f.bodyName.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.bodyName.errors.required">Compliance body name is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\t\n\t\t\t        <div class="form-group col-sm-4">\n\t\t\t            <label>Compliance Body Type*</label>\n\t\t\t            <select formControlName="bodyType" class="form-control" [ngClass]="{ \'is-invalid\': submitted && f.bodyType.errors }">\n\t\t\t                <option value="{{a.value}}" *ngFor="let a of constants.complianceBodyTypes">{{a.name}}</option>\n\t\t\t            </select>\n\t\t\t            <div *ngIf="submitted && f.bodyType.errors" class="invalid-feedback">\n\t\t\t                <div *ngIf="f.bodyType.errors.required">Compliance body type is required</div>\n\t\t\t            </div>\n\t\t\t        </div>\t \n\t\t\t\t</div>\n\t\t\t\t<div class="form-row">\t\n\t\t\t\t\t<div class="form-group col-sm-12">\n\t\t\t\t\t\t<label class="font-weight-bold">Add Compliance Areas</label>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class="table-responsive">\t\t\n\t\t\t        <table class="table table-borderless areas table-sm">\t\n\t\t\t        \t<thead>\t\n\t\t\t\t\t\t\t<tr>\t\t\t\t\n\t\t\t\t\t\t\t\t<th width="100">Code</th>\n\t\t\t\t\t\t\t\t<th>Compliance Area</th>\n\t\t\t\t\t\t\t\t<th width="100">Compliance Date</th>\n\t\t\t\t\t\t\t\t<th>Frequency</th>\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t<th class="text-right">\n\t\t\t\t\t                <a href="javascript:" (click)="addRow();">\n\t\t\t\t\t                \t<i class="feather icon-plus f-16 ml-3 text-primary"></i>\n\t\t\t\t\t                \tAdd Row\n\t\t\t\t\t                </a>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<ng-container formArrayName="areas" *ngFor="let group of c.controls; let i=index">\n\t\t\t\t\t\t\t<tr [formGroupName]="i">\t\t\t\t\t            \n\t\t\t\t\t            <td>\n\t\t\t\t\t\t\t\t\t<input class="form-control" type="text" formControlName="areaCode"\n\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.areaCode.errors }">\n\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.areaCode.errors" class="invalid-feedback">\n\t\t\t\t\t\t                <div *ngIf="group.controls.areaCode.errors.required">Area code is required</div>\n\t\t\t\t\t\t            </div>  \t      \n\t\t\t\t\t            </td>\t\n\t\t\t\t\t            <td>\n\t\t\t\t\t\t\t\t\t<input class="form-control" type="text" formControlName="areaName"\n\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.areaName.errors }">\n\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.areaName.errors" class="invalid-feedback">\n\t\t\t\t\t\t                <div *ngIf="group.controls.areaName.errors.required">Area name is required</div>\n\t\t\t\t\t\t            </div>  \t      \n\t\t\t\t\t            </td>\n\t\t\t\t\t            <td>\n\t\t\t\t\t\t\t\t\t<input class="form-control" type="text" formControlName="complianceDate"\n\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.complianceDate.errors }"\n\t\t\t\t\t                \t#datepickerYMD="bsDatepicker" bsDatepicker placement="top" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\' }">\n\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.complianceDate.errors" class="invalid-feedback">\n\t\t\t\t\t\t                <div *ngIf="group.controls.complianceDate.errors.required">Compliance date is required</div>\n\t\t\t\t\t\t            </div>  \t      \n\t\t\t\t\t            </td>\n\t\t\t\t\t            <td>\n\t\t\t\t\t\t\t\t\t<select formControlName="frequency" class="form-control" \n\t\t\t\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && group.controls.frequency.errors }">\n\t\t\t\t\t\t                <option value="{{a.value}}" *ngFor="let a of constants.frequencies">\n\t\t\t\t\t\t                \t{{a.name}}\n\t\t\t\t\t\t                </option>\n\t\t\t\t\t\t            </select>\n\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.frequency.errors" class="invalid-feedback">\n\t\t\t\t\t\t                <div *ngIf="group.controls.frequency.errors.required">Frequency is required</div>\n\t\t\t\t\t\t            </div>\t      \n\t\t\t\t\t            </td>\t\t\t\t\t\t            \t\n\t\t\t\t\t            <td class="text-right pt-4">\n\t\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRow(i)">\n\t\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t                \tDelete\n\t\t\t\t\t                </a>\n\t\t\t\t\t            </td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</ng-container>\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\t\t\t\t\n\t\t\t    <div class="form-group pt-4">\n\t\t\t\t\t<button type="button" [disabled]="loading" (click)="onSubmit()" class="btn btn-primary">\n\t\t\t\t\t\t<span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t\t\t\t\t\tSave\n\t\t\t\t\t</button>\n\t\t\t\t\t&nbsp;\n\t\t\t        <a routerLink="{{parentUrl}}" class="btn btn-link">Cancel</a>\n\t\t\t    </div>\n\t\t\t</form>\n\t\t</app-card>\n\t</div>\n</div>',styles:[".table.table-sm.areas td:first-child{\r\n\tpadding-left: 0px !important;\t\r\n}"]})],y);var O=s("FQmJ");let R=class{constructor(t,e,s,a,r,i){this.route=t,this.dataService=e,this.functions=s,this.constants=a,this.tokenService=r,this.toastr=i,this.pk="bodyID",this.title="Compliance Body",this.object="Compliance Body",this.editUrl="compliance/edit-body/",this.addUrl="compliance/add-body",this.errorMessage=null,this.filter={term:null}}ngOnInit(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)})}deleteRow(t){return Object(a.b)(this,void 0,void 0,function*(){let e=yield o.a.alertDelete(l.a.Title.RECORD_OPERATION,l.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(l.a.Messages.DELETE_SUCCESS,l.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=o.a.handleError(e,l.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}))})}};R.ctorParameters=()=>[{type:g.a},{type:u},{type:o.a},{type:l.a},{type:O.a},{type:v.b}],R=Object(a.c)([Object(i.Component)({selector:"compliance-bodies",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" cardClass="table-card" blockClass="p-0">\n\t      <div class="table-responsive">\n\t        <table class="table">\n\t          <tr>\n\t          \t<th>#</th>\n\t            <th>Compliance Body</th>\n\t            <th>Body Type</th>\n\t            <th>Areas</th>\n\t            <th class="text-center">\n\t            \t<a title="Add {{object}}" class="text-primary" routerLink="/{{addUrl}}">\n\t\t\t\t\t\t<i class="feather icon-plus"></i> Create New Body\n\t\t\t\t\t</a>\n\t            </th>\n\t          </tr>                \t\n\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t{{\n\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t}}\n\t\t\t\t</td>\n\t\t\t  </tr>\n\t          <tr template #elseBlock *ngFor="let row of rows | OrderBy:[\'-dueDate\'] ; let i=index">           \n\t            <td>{{i+1}}.</td>\n\t            <td>{{row.bodyName}}</td>\n\t            <td>{{row.bodyType | TitleCase}}</td>\n\t            <td>{{row?.areas?.length || 0}}</td>\n\t            <td class="text-center">\n\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t</a>\n\t\t\t\t\t&nbsp;\n\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\tArchive\n\t\t\t\t\t</a>\n\t\t\t\t</td>\n\t          </tr>\n\t  \t\t</table>\n\t  \t</div>\n\t  </app-card>\n\t</div>\n</div>',styles:[""]})],R);const D=h.a.apiUrl+"compliance-statuses",C={headers:new c.f({"Content-Type":"application/json"})};let E=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(D+"?filter="+JSON.stringify(t),C)}get(t){return this.http.get(`${D}/${t}`)}create(t){return this.http.post(D,t,C)}update(t,e){return this.http.patch(`${D}/${t}`,e,C)}delete(t){return this.http.delete(`${D}/${t}`,C)}deleteAll(){return this.http.delete(D,C)}};E.ctorParameters=()=>[{type:c.b}],E=Object(a.c)([Object(i.Injectable)({providedIn:"root"})],E);let I=class{constructor(t,e,s,a,r,i,n){this.route=t,this.bodyService=e,this.dataService=s,this.functions=a,this.constants=r,this.tokenService=i,this.toastr=n,this.pk="statusID",this.title="Compliance",this.object="Compliance",this.errorMessage=null,this.filter={term:null,bodyID:null,year:"",month:""},this.status={},this.rows=[],this.data={},this.bodyStatuses={},this.status=this.functions.objectify(this.constants.complianceStatus,"value")}ngOnInit(){this.route.queryParams.subscribe(t=>{let e=t.bodyID;this.filter.bodyID=e;let s=e?{bodyID:e}:{};e?this.bodyService.get(e).subscribe(t=>{this.data=t,this.rows=t.areas||[]},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}):(this.rows=[],this.bodyService.getAll().subscribe(t=>{this.data={};for(let e of t)this.rows=this.rows.concat(e.areas||[])},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)})),this.loadBodyStatus(s)})}loadBodyStatus(t){t&&0!=this.functions.countKeys(t)||(t={},this.filter.bodyID&&Object.assign(t,{bodyID:this.filter.bodyID})),this.filter.year&&Object.assign(t,{year:this.filter.year}),this.filter.month&&Object.assign(t,{month:this.filter.month}),this.dataService.getAll({where:t}).subscribe(t=>{this.bodyStatuses=this.functions.objectify(t,"areaID")},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)})}submitCompliance(t){return Object(a.b)(this,void 0,void 0,function*(){let e=yield o.a.alertDelete(l.a.Title.RECORD_OPERATION,l.a.Messages.CONFIRM_SUBMIT);if(null==e?void 0:e.value){let e={bodyID:this.filter.bodyID,areaID:t.areaCode,year:this.filter.year,month:this.filter.month,status:"compliant",effectiveFrom:new Date,effectiveTo:new Date};this.bodyStatuses[t.areaID]?this.dataService.update(t.statusID,e).subscribe(t=>{this.loadBodyStatus()},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}):this.dataService.create(e).subscribe(t=>{this.loadBodyStatus()},t=>{this.errorMessage=o.a.handleError(t,l.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)})}})}deleteRow(t){return Object(a.b)(this,void 0,void 0,function*(){let e=yield o.a.alertDelete(l.a.Title.RECORD_OPERATION,l.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(l.a.Messages.DELETE_SUCCESS,l.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=o.a.handleError(e,l.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,l.a.Title.RECORD_OPERATION)}))})}};I.ctorParameters=()=>[{type:g.a},{type:u},{type:E},{type:o.a},{type:l.a},{type:O.a},{type:v.b}],I=Object(a.c)([Object(i.Component)({selector:"compliance",template:'<div class="row">\n\t<div class="col-sm-12">\n\t\t<div class="card email-card">\n\t\t\t<div class="card-body">\n\t\t\t\t<div class="mail-body">\n\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t<div class="col-xl-2 col-md-3">\n\t\t\t\t\t\t\t<compliance-tabs selectedTab="{{filter.bodyID}}"></compliance-tabs>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class="col-xl-10 col-md-9 inbox-right">\n\t\t\t\t\t\t\t<div class="row">\n\t\t\t\t\t\t\t\t<div class="form-group col-md-8">\n\t\t\t\t\t\t\t\t\t<p>Compliance Areas - {{data?.bodyName || \' All Bodies\'}}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="form-group col-md-2">\n\t\t\t\t\t\t\t\t\t<select [(ngModel)]="filter.year" class="form-control pl-1 pr-0" (change)="loadBodyStatus()">\n\t\t\t\t\t\t\t\t\t\t<option value="">Year</option>\n\t\t\t\t\t\t\t\t\t    <option *ngFor="let year of functions.getYearsBefore(5)" value="{{year}}">{{year}}</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class="form-group col-md-2">\n\t\t\t\t\t\t\t\t\t<select [(ngModel)]="filter.month" class="form-control pl-1 pr-0" (change)="loadBodyStatus()">\n\t\t\t\t\t\t\t\t\t\t<option value="">Month</option>\n\t\t\t\t\t\t\t\t\t    <option *ngFor="let month of functions.getMonths()" value="{{month}}">{{month}}</option>\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class="table-responsive">\n\t\t\t\t\t\t\t\t<table class="table table-bordered table-sm nowhitespace">\n\t\t\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t\t\t\t<th>Compliance Area</th>\n\t\t\t\t\t\t\t\t\t\t\t<th class="text-center">Status</th>\n\t\t\t\t\t\t\t\t\t\t\t<th class="text-right">Actions</th>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t<tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t\t\t\t\t\t<td class="text-center" colspan="100%">{{ errorMessage?\n\t\t\t\t\t\t\t\t\t\t\t\terrorMessage : (\'Search could not find any \'+\n\t\t\t\t\t\t\t\t\t\t\t\ttitle.toLowerCase() + \' records\') }}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t\t<tr template #elseBlock\n\t\t\t\t\t\t\t\t\t\t\t*ngFor="let row of rows | OrderBy:[\'areaName\']; let i=index;">\n\t\t\t\t\t\t\t\t\t\t\t<td>{{i+1}}.</td>\n\t\t\t\t\t\t\t\t\t\t\t<td><a type="button">{{row.areaName}}</a></td>\n\t\t\t\t\t\t\t\t\t\t\t<td class="text-center">\n\t\t\t\t\t\t\t\t\t\t\t\t<span class="{{status[(bodyStatuses[row.areaCode]?.status || \'pending\')]?.badge}}">\n\t\t\t\t\t\t\t\t\t\t\t\t\t{{bodyStatuses[row.areaCode]?.status || \'Pending\'}}\n\t\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td class="text-right">\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\t\t\t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass="text-danger" [disabled]="row?.isDeleting" type="button"\n\t\t\t\t\t\t\t\t\t\t\t\t\ttitle="Archive {{object}}" (click)="deleteRow(row)"> \n\t\t\t\t\t\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclass="spinner-border spinner-border-sm"></span> \n\t\t\t\t\t\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i class="feather icon-trash"></i>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</span> Archive\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t\t\t\t\t<a *ngIf="bodyStatuses[row?.areaCode]?.status!=\'compliant\'"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass="text-success" type="button" (click)="submitCompliance(row)">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<span class="fa fa-check"></span>&nbsp;Comply\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t\t<a *ngIf="bodyStatuses[row?.areaCode]?.status==\'compliant\'"\n\t\t\t\t\t\t\t\t\t\t\t\t\tclass="text-default" type="button">\n\t\t\t\t\t\t\t\t\t\t\t\t\tNone\n\t\t\t\t\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</table>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>',styles:[""]})],I);var T=s("gG2O");const w=[{path:"",redirectTo:"status",pathMatch:"full"},{path:"bodies",component:R,canActivate:[T.a]},{path:"add-body",component:y,canActivate:[T.a],data:{roles:["admin"]}},{path:"edit-body/:id",component:y,canActivate:[T.a],data:{roles:["admin"]}},{path:"status",component:I,canActivate:[T.a]}];let M=class{};M=Object(a.c)([Object(i.NgModule)({imports:[g.g.forChild(w)],exports:[g.g]})],M);let N=class{constructor(t){this.complianceBodyService=t,this.selectedTab="",this.parentUrl="/compliance/status",this.approvalTypes=[],this.tabs=[],this.title="Compliance"}ngOnInit(){this.complianceBodyService.getAll().subscribe(t=>{this.tabs.push({id:"",name:"ALL",path:this.parentUrl,params:[]});for(let e in t){let s=t[e],a={bodyID:s.bodyID};this.tabs.push({id:s.bodyID,name:s.bodyName,path:this.parentUrl,params:a})}})}};N.ctorParameters=()=>[{type:u}],N.propDecorators={selectedTab:[{type:i.Input}]},N=Object(a.c)([Object(i.Component)({selector:"compliance-tabs",template:'<ul class="mb-2 nav nav-tab flex-column nav-pills" id="v-pills-tab" role="tablist" aria-orientation="vertical">\r\n   <li class="nav-item mail-section" *ngFor="let t of tabs">\r\n     <a class="nav-link text-left" [ngClass]="{\'active\':(t?.id==selectedTab)}" \r\n     \tdata-toggle="pill" role="tab" aria-controls="v-pills-home" aria-selected="false"\r\n     \trouterLink="{{t?.path}}" [queryParams]="t?.params">\r\n       <span><i class="feather icon-book"></i>{{t?.name}}</span>\r\n     </a>\r\n   </li>\r\n</ul>',styles:[""]})],N);let S=class{};S=Object(a.c)([Object(i.NgModule)({declarations:[I,R,y,N],imports:[n.CommonModule,M,r.a]})],S)}}]);