(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"DRm/":function(t,e,r){"use strict";r.r(e),r.d(e,"AuditingModule",function(){return N});var s=r("mrSG"),n=r("ebz3"),o=r("fXoL"),a=r("ofXK"),i=r("njyG"),l=r("1kSV"),c=r("tk/3");const d=r("AytR").a.apiUrl+"audit-logs",h={headers:new c.f({"Content-Type":"application/json"})};let u=class{constructor(t){this.http=t,this.formValues={}}getAll(t){return t=t||{},this.http.get(d+"?filter="+JSON.stringify(t),h)}get(t){return this.http.get(`${d}/${t}`)}create(t){return this.http.post(d,t,h)}update(t,e){return this.http.patch(`${d}/${t}`,e,h)}delete(t){return this.http.delete(`${d}/${t}`,h)}deleteAll(){return this.http.delete(d,h)}findByName(t){return this.http.get(`${d}?searchTerm=${t}`,h)}};u.ctorParameters=()=>[{type:c.b}],u=Object(s.c)([Object(o.Injectable)({providedIn:"root"})],u);var p=r("FQmJ"),g=r("VITL"),m=r("d+0u"),f=r("/Uzn"),y=r("5eHb"),b=r("tyNb"),v=r("r6MX"),w=r("LvDl");let O=class extends v.a{constructor(t,e,r,s,n,o,a){super(),this.route=t,this.tokenService=e,this.constants=r,this.functions=s,this.userService=n,this.dataService=o,this.toastr=a,this.pk="id",this.title="Resource Logs",this.object="Resource Log",this.rows=[],this.errorMessage=null,this.filter={term:null,userID:"",resourceType:"",order:["actedAt DESC"]},this.resourcesTypes=[],this.users={rows:[],obj:{}},this.order.actedAt="DESC"}ngOnInit(){this.loadRecords(),this.userService.getAll().subscribe(t=>{this.users.rows=t,this.users.obj=this.functions.objectify(t,"id")});this.dataService.getAll({fields:["actedOn"],where:{actedOn:{nin:["LOGIN_SUCCESS","LOGIN_FAILURE"]}}}).subscribe(t=>{this.resourcesTypes=w.uniq(w.map(t,"actedOn"))})}loadRecords(){let t=this.filter.term,e={actedOn:{nin:["LOGIN_SUCCESS","LOGIN_FAILURE"]}};""!=this.filter.resourceType.trim()&&(e.actedOn=this.filter.resourceType),""!=this.filter.userID.trim()&&(e.actor=this.filter.userID),t&&""!=t.trim()&&(e.after={like:t.trim(),options:"i"}),this.dataService.getAll({where:e,order:this.filter.order}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=f.a.handleError(t,m.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,m.a.Title.RECORD_OPERATION)})}};O.ctorParameters=()=>[{type:b.a},{type:p.a},{type:m.a},{type:f.a},{type:g.a},{type:u},{type:y.b}],O=Object(s.c)([Object(o.Component)({selector:"activity-log",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n  \t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  \t<auditing-tabs selectedPath="/auditing/activity-logs"></auditing-tabs>\n\t\t\t<div class="form-row">\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.resourceType" class="form-control"\n\t\t\t\t\t\t(change)="loadRecords()">\n\t\t\t\t\t\t<option value="">Search By Resource</option>\n\t\t\t\t\t    <option *ngFor="let resource of resourcesTypes" value="{{resource}}">\n\t\t\t\t\t    \t{{resource}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.userID" class="form-control"\n\t\t\t\t\t\t(change)="loadRecords()">\n\t\t\t\t\t\t<option value="">Search By User</option>\n\t\t\t\t\t    <option *ngFor="let user of users.rows" value="{{user.userID}}">\n\t\t\t\t\t    \t{{user.fullName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\n\t\t\t\t\t<input class="form-control" placeholder="Search {{title}} Here.." [(ngModel)]="filter.term"\n\t\t\t\t\t\t(keyup)="($event.keyCode == 13 ? loadRecords() : null)"/>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm logs">\n\t\t          <thead>\n\t\t\t          <tr class="cursor">\n\t\t\t          \t<th (click)="setSortAction(\'actedAt\')" width="180">\n\t\t\t          \t\t<span class="{{getSortIcon(\'actedAt\')}}"></span>\n\t\t\t          \t\tAction Date\n\t\t\t          \t</th>\t\t  \n\t\t\t\t\t\t<th (click)="setSortAction(\'actedOn\')">\n\t\t\t\t\t\t\t<span class="{{getSortIcon(\'actedOn\')}}"></span>\n\t\t\t\t\t\t\tType\n\t\t\t\t\t\t</th>\n\t\t\t\t\t\t<th>Resource Name</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th width="200">Actor\'s Name</th>\n\t\t\t\t\t\t<th>Action</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term |\n\t\t\t          \t\tKeyFilter:\'resources\':filter.resourceID | KeyFilter:\'users\':filter.userID |  \n\t\t\t          \t\tOrderBy:[\'fullName\']; let i=index;">\n\t\t\t\t\t\t\t<td>{{row?.actedAt | date:\'dd-MMM-yyyy hh:mm a\'}}</td>\n\t\t\t\t\t\t\t<td>{{row.actedOn}}</td>\n\t\t\t\t\t\t\t<td>{{(row?.after || row?.before)[row?.actionKey] || \'-\'}}</td>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<td>{{users.obj[row.actor]?.fullName}}</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<span class="badge badge-success" *ngIf="row?.action?.indexOf(\'INSERT\')>-1">\n\t\t\t\t\t\t\t\t\tinsert\t\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class="badge badge-warning" *ngIf="row?.action?.indexOf(\'UPDATE\')>-1">\n\t\t\t\t\t\t\t\t\tupdate\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t<span class="badge badge-danger" *ngIf="row?.action?.indexOf(\'DELETE\')>-1">\n\t\t\t\t\t\t\t\t\tdelete\n\t\t\t\t\t\t\t\t</span>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[".logs.table td, .logs.table th{\r\n\twhite-space: initial !important;\r\n\tpadding: 0.5rem 0.5rem;\r\n}"]})],O);let S=class extends O{constructor(t,e,r,s,n,o,a){super(t,e,r,s,n,o,a),this.route=t,this.tokenService=e,this.constants=r,this.functions=s,this.userService=n,this.dataService=o,this.toastr=a}loadRecords(){let t=this.filter.term,e={actedOn:"LOGIN_SUCCESS"};""!=this.filter.userID.trim()&&(e.actor=this.filter.userID),t&&""!=t.trim()&&(e.resourceName={like:t.trim(),options:"i"}),this.dataService.getAll({where:e,order:this.filter.order}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=f.a.handleError(t,m.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,m.a.Title.RECORD_OPERATION)})}};S.ctorParameters=()=>[{type:b.a},{type:p.a},{type:m.a},{type:f.a},{type:g.a},{type:u},{type:y.b}],S=Object(s.c)([Object(o.Component)({selector:"success-logins",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n  \t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  \t<auditing-tabs selectedPath="/auditing/success-logins"></auditing-tabs>\n\t\t\t<div class="form-row">\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.userID" class="form-control"\n\t\t\t\t\t\t(change)="loadRecords()">\n\t\t\t\t\t\t<option value="">Search By User</option>\n\t\t\t\t\t    <option *ngFor="let user of users.rows" value="{{user.userID}}">\n\t\t\t\t\t    \t{{user.fullName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-8 col-sm-12">\n\t\t\t\t\t<input class="form-control" placeholder="Search {{title}} Here.." [(ngModel)]="filter.term"\n\t\t\t\t\t\t(keyup)="($event.keyCode == 13 ? loadRecords() : null)"/>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm logs">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t          \t<th>Action Date</th>\n\t\t\t          \t<th>Action Time</th>\t\t  \n\t\t\t\t\t\t<th>Credentials Used</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th width="200">Target Account</th>\n\t\t\t\t\t\t<th>IP Address</th>\t\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term |\n\t\t\t          \t\tKeyFilter:\'resources\':filter.resourceID | KeyFilter:\'users\':filter.userID |  \n\t\t\t          \t\tOrderBy:[\'fullName\']; let i=index;">\n\t\t\t\t\t\t\t<td>{{row?.actedAt | date:\'dd-MMM-yyyy\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.actedAt | date:\'hh:mm a\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.after[row.actionKey] || \'-\'}}</td>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<td>{{users.obj[row.actor]?.fullName || \'Anonymous\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.after[\'host\'] || \'-\'}}</td>\n\t\t\t\t\t\t</tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[".logs.table td, .logs.table th{\r\n\twhite-space: initial !important;\r\n\tpadding: 0.5rem 0.5rem;\r\n}"]})],S);let I=class extends O{constructor(t,e,r,s,n,o,a){super(t,e,r,s,n,o,a),this.route=t,this.tokenService=e,this.constants=r,this.functions=s,this.userService=n,this.dataService=o,this.toastr=a}loadRecords(){let t=this.filter.term,e={actedOn:"LOGIN_FAILURE"};""!=this.filter.userID.trim()&&(e.actor=this.filter.userID),t&&""!=t.trim()&&(e.resourceName={like:t.trim(),options:"i"}),this.dataService.getAll({where:e,order:this.filter.order}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=f.a.handleError(t,m.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,m.a.Title.RECORD_OPERATION)})}};I.ctorParameters=()=>[{type:b.a},{type:p.a},{type:m.a},{type:f.a},{type:g.a},{type:u},{type:y.b}],I=Object(s.c)([Object(o.Component)({selector:"failed-logins",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n  \t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t\t  \t<auditing-tabs selectedPath="/auditing/failed-logins"></auditing-tabs>\n\t\t\t<div class="form-row">\n\t\t\t\t<div class="form-group col-md-4 col-sm-12">\n\t\t\t\t\t<select [(ngModel)]="filter.userID" class="form-control"\n\t\t\t\t\t\t(change)="loadRecords()">\n\t\t\t\t\t\t<option value="">Search By User</option>\n\t\t\t\t\t    <option *ngFor="let user of users.rows" value="{{user.userID}}">\n\t\t\t\t\t    \t{{user.fullName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t\t\t</div>\n\t\t\t\t<div class="form-group col-md-8 col-sm-12">\n\t\t\t\t\t<input class="form-control" placeholder="Search {{title}} Here.." [(ngModel)]="filter.term"\n\t\t\t\t\t\t(keyup)="($event.keyCode == 13 ? loadRecords() : null)"/>\n\t\t\t\t</div>\n\t\t\t</div>\t\t\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm logs">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t          \t<th>Action Date</th>\n\t\t\t          \t<th>Action Time</th>\t\t  \n\t\t\t\t\t\t<th>Credentials Used</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th width="200">Target Account</th>\n\t\t\t\t\t\t<th>IP Address</th>\t\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase())\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term |\n\t\t\t          \t\tKeyFilter:\'resources\':filter.resourceID | KeyFilter:\'users\':filter.userID |  \n\t\t\t          \t\tOrderBy:[\'fullName\']; let i=index;">\n\t\t\t\t\t\t\t<td>{{row?.actedAt | date:\'dd-MMM-yyyy\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.actedAt | date:\'hh:mm a\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.after[row.actionKey] || \'-\'}}</td>\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<td>{{users.obj[row.actor]?.fullName || \'Anonymous\'}}</td>\n\t\t\t\t\t\t\t<td>{{row?.after[\'host\'] || \'-\'}}</td>\n\t\t\t\t\t\t</tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[".logs.table td, .logs.table th{\r\n\twhite-space: initial !important;\r\n\tpadding: 0.5rem 0.5rem;\r\n}"]})],I);var A=r("gG2O");const R=[{path:"",redirectTo:"logs",pathMatch:"full"},{path:"activity-logs",component:O,canActivate:[A.a]},{path:"failed-logins",component:I,canActivate:[A.a]},{path:"success-logins",component:S,canActivate:[A.a]}];let D=class{};D=Object(s.c)([Object(o.NgModule)({imports:[b.g.forChild(R)],exports:[b.g]})],D);let M=class{constructor(){this.tabs=[{name:"Resource Logs",path:"/auditing/activity-logs"},{name:"Successful Logins",path:"/auditing/success-logins"},{name:"Failed Logins",path:"/auditing/failed-logins"}],this.title="Activity Auditing"}ngOnInit(){}};M.ctorParameters=()=>[],M.propDecorators={selectedPath:[{type:o.Input}]},M=Object(s.c)([Object(o.Component)({selector:"auditing-tabs",template:'<h5 class="mb-3">{{title}}</h5>\n<ul class="nav nav-tabs">\n  <li class="nav-item" *ngFor="let t of tabs">\n  \t<a class="nav-link" [ngClass]="{\'active\':(t?.path==selectedPath)}" routerLink="{{t?.path}}">{{t?.name}}</a>\n  </li>\n</ul>\n',styles:[""]})],M);let N=class{};N=Object(s.c)([Object(o.NgModule)({declarations:[O,M,I,S],imports:[a.CommonModule,D,n.a,i.a,l.h]})],N)}}]);