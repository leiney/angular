(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{iS0A:function(t,e,n){"use strict";n.r(e),n.d(e,"MeetingsModule",function(){return dt});var s=n("mrSG"),i=n("fXoL");class a{constructor(t,e,n){this.x=t,this.y=e,this.time=n||Date.now()}distanceTo(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))}equals(t){return this.x===t.x&&this.y===t.y&&this.time===t.time}velocityFrom(t){return this.time!==t.time?this.distanceTo(t)/(this.time-t.time):0}}class r{constructor(t,e,n,s,i,a){this.startPoint=t,this.control2=e,this.control1=n,this.endPoint=s,this.startWidth=i,this.endWidth=a}static fromPoints(t,e){const n=this.calculateControlPoints(t[0],t[1],t[2]).c2,s=this.calculateControlPoints(t[1],t[2],t[3]).c1;return new r(t[1],n,s,t[2],e.start,e.end)}static calculateControlPoints(t,e,n){const s=t.x-e.x,i=t.y-e.y,r=e.x-n.x,o=e.y-n.y,l=(t.x+e.x)/2,d=(t.y+e.y)/2,c=(e.x+n.x)/2,h=(e.y+n.y)/2,m=Math.sqrt(s*s+i*i),p=Math.sqrt(r*r+o*o),u=p/(m+p),g=c+(l-c)*u,v=h+(d-h)*u,f=e.x-g,b=e.y-v;return{c1:new a(l+f,d+b),c2:new a(c+f,h+b)}}length(){let t,e,n=0;for(let s=0;s<=10;s+=1){const i=s/10,a=this.point(i,this.startPoint.x,this.control1.x,this.control2.x,this.endPoint.x),r=this.point(i,this.startPoint.y,this.control1.y,this.control2.y,this.endPoint.y);if(s>0){const s=a-t,i=r-e;n+=Math.sqrt(s*s+i*i)}t=a,e=r}return n}point(t,e,n,s,i){return e*(1-t)*(1-t)*(1-t)+3*n*(1-t)*(1-t)*t+3*s*(1-t)*t*t+i*t*t*t}}class o{constructor(t,e={}){this.canvas=t,this.options=e,this._handleMouseDown=t=>{1===t.which&&(this._mouseButtonDown=!0,this._strokeBegin(t))},this._handleMouseMove=t=>{this._mouseButtonDown&&this._strokeMoveUpdate(t)},this._handleMouseUp=t=>{1===t.which&&this._mouseButtonDown&&(this._mouseButtonDown=!1,this._strokeEnd(t))},this._handleTouchStart=t=>{if(t.preventDefault(),1===t.targetTouches.length){const e=t.changedTouches[0];this._strokeBegin(e)}},this._handleTouchMove=t=>{t.preventDefault();const e=t.targetTouches[0];this._strokeMoveUpdate(e)},this._handleTouchEnd=t=>{if(t.target===this.canvas){t.preventDefault();const e=t.changedTouches[0];this._strokeEnd(e)}},this.velocityFilterWeight=e.velocityFilterWeight||.7,this.minWidth=e.minWidth||.5,this.maxWidth=e.maxWidth||2.5,this.throttle="throttle"in e?e.throttle:16,this.minDistance="minDistance"in e?e.minDistance:5,this.dotSize=e.dotSize||function(){return(this.minWidth+this.maxWidth)/2},this.penColor=e.penColor||"black",this.backgroundColor=e.backgroundColor||"rgba(0,0,0,0)",this.onBegin=e.onBegin,this.onEnd=e.onEnd,this._strokeMoveUpdate=this.throttle?function(t,e=250){let n,s,i,a=0,r=null;const o=()=>{a=Date.now(),r=null,n=t.apply(s,i),r||(s=null,i=[])};return function(...l){const d=Date.now(),c=e-(d-a);return s=this,i=l,c<=0||c>e?(r&&(clearTimeout(r),r=null),a=d,n=t.apply(s,i),r||(s=null,i=[])):r||(r=window.setTimeout(o,c)),n}}(o.prototype._strokeUpdate,this.throttle):o.prototype._strokeUpdate,this._ctx=t.getContext("2d"),this.clear(),this.on()}clear(){const{_ctx:t,canvas:e}=this;t.fillStyle=this.backgroundColor,t.clearRect(0,0,e.width,e.height),t.fillRect(0,0,e.width,e.height),this._data=[],this._reset(),this._isEmpty=!0}fromDataURL(t,e={},n){const s=new Image,i=e.ratio||window.devicePixelRatio||1,a=e.width||this.canvas.width/i,r=e.height||this.canvas.height/i;this._reset(),s.onload=()=>{this._ctx.drawImage(s,0,0,a,r),n&&n()},s.onerror=t=>{n&&n(t)},s.src=t,this._isEmpty=!1}toDataURL(t="image/png",e){return"image/svg+xml"===t?this._toSVG():this.canvas.toDataURL(t,e)}on(){this.canvas.style.touchAction="none",this.canvas.style.msTouchAction="none",window.PointerEvent?this._handlePointerEvents():(this._handleMouseEvents(),"ontouchstart"in window&&this._handleTouchEvents())}off(){this.canvas.style.touchAction="auto",this.canvas.style.msTouchAction="auto",this.canvas.removeEventListener("pointerdown",this._handleMouseDown),this.canvas.removeEventListener("pointermove",this._handleMouseMove),document.removeEventListener("pointerup",this._handleMouseUp),this.canvas.removeEventListener("mousedown",this._handleMouseDown),this.canvas.removeEventListener("mousemove",this._handleMouseMove),document.removeEventListener("mouseup",this._handleMouseUp),this.canvas.removeEventListener("touchstart",this._handleTouchStart),this.canvas.removeEventListener("touchmove",this._handleTouchMove),this.canvas.removeEventListener("touchend",this._handleTouchEnd)}isEmpty(){return this._isEmpty}fromData(t){this.clear(),this._fromData(t,({color:t,curve:e})=>this._drawCurve({color:t,curve:e}),({color:t,point:e})=>this._drawDot({color:t,point:e})),this._data=t}toData(){return this._data}_strokeBegin(t){const e={color:this.penColor,points:[]};"function"==typeof this.onBegin&&this.onBegin(t),this._data.push(e),this._reset(),this._strokeUpdate(t)}_strokeUpdate(t){if(0===this._data.length)return void this._strokeBegin(t);const e=t.clientX,n=t.clientY,s=this._createPoint(e,n),i=this._data[this._data.length-1],a=i.points,r=a.length>0&&a[a.length-1],o=!!r&&s.distanceTo(r)<=this.minDistance,l=i.color;if(!r||!r||!o){const t=this._addPoint(s);r?t&&this._drawCurve({color:l,curve:t}):this._drawDot({color:l,point:s}),a.push({time:s.time,x:s.x,y:s.y})}}_strokeEnd(t){this._strokeUpdate(t),"function"==typeof this.onEnd&&this.onEnd(t)}_handlePointerEvents(){this._mouseButtonDown=!1,this.canvas.addEventListener("pointerdown",this._handleMouseDown),this.canvas.addEventListener("pointermove",this._handleMouseMove),document.addEventListener("pointerup",this._handleMouseUp)}_handleMouseEvents(){this._mouseButtonDown=!1,this.canvas.addEventListener("mousedown",this._handleMouseDown),this.canvas.addEventListener("mousemove",this._handleMouseMove),document.addEventListener("mouseup",this._handleMouseUp)}_handleTouchEvents(){this.canvas.addEventListener("touchstart",this._handleTouchStart),this.canvas.addEventListener("touchmove",this._handleTouchMove),this.canvas.addEventListener("touchend",this._handleTouchEnd)}_reset(){this._lastPoints=[],this._lastVelocity=0,this._lastWidth=(this.minWidth+this.maxWidth)/2,this._ctx.fillStyle=this.penColor}_createPoint(t,e){const n=this.canvas.getBoundingClientRect();return new a(t-n.left,e-n.top,(new Date).getTime())}_addPoint(t){const{_lastPoints:e}=this;if(e.push(t),e.length>2){3===e.length&&e.unshift(e[0]);const t=this._calculateCurveWidths(e[1],e[2]),n=r.fromPoints(e,t);return e.shift(),n}return null}_calculateCurveWidths(t,e){const n=this.velocityFilterWeight*e.velocityFrom(t)+(1-this.velocityFilterWeight)*this._lastVelocity,s=this._strokeWidth(n),i={end:s,start:this._lastWidth};return this._lastVelocity=n,this._lastWidth=s,i}_strokeWidth(t){return Math.max(this.maxWidth/(t+1),this.minWidth)}_drawCurveSegment(t,e,n){const s=this._ctx;s.moveTo(t,e),s.arc(t,e,n,0,2*Math.PI,!1),this._isEmpty=!1}_drawCurve({color:t,curve:e}){const n=this._ctx,s=e.endWidth-e.startWidth,i=2*Math.floor(e.length());n.beginPath(),n.fillStyle=t;for(let a=0;a<i;a+=1){const t=a/i,n=t*t,r=n*t,o=1-t,l=o*o,d=l*o;let c=d*e.startPoint.x;c+=3*l*t*e.control1.x,c+=3*o*n*e.control2.x,c+=r*e.endPoint.x;let h=d*e.startPoint.y;h+=3*l*t*e.control1.y,h+=3*o*n*e.control2.y,h+=r*e.endPoint.y;const m=Math.min(e.startWidth+r*s,this.maxWidth);this._drawCurveSegment(c,h,m)}n.closePath(),n.fill()}_drawDot({color:t,point:e}){const n=this._ctx,s="function"==typeof this.dotSize?this.dotSize():this.dotSize;n.beginPath(),this._drawCurveSegment(e.x,e.y,s),n.closePath(),n.fillStyle=t,n.fill()}_fromData(t,e,n){for(const s of t){const{color:t,points:i}=s;if(i.length>1)for(let n=0;n<i.length;n+=1){const s=i[n],r=new a(s.x,s.y,s.time);this.penColor=t,0===n&&this._reset();const o=this._addPoint(r);o&&e({color:t,curve:o})}else this._reset(),n({color:t,point:i[0]})}}_toSVG(){const t=this._data,e=Math.max(window.devicePixelRatio||1,1),n=this.canvas.width/e,s=this.canvas.height/e,i=document.createElementNS("http://www.w3.org/2000/svg","svg");i.setAttribute("width",this.canvas.width.toString()),i.setAttribute("height",this.canvas.height.toString()),this._fromData(t,({color:t,curve:e})=>{const n=document.createElement("path");if(!(isNaN(e.control1.x)||isNaN(e.control1.y)||isNaN(e.control2.x)||isNaN(e.control2.y))){const s=`M ${e.startPoint.x.toFixed(3)},${e.startPoint.y.toFixed(3)} C ${e.control1.x.toFixed(3)},${e.control1.y.toFixed(3)} ${e.control2.x.toFixed(3)},${e.control2.y.toFixed(3)} ${e.endPoint.x.toFixed(3)},${e.endPoint.y.toFixed(3)}`;n.setAttribute("d",s),n.setAttribute("stroke-width",(2.25*e.endWidth).toFixed(3)),n.setAttribute("stroke",t),n.setAttribute("fill","none"),n.setAttribute("stroke-linecap","round"),i.appendChild(n)}},({color:t,point:e})=>{const n=document.createElement("circle"),s="function"==typeof this.dotSize?this.dotSize():this.dotSize;n.setAttribute("r",s.toString()),n.setAttribute("cx",e.x.toString()),n.setAttribute("cy",e.y.toString()),n.setAttribute("fill",t),i.appendChild(n)});const a=`<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 ${n} ${s}" width="${n}" height="${s}">`;let r=i.innerHTML;if(void 0===r){const t=document.createElement("dummy"),e=i.childNodes;t.innerHTML="";for(let n=0;n<e.length;n+=1)t.appendChild(e[n].cloneNode(!0));r=t.innerHTML}return"data:image/svg+xml;base64,"+btoa(a+r+"</svg>")}}var l=o;class d{constructor(t){this.elementRef=t,this.options=this.options||{},this.drawStart=new i.EventEmitter,this.drawEnd=new i.EventEmitter}ngAfterContentInit(){const t=this.getCanvas();this.options.canvasHeight&&(t.height=this.options.canvasHeight),this.options.canvasWidth&&(t.width=this.options.canvasWidth),this.signaturePad=new l(t,this.options),this.signaturePad.onBegin=this.onBegin.bind(this),this.signaturePad.onEnd=this.onEnd.bind(this)}ngOnDestroy(){const t=this.getCanvas();t.width=0,t.height=0}redrawCanvas(){const t=this.getCanvas(),e=Math.max(window.devicePixelRatio||1,1);t.width=t.offsetWidth*e,t.height=t.offsetHeight*e,t.getContext("2d").scale(e,e),this.signaturePad.clear()}toData(){return this.signaturePad?this.signaturePad.toData():[]}fromData(t){this.signaturePad.fromData(t)}toDataURL(t,e){return this.signaturePad.toDataURL(t,e)}fromDataURL(t,e={}){!e.hasOwnProperty("height")&&this.options.canvasHeight&&(e.height=this.options.canvasHeight),!e.hasOwnProperty("width")&&this.options.canvasWidth&&(e.width=this.options.canvasWidth),this.signaturePad.fromDataURL(t,e)}clear(){this.signaturePad.clear()}isEmpty(){return this.signaturePad.isEmpty()}off(){this.signaturePad.off()}on(){this.signaturePad.on()}set(t,e){const n=this.getCanvas();switch(t){case"canvasHeight":n.height=e;break;case"canvasWidth":n.width=e;break;default:this.signaturePad[t]=e}}onBegin(t){this.drawStart.emit(t)}onEnd(t){this.drawEnd.emit(t)}getSignaturePad(){return this.signaturePad}getCanvas(){return this.elementRef.nativeElement.querySelector("canvas")}}d.\u0275fac=function(t){return new(t||d)(i["\u0275\u0275directiveInject"](i.ElementRef))},d.\u0275cmp=i["\u0275\u0275defineComponent"]({type:d,selectors:[["signature-pad"]],inputs:{options:"options"},outputs:{drawStart:"drawStart",drawEnd:"drawEnd"},decls:1,vars:0,consts:[[1,"signature-pad-canvas"]],template:function(t,e){1&t&&i["\u0275\u0275element"](0,"canvas",0)},styles:["[_nghost-%COMP%]{background:#faebd7;display:flex;align-items:center;justify-content:center}[_nghost-%COMP%]   .signature-pad-canvas[_ngcontent-%COMP%]{border:1px solid grey}"]}),d.ctorParameters=()=>[{type:i.ElementRef}],d.propDecorators={options:[{type:i.Input}],drawStart:[{type:i.Output}],drawEnd:[{type:i.Output}]};class c{}c.\u0275fac=function(t){return new(t||c)},c.\u0275mod=i["\u0275\u0275defineNgModule"]({type:c}),c.\u0275inj=i["\u0275\u0275defineInjector"]({imports:[[]]}),("undefined"==typeof ngJitMode||ngJitMode)&&i["\u0275\u0275setNgModuleScope"](c,{declarations:[d],exports:[d]});var h=n("sTQN"),m=n("ebz3"),p=n("ofXK"),u=n("/Uzn"),g=n("d+0u"),v=n("tk/3"),f=n("AytR");const b=f.a.apiUrl+"meetings",y={headers:new v.f({"Content-Type":"application/json"})};let w=class{constructor(t){this.http=t,this.formValues={}}setFormValues(t){Object.assign(this.formValues,t)}getAll(t){return t=t||{},this.http.get(b+"?filter="+JSON.stringify(t),y)}get(t){return this.http.get(`${b}/${t}`)}create(t){return this.http.post(b,t,y)}update(t,e){return this.http.patch(`${b}/${t}`,e,y)}updateAllowance(t,e,n){return this.http.patch(`${b}/update-allowance/${t}`,{attendeeID:e,allowance:n},y)}delete(t){return this.http.delete(`${b}/${t}`,y)}deleteAll(){return this.http.delete(b,y)}findByTitle(t){return this.http.get(`${b}?MeetingTitle=${t}`,y)}markRollcall(t,e,n){return this.http.patch(`${b}/mark-rollcall/${t}`,{attendeeID:e,rollCall:n},y)}conflictOfInterest(t,e,n){let s={attendeeID:e,conflictOfInterest:n};return this.http.patch(`${b}/conflict-of-interest/${t}`,s,y)}sendRsvp(t,e,n){return this.http.patch(`${b}/send-rsvp/${t}`,{attendeeID:e,rsvp:n},y)}openDiscussion(t,e,n){return this.http.post(`${b}/open-discussion/${t}`,{agendaNumber:e,companyID:n},y)}};w.ctorParameters=()=>[{type:v.b}],w=Object(s.c)([Object(i.Injectable)({providedIn:"root"})],w);var T=n("VITL"),I=n("FQmJ"),M=n("V22Z"),S=n("r6MX"),O=n("5eHb"),D=n("tyNb");let x=class extends S.a{constructor(t,e,n,s,i,a,r,o){super(),this.route=t,this.teamService=e,this.tokenService=n,this.userService=s,this.dataService=i,this.constants=a,this.functions=r,this.toastr=o,this.pk="meetingID",this.title="Meetings",this.object="Meeting",this.detailUrl="meetings/details/",this.editUrl="meetings/edit/",this.addUrl="meetings/create",this.rows=[],this.errorMessage=null,this.filter={term:null,meetingTypeID:null,order:["meetingDate DESC"]},this.status={},this.order.meetingDate="DESC",this.status=this.functions.objectify(this.constants.meetingStatus,"value")}ngOnInit(){this.route.queryParams.subscribe(t=>{let e=t.meetingTypeID;this.filter.meetingTypeID=e,this.loadRecords()})}loadRecords(){let t=this.filter.meetingTypeID?{meetingTypeID:this.filter.meetingTypeID}:{};t=Object.assign(t,{isArchived:{neq:"Y"}}),this.dataService.getAll({where:t,order:this.filter.order}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}deleteRow(t){return Object(s.b)(this,void 0,void 0,function*(){let e=yield u.a.alertDelete(g.a.Title.RECORD_OPERATION,g.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(g.a.Messages.DELETE_SUCCESS,g.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=u.a.handleError(e,g.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}))})}};x.ctorParameters=()=>[{type:D.a},{type:M.a},{type:I.a},{type:T.a},{type:w},{type:g.a},{type:u.a},{type:O.b}],x=Object(s.c)([Object(i.Component)({selector:"meetings",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" cardClass="table-card" blockClass="p-0">\n\t      <div class="table-responsive">\n\t      \t<meeting-tabs selectedTab="{{filter.meetingTypeID}}"></meeting-tabs>\n\t        <table class="table">\n\t          <tr class="cursor">\n\t          \t<th>#</th>\n\t            <th (click)="setSortAction(\'meetingSubject\')">\n\t            \t<span class="{{getSortIcon(\'meetingSubject\')}}"></span>Subject\n\t            </th>\n\t            <th (click)="setSortAction(\'meetingDate\')">\n\t            \t<span class="{{getSortIcon(\'meetingDate\')}}"></span>Date\n\t            </th>\n\t            <th (click)="setSortAction(\'startTime\')">\n\t            \t<span class="{{getSortIcon(\'startTime\')}}"></span>Time\n\t            </th>\n\t            <th class="text-center">Status</th>\n\t            <th class="text-right">\n\t            \t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t            \t\ttitle="Add {{object}}" class="text-primary" routerLink="/{{addUrl}}">\n\t\t\t\t\t\t<i class="feather icon-plus"></i> Create {{object}}\n\t\t\t\t\t</a>\n\t\t\t\t\t<span *ngIf="tokenService.getUserType()!=constants.userTypes.admin.name">\n\t\t\t\t\t\tActions\n\t\t\t\t\t</span>\n\t            </th>\n\t          </tr>                \t\n\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t{{\n\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t}}\n\t\t\t\t</td>\n\t\t\t  </tr>\n\t          <tr template #elseBlock *ngFor="let row of rows; let i=index">           \n\t            <td>{{i+1}}.</td>\n\t            <td><a routerLink="/{{detailUrl + row[pk]}}">{{row.meetingSubject}}</a></td>\t \n\t            <td>{{row?.meetingDate | date:\'dd-MMM-yyyy\'}}</td>\n\t            <td><span class="label label-primary">{{row.startTime}}</span></td>\n\t            <td class="text-center">\n\t            \t<span class="{{status[row?.meetingStatus]?.badge}}">{{row.meetingStatus}}</span>\n\t            </td>\n\t            <td class="text-right">\n\t            \t<a  *ngIf="[\'published\',\'ongoing\'].indexOf(row.meetingStatus)>-1" title="View {{object}}" \n\t            \t\tclass="text-primary" routerLink="/{{detailUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-eye"></i> Open\n\t\t\t\t\t</a>\n\t\t\t\t\t<a  *ngIf="row.meetingStatus==\'pending\' &&\n\t\t\t\t\t\ttokenService.getUserType()==constants.userTypes.admin.name" title="Edit {{object}}" \n\t\t\t\t\t\tclass="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t</a>\n\t\t\t\t\t&nbsp;\t\t\t\t\t\n\t\t\t\t\t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t\t\t\t\t\tclass="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\ttitle="Archive {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\tArchive\n\t\t\t\t\t</a>\n\t            </td>\n\t          </tr>\n\t  \t\t</table>\n\t  \t</div>\n\t  </app-card>\n\t</div>\n</div>',styles:[""]})],x);let A=class extends x{constructor(t,e,n,s,i,a,r,o){super(t,e,n,s,i,a,r,o),this.route=t,this.teamService=e,this.tokenService=n,this.userService=s,this.dataService=i,this.constants=a,this.functions=r,this.toastr=o}loadRecords(){let t=this.filter.meetingTypeID?{meetingTypeID:this.filter.meetingTypeID}:{};t=Object.assign(t,{isArchived:"Y"}),this.dataService.getAll({where:t,order:this.filter.order}).subscribe(t=>{this.rows=t},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}};A.ctorParameters=()=>[{type:D.a},{type:M.a},{type:I.a},{type:T.a},{type:w},{type:g.a},{type:u.a},{type:O.b}],A=Object(s.c)([Object(i.Component)({selector:"meeting-archives",template:'<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="true" cardClass="table-card" blockClass="p-0">\n\t      <div class="table-responsive">\n\t      \t<meeting-tabs parentUrl="/meetings/archives" selectedTab="{{filter.meetingTypeID}}"></meeting-tabs>\n\t        <table class="table">\n\t          <tr class="cursor">\n\t          \t<th>#</th>\n\t            <th (click)="setSortAction(\'meetingSubject\')">\n\t            \t<span class="{{getSortIcon(\'meetingSubject\')}}"></span>Subject\n\t            </th>\n\t            <th (click)="setSortAction(\'meetingDate\')">\n\t            \t<span class="{{getSortIcon(\'meetingDate\')}}"></span>Date\n\t            </th>\n\t            <th (click)="setSortAction(\'startTime\')">\n\t            \t<span class="{{getSortIcon(\'startTime\')}}"></span>Time\n\t            </th>\n\t            <th class="text-center">Status</th>\n\t            <th class="text-right">\n\t            \t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t            \t\ttitle="Add {{object}}" class="text-primary" routerLink="/{{addUrl}}">\n\t\t\t\t\t\t<i class="feather icon-plus"></i> Create {{object}}\n\t\t\t\t\t</a>\n\t\t\t\t\t<span *ngIf="tokenService.getUserType()!=constants.userTypes.admin.name">\n\t\t\t\t\t\tActions\n\t\t\t\t\t</span>\n\t            </th>\n\t          </tr>                \t\n\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t{{\n\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t}}\n\t\t\t\t</td>\n\t\t\t  </tr>\n\t          <tr template #elseBlock *ngFor="let row of rows; let i=index">           \n\t            <td>{{i+1}}.</td>\n\t            <td><a routerLink="/{{detailUrl + row[pk]}}">{{row.meetingSubject}}</a></td>\t \n\t            <td>{{row?.meetingDate | date:\'dd-MMM-yyyy\'}}</td>\n\t            <td><span class="label label-primary">{{row.startTime}}</span></td>\n\t            <td class="text-center">\n\t            \t<span class="{{status[row?.meetingStatus]?.badge}}">{{row.meetingStatus}}</span>\n\t            </td>\n\t            <td class="text-right">\n\t            \t<a  *ngIf="[\'published\',\'ongoing\'].indexOf(row.meetingStatus)>-1" title="View {{object}}" \n\t            \t\tclass="text-primary" routerLink="/{{detailUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-eye"></i> Open\n\t\t\t\t\t</a>\n\t\t\t\t\t<a  *ngIf="row.meetingStatus==\'pending\' &&\n\t\t\t\t\t\ttokenService.getUserType()==constants.userTypes.admin.name" title="Edit {{object}}" \n\t\t\t\t\t\tclass="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t</a>\t\n\t\t\t\t\t&nbsp;\t\t\t\t\n\t\t\t\t\t<a *ngIf="tokenService.getUserType()==constants.userTypes.admin.name"\n\t\t\t\t\t\tclass="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\ttitle="Unarchive {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\tUnarchive\n\t\t\t\t\t</a>\n\t            </td>\n\t          </tr>\n\t  \t\t</table>\n\t  \t</div>\n\t  </app-card>\n\t</div>\n</div>',styles:[""]})],A);let C=class{constructor(t,e,n,s,i,a,r){this.dataService=t,this.tokenStorage=e,this.functions=n,this.constants=s,this.router=i,this.toastr=a,this.route=r,this.pk="meetingID",this.title="Rsvp Confirmation",this.object="Meeting",this.parentUrl="login",this.errorMessage=""}ngOnInit(){this.id=this.route.snapshot.params.id,this.loadRsvpConfirm()}loadRsvpConfirm(){return Object(s.b)(this,void 0,void 0,function*(){let t=this.route.snapshot.queryParams.attendeeID||null,e=this.route.snapshot.queryParams.tenant||null,n=this.route.snapshot.queryParams.rsvp||"pnd";this.tokenStorage.saveClientCode(e);let s=yield u.a.alertDelete(this.title,g.a.Messages.RSVP_CONFIRM+" i.e. that you are "+this.constants.rsvp[n].name.toLowerCase());(null==s?void 0:s.value)&&t?this.dataService.sendRsvp(this.id,t,n).subscribe(()=>{this.toastr.success(g.a.Messages.RSVP_SUCCESS,this.title),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RSVP_FAILURE),this.toastr.error(this.errorMessage,this.title),this.router.navigate([this.parentUrl])}):this.router.navigate([this.parentUrl])})}};C.ctorParameters=()=>[{type:w},{type:I.a},{type:u.a},{type:g.a},{type:D.f},{type:O.b},{type:D.a}],C=Object(s.c)([Object(i.Component)({selector:"app-confirm-rsvp",template:"",styles:[""]})],C);const R=f.a.apiUrl+"meeting-types",E={headers:new v.f({"Content-Type":"application/json"})};let N=class{constructor(t){this.http=t}getAll(t){return t=t||{},this.http.get(R+"?filter="+JSON.stringify(t),E)}get(t){return this.http.get(`${R}/${t}`)}create(t){return this.http.post(R,t,E)}update(t,e){return this.http.patch(`${R}/${t}`,e,E)}delete(t){return this.http.delete(`${R}/${t}`,E)}deleteAll(){return this.http.delete(R,E)}findByType(t){return this.http.get(`${R}?meetingTypeTitle=${t}`,E)}};N.ctorParameters=()=>[{type:v.b}],N=Object(s.c)([Object(i.Injectable)({providedIn:"root"})],N);var k=n("3Pt+"),_=n("SxV6");let U=class{constructor(t,e,n,s,i,a){this.formBuilder=t,this.route=e,this.router=n,this.dataService=s,this.toastr=i,this.constants=a,this.pk="meetingTypeID",this.object="Meeting Type",this.parentUrl="/meetings/types",this.editUrl="/meetings/edit-type/",this.loading=!1,this.errorMessage="",this.submitted=!1,this.rows=[],this.filter={term:null}}loadRecords(){this.dataService.getAll().subscribe(t=>{this.rows=t},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}initForm(){this.form=this.formBuilder.group({meetingTypeName:["",k.j.required],enabled:["Y",k.j.required],position:[0]})}ngOnInit(){this.id=this.route.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.initForm(),this.route.params.subscribe(t=>{this.id=t.id,this.isAddMode||this.dataService.get(this.id).pipe(Object(_.a)()).subscribe(t=>{this.form.patchValue(t),this.toastr.success(g.a.Messages.RECORD_LOADED,g.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=t.message?t.message:g.a.Messages.RECORDS_NOT_FOUND,this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])})}),this.loadRecords()}onSubmit(){this.submitted=!0,this.form.invalid?this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION):(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())}createRecord(){this.dataService.create(this.form.value).pipe(Object(_.a)()).subscribe(()=>{this.toastr.success(g.a.Messages.SAVE_SUCCESS,g.a.Title.RECORD_OPERATION),this.initForm(),this.loadRecords(),this.meetingTypeName.clear(),this.meetingTypeName.focus()},t=>{this.errorMessage=t.message?t.message:g.a.Messages.SAVE_FAILURE,this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}updateRecord(){this.dataService.update(this.id,this.form.value).pipe(Object(_.a)()).subscribe(()=>{this.toastr.success(g.a.Messages.UPDATE_SUCCESS,g.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])},t=>{this.errorMessage=t.message?t.message:g.a.Messages.UPDATE_FAILURE,this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1,this.submitted=!1})}deleteRow(t){return Object(s.b)(this,void 0,void 0,function*(){let e=yield u.a.alertDelete(g.a.Title.RECORD_OPERATION,g.a.Messages.CONFIRM_DELETE);(null==e?void 0:e.value)&&(Object.assign(t,{isDeleting:!0}),this.dataService.delete(t[this.pk]).subscribe(e=>{Object.assign(t,{isDeleting:!1}),this.rows=this.rows.filter(e=>e[this.pk]!==t[this.pk]),this.toastr.success(g.a.Messages.DELETE_SUCCESS,g.a.Title.RECORD_OPERATION)},e=>{Object.assign(t,{isDeleting:!1}),this.errorMessage=u.a.handleError(e,g.a.Messages.DELETE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}))})}get f(){return this.form.controls}};U.ctorParameters=()=>[{type:k.b},{type:D.a},{type:D.f},{type:N},{type:O.b},{type:g.a}],U.propDecorators={meetingTypeName:[{type:i.ViewChild,args:["meetingTypeName"]}]},U=Object(s.c)([Object(i.Component)({selector:"app-meeting-types",template:'<div class="row">\n  \t<div class="col-xl-12 col-md-12">\n\t\t<app-card [hidHeader]="true" cardClass="tab-card">\n\t      <form [formGroup]="form" (ngSubmit)="onSubmit()">\n\t        <div class="form-row">\n\t          <div class="form-group col-md-9 col-sm-12">\n\t            <input type="text" formControlName="meetingTypeName" class="form-control" #meetingTypeName\n\t                [ngClass]="{ \'is-invalid\': submitted && f.meetingTypeName.errors }" placeholder="Enter new meeting type to save"/>\n\t            <div *ngIf="submitted && f.meetingTypeName.errors" class="invalid-feedback">\n\t              <div *ngIf="f.meetingTypeName.errors.required">Meeting type is required</div>\n\t            </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12 text-right">\n\t            <div class="text-right">\n\t              <a routerLink="{{parentUrl}}" class="btn btn-danger">Cancel</a>\n\t              &nbsp;\n\t              <button [disabled]="loading" class="btn btn-primary">\n\t                <span *ngIf="loading" class="spinner-border spinner-border-sm mr-1"></span>\n\t                {{isAddMode? \'Add\' : \'Save\'}} Type\n\t              </button>\n\t            </div>\n\t          </div>\n\t        </div>\n\t      </form>\n\t\t\t<div class="table-responsive">\n\t\t        <table class="table table-sm">\n\t\t          <thead>\n\t\t\t          <tr>\n\t\t\t            <th>#</th>\n\t\t\t            <th>Meeting Type</th>\n\t\t\t            <th class="text-center">Active</th>\n\t\t\t            <th class="text-right">Actions</th>\n\t\t\t          </tr>\n\t\t          </thead>\n\t\t          <tbody>          \t\n\t\t\t\t\t  <tr *ngIf="!rows || rows.length==0">\n\t\t\t\t\t\t<td class="text-center" colspan="100%">\n\t\t\t\t\t\t\t{{\n\t\t\t\t\t\t\t\terrorMessage? errorMessage :\n\t\t\t\t\t\t\t\t(\'Search could not find any \'+ title.toLowerCase() + \' records\')\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</td>\n\t\t\t\t\t  </tr>\n\t\t\t          <tr template #elseBlock *ngFor="let row of rows | RandomSearch:filter.term | OrderBy:[\'meetingTypeName\'];let i=index;">\n\t\t\t            <td>{{ (i+1) }}</td>\n\t\t\t            <td>{{ row.meetingTypeName }}</td>\n\t\t\t            <td class="text-center">{{ row.enabled }}</td>\t\t            \n\t\t\t           \t<td class="text-right">\n\t\t\t\t\t\t\t<a title="Edit {{object}}" class="text-primary" routerLink="/{{editUrl + row[pk]}}">\n\t\t\t\t\t\t\t\t<i class="feather icon-edit"></i> Edit\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t<a class="text-danger" [disabled]="row?.isDeleting" type="button" \n\t\t\t\t\t\t\t\ttitle="Delete {{object}}" (click)="deleteRow(row)">\n\t\t\t\t\t\t\t\t<span *ngIf="row?.isDeleting" class="spinner-border spinner-border-sm"></span>\n\t\t\t\t\t\t\t\t<span *ngIf="!row?.isDeleting"><i class="feather icon-trash"></i></span>\n\t\t\t\t\t\t\t\tArchive\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</td>\n\t\t\t          </tr>\n\t\t          </tbody>\n\t\t        </table>\n\t       </div>\n    \t</app-card>\n  \t</div>\n </div>',styles:[""]})],U);let P=class{constructor(t,e,n,s,i,a,r){this.userService=t,this.dataService=e,this.formBuilder=n,this.toastr=s,this.route=i,this.functions=a,this.router=r,this.pk="meetingID",this.object="Meeting",this.parentUrl="/meetings/list",this.loading=!1,this.errorMessage=""}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"meetings/create":"meetings/edit/"+this.id;!this.isAddMode||this.dataService.formValues?(this.form=this.formBuilder.group({in_attendance:this.formBuilder.array([])}),this.dataService.formValues.in_attendance?this.populateMany():this.addRow()):this.router.navigate([t])}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION),!1):(this.dataService.setFormValues(this.form.value),this.form.valid)}wsOnNext(){return!0}wsOnPrevious(){return!0}populateMany(){let t=this.form.get("in_attendance").length,e=this.dataService.formValues.in_attendance.length,n=e>t?e-t:0,s=t>e?t-e:0;for(let a=0;a<n;a++)this.addRow();for(let a=0;a<s;a++)this.deleteRow(a);let i=this.dataService.formValues.in_attendance;this.form.patchValue({in_attendance:i})}addRow(){const t=this.form.get("in_attendance");t.push(this.formBuilder.group({id:[t.length+1],fullName:["",k.j.required],phoneNo:[""],email:[""],position:[""],rsvp:["pnd"],rollCall:["N"],isEditable:[!0]}))}deleteRow(t){this.form.get("in_attendance").removeAt(t)}get c(){return this.form.get("in_attendance")}};P.ctorParameters=()=>[{type:T.a},{type:w},{type:k.b},{type:O.b},{type:D.a},{type:u.a},{type:D.f}],P=Object(s.c)([Object(i.Component)({selector:"app-in-attendance",template:'<form [formGroup]="form">\t\n\t<div class="row">\t\n\t\t<div class="col-md-12 col-sm-12">\n\t\t\t<div class="table-responsive">\t\t\n\t\t        <table class="table table-borderless table-sm nopadding">\t\t\n\t\t\t\t\t<tr>\t\t\t\t\n\t\t\t\t\t\t<th width="50">No.</th>\n\t\t\t\t\t\t<th>Full Name</th>\n\t\t\t\t\t\t<th width="200">Position</th>\n\t\t\t\t\t\t<th>Email Address</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th class="text-right">\n\t\t\t                <a href="javascript:" (click)="addRow();">\n\t\t\t                \t<i class="feather icon-plus f-16 ml-3 text-c-green"></i>\n\t\t\t                </a>\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<ng-container formArrayName="in_attendance" *ngFor="let group of c.controls; let i=index">\n\t\t\t\t\t\t<tr [formGroupName]="i">\t\n\t\t\t\t\t\t\t<td>\n\t\t\t\t                {{group.controls.id.value}}\n\t\t\t\t            </td>\t\t\t\t\t            \n\t\t\t\t            <td>\t\t\t\t            \t\t\t\n\t\t\t\t                <input class="form-control" type="text" formControlName="fullName"\n\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.fullName.errors }"\n\t\t\t\t                \tplaceholder="Full name">\n\t\t\t\t\t            <div *ngIf="submitted && group.controls.fullName.errors" class="invalid-feedback">\n\t\t\t\t\t                <div *ngIf="group.controls.fullName.errors.required">Full name is required</div>\n\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t</td> \n\t\t\t\t\t\t\t<td>\t\t\t\t            \t\t\t\n\t\t\t\t\t            <input class="form-control" type="text" formControlName="position"\n\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.position.errors }"\n\t\t\t\t                \tplaceholder="Position">\n\t\t\t\t\t            <div *ngIf="submitted && group.controls.position.errors" class="invalid-feedback">\n\t\t\t\t\t                <div *ngIf="group.controls.position.errors.required">Position is required</div>\n\t\t\t\t\t            </div> \n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t            \t\t\t<input type="text" formControlName="email" class="form-control" \n\t\t\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && group.controls.email.errors }"\n\t\t\t\t\t            \tplaceholder="Email address"/>\n\t\t\t\t\t            <div *ngIf="submitted && group.controls.email.errors" class="invalid-feedback">\n\t\t\t\t\t                <div *ngIf="group.controls.email.errors.required">Email is required</div>\n\t\t\t\t\t                <div *ngIf="group.controls.email.errors.email">Email must be a valid email address</div>\n\t\t\t\t\t            </div>   \n\t\t\t\t            </td>\t\t\t\t\t\t            \t\n\t\t\t\t            <td class="text-right pt-3">\n\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRow(i)">\n\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t\t\t                \tRemove\n\t\t\t\t                </a>\n\t\t\t\t            </td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<a class="btn btn-primary" href="javascript:" (click)="addRow();">\n     \t<i class="feather icon-plus"></i>\n     \tAdd Row\n    </a>\t\t\n</form>',styles:[""]})],P);var j=n("feko"),F=n("9+1D"),L=n("XhZV");n("eLdt");let V=class extends L.a{constructor(t,e,n,s,i,a,r,o,l,d,c,h,m){super(h,s,i,a,r,o,c),this.dataService=t,this.meetingTypeService=e,this.teamService=n,this.uploadService=s,this.companyService=i,this.tokenService=a,this.constants=r,this.functions=o,this.formBuilder=l,this.router=d,this.toastr=c,this.route=h,this.datePipe=m,this.pk="meetingID",this.object="Meeting",this.parentUrl="/meetings/list",this.loading=!1,this.errorMessage="",this.meetingTypes=[],this.teams={}}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object,this.form=this.formBuilder.group({inviteMessage:[""]}),this.teamService.getAll().subscribe(t=>{this.teams=this.functions.objectify(t,"teamID")}),this.meetingTypeService.getAll().subscribe(t=>{this.meetingTypes=t});let t={"extraData.meetingID":this.id||null,"extraData.isMailAttachment":"Y"};this.documents=[],this.uploadService.getAll({where:t}).subscribe(t=>{this.documents=t},t=>{this.documents=[]})}wsIsValid(){return!0}wsOnNext(){return!0}wsOnPrevious(){return!0}onSubmit(t){return Object(s.b)(this,void 0,void 0,function*(){if(this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid)return this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION),!1;let e={meetingStatus:t?"published":"pending",inviteMessage:this.inviteMessage};this.dataService.setFormValues(Object.assign(this.form.value,e));let n=yield u.a.alertDelete(g.a.Title.RECORD_OPERATION,g.a.Messages.CONFIRM_SUBMIT);(null==n?void 0:n.value)&&(this.loading=!0,this.isAddMode?this.createRecord():this.updateRecord())})}createRecord(){this.dataService.create(this.dataService.formValues).pipe(Object(_.a)()).subscribe(t=>{this.toastr.success(g.a.Messages.SAVE_SUCCESS,g.a.Title.RECORD_OPERATION),this.uploadFilesAndFolders(t.meetingID,this.dataService.formValues)},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}updateRecord(){this.dataService.update(this.id,this.dataService.formValues).pipe(Object(_.a)()).subscribe(()=>{this.toastr.success(g.a.Messages.UPDATE_SUCCESS,g.a.Title.RECORD_OPERATION),this.uploadFilesAndFolders(this.id,this.dataService.formValues)},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.SAVE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)}).add(()=>{this.loading=!1})}handleAttachments(t){for(let e of t.target.files)this.addMetaInfo(e),Object.assign(e.data,{extraData:{isMailAttachment:"Y"}}),this.uploadService.selectedFiles.push(e)}uploadFilesAndFolders(t,e){let n=e.quarter,s=this.meetingTypes.filter(t=>t.meetingTypeID==e.meetingTypeID),i=s.length>0?s[0].meetingTypeName:null,a=this.datePipe.transform(e.meetingDate,"yyyy.MM.dd"),r=e.attendeeTeams.length>0?e.attendeeTeams[0]:null,o=r&&this.teams[r]?this.teams[r]:{teamName:null},l={moduleCode:this.constants.moduleCodes.mtn.name,year:(new Date).getFullYear(),resourceName:a+" "+e.meetingSubject,companyID:e.companyID};this.uploadService.getYearDirectory(l.moduleCode,l.year,l.resourceName,l.companyID,i,n,o.teamName,e.attendees).subscribe(e=>{this.uploadFiles(e.companyID,e.moduleCode,e.resourceID,{meetingID:t}),this.dataService.formValues={},this.router.navigate([this.parentUrl])})}get f(){return this.form.controls}};V.ctorParameters=()=>[{type:w},{type:N},{type:M.a},{type:F.a},{type:j.a},{type:I.a},{type:g.a},{type:u.a},{type:k.b},{type:D.f},{type:O.b},{type:D.a},{type:p.DatePipe}],V=Object(s.c)([Object(i.Component)({selector:"app-invitation-message",template:'<div class="row">\n  <div class="col-sm-12">\n    \t<form [formGroup]="form">    \t\t\n\t\t\t<div class="form-row">\n\t\t       <div class="form-group col-md-12">\n\t\t          <label for="inviteMessage">\n\t\t          \t<span class="font-weight-bold">Invitation Message</span> \n\t\t          \t(System will use default message if you skip this section):\n\t\t          </label>\n\t\t          <app-tinymce [(ngModel)]=\'inviteMessage\' #tinymce=\'tinymce\' [ngModelOptions]="{standalone: true}"></app-tinymce>\t\t          \n\t\t          <div *ngIf="submitted && f.inviteMessage.errors" class="invalid-feedback">\n\t\t\t        <div *ngIf="f.inviteMessage.errors.required">Invitation message is required</div>\n\t\t\t      </div>\n\t\t      </div>\n\t\t      <div class="col-md-12 pb-3">\t\t\t      \n\t\t      \t\x3c!-- Show Already Uploaded Mail Attachments --\x3e\n\t            <div *ngIf="documents && documents.length>0" class="file-upload">\n\t            \t<div *ngFor="let f of documents; let m = index;">\n\t            \t\t<div *ngIf="f.extraData?.isMailAttachment==\'Y\'">\n\t\t\t            \t<a href="javascript;">\n\t\t\t            \t\t<span class="{{ functions.getResourceIcon(f.mimeType) }} mr-2 ml-2"></span>\n\t\t\t            \t\t{{f.resourceName}}\n\t\t\t            \t</a>\t\n\t\t\t            \t<span class="cursor" (click)="deleteResource(f)" title="Remove this file"\n\t\t\t            \t\t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t                </span>\t\t\n\t\t                </div>\t            \t\n\t            \t</div>\t\t\t            \t\t\t            \t\n\t            </div>     \n\t            \x3c!-- Show Already Uploaded Mail Attachments --\x3e\n\t            \t      \n\t\t      \t\x3c!-- Show Selected Mail Attachments For Upload --\x3e\n\t            <div *ngIf="uploadService.selectedFiles && uploadService.selectedFiles.length>0">\n\t            \t<div *ngFor="let f of uploadService.selectedFiles; let m = index;">\n\t            \t\t<div *ngIf="f?.data.extraData?.isMailAttachment==\'Y\'">\n\t\t\t            \t<a href="javascript;">\n\t\t\t            \t\t<span class="{{ functions.getResourceIcon(f.data.mimeType) }} mr-2 ml-2"></span>\n\t\t\t            \t\t{{f.data.resourceName}}\n\t\t\t            \t</a>\t\n\t\t\t            \t<span class="cursor" (click)="removeFiles(m)" title="Remove this file"\n\t\t\t            \t\t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t                </span>\t\t\n\t\t                </div>\t            \t\n\t            \t</div>\t\t\t            \t\t\t            \t\n\t            </div>     \n\t            \x3c!-- Show Selected Mail Attachments For Upload --\x3e\t            \n\t\t      </div>\n\t\t    </div>\n\t\t    <input type="file" multiple="true" style="display: none" #fileInput \n\t\t    \t(change)="handleAttachments($event)"/>\n\t\t\t<button type="button" (click)="fileInput.click()" class="btn btn-danger">\n\t\t\t\t<span class="fa fa-paperclip"></span>&nbsp;Attachments\n\t\t\t</button>\n\t\t    &nbsp;\n\t\t\t<button type="button" (click)="wsIsValid() && onSubmit()" class="btn btn-warning">Temporary Save</button>\n\t\t\t&nbsp;\n\t\t\t<button type="button" (click)="wsIsValid() && onSubmit(true)" class="btn btn-primary">Publish Meeting</button>\n      </form>\n  </div>\n</div>\n',styles:[""]})],V);const q=f.a.apiUrl+"payments",B={headers:new v.f({"Content-Type":"application/json"})};let $=class{constructor(t){this.http=t}getPaymentItems(t,e){return e=e||{},this.http.get(q+"/get-items/"+t+"?filter="+JSON.stringify(e),B)}postAllowances(t,e){return this.http.post(q+"/post-allowances/"+t,e,B)}};$.ctorParameters=()=>[{type:v.b}],$=Object(s.c)([Object(i.Injectable)({providedIn:"root"})],$);var W=n("Vq9z"),Y=n("u0kB"),H=n("evKo"),z=n("LvDl"),G=n.n(z);let J=class extends L.a{constructor(t,e,n,s,i,a,r,o,l,d,c,h,m,p,u,g,v){super(u,r,i,a,h,c,p),this.formBuilder=t,this.dataService=e,this.topicService=n,this.reportService=s,this.companyService=i,this.tokenService=a,this.uploadService=r,this.meetingTypeService=o,this.teamService=l,this.paymentService=d,this.functions=c,this.constants=h,this.router=m,this.toastr=p,this.route=u,this.orderBy=g,this.datePipe=v,this.signaturePadOptions={minWidth:2,canvasWidth:300,canvasHeight:140,backgroundColor:"#ffffff"},this.pk="meetingID",this.title="Meeting Details",this.object="Meeting",this.objects="Meetings",this.parentUrl="/meetings/list",this.reportUrl="/meetings/report/",this.documentUrl="/resources/open/",this.editUrl="/meetings/edit/",this.browseUrl="/resources/folders",this.parentID="",this.loading=!1,this.submitted=!1,this.errorMessage="",this.data={},this.areaNumber="",this.answers={},this.graph=[],this.venueTypes={},this.meetingTypes={},this.minutesContent={},this.currentTopic={},this.documents=[],this.teams={},this.paymentItems=[],this.selectedItems={},this.currentAttendee={},this.rsvp=[],this.venueTypes=this.functions.objectify(this.constants.meetingVenueType,"value"),this.rsvp=this.functions.indexify(this.constants.rsvp,!0),this.rsvp=this.rsvp.filter(t=>["att","nta","abw"].indexOf(t.code)>-1)}onResetAttendee(){this.currentAttendee={conflictOfInterest:{answer:"None",comments:null,signature:null}}}drawComplete(t){}drawStart(t){}ngOnInit(){this.selectedCompany=this.tokenService.getSelectedCompany(),this.id=this.route.snapshot.params.id,this.uploadService.selectedFiles=[],this.onResetAttendee(),this.loadDetails(),this.paymentService.getPaymentItems(this.id).subscribe(t=>{this.paymentItems=t}),this.teamService.getAll().subscribe(t=>{this.teams=this.functions.objectify(t,"teamID")}),this.meetingTypeService.getAll().subscribe(t=>{this.meetingTypes=this.functions.objectify(t,"meetingTypeID")})}loadDetails(){this.signaturePad&&this.signaturePad.clear(),this.dataService.get(this.id).pipe(Object(_.a)()).subscribe(t=>{let e=t.minutesUploadType||"T";this.data=Object.assign(t,{minutesUploadType:e});for(let n=0;n<this.data.attendees.length;n++){let t=this.data.attendees[n].conflictOfInterest||this.currentAttendee.conflictOfInterest;this.data.attendees[n]=Object.assign(this.data.attendees[n],{conflictOfInterest:t})}this.selectedItems="object"==typeof t.paymentItems?t.paymentItems:{},this.initializeMinutes()},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])}),this.uploadService.getAll({where:{"extraData.meetingID":this.id||null}}).subscribe(t=>{this.documents=t,this.parentID=t.length>0?t[0].parentID:""},t=>{this.documents=[]})}markRollcall(t,e){let n=e.rollCall,s=n||"nta",i="att"==n?"nta":"att",a=e?[e.id]:z.map(this.data.attendees,"id");this.dataService.markRollcall(this.id,a,n).subscribe(()=>{e&&Object.assign(e,{rollCall:n,rsvp:s}),this.loadDetails(),this.toastr.success(g.a.Messages.ROLLCALL_SUCCESS,g.a.Title.RECORD_OPERATION)},t=>{Object.assign(e,{rollCall:i}),this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}declareConflictofInterest(t,e,n=!1){let s="Yes"==e?"None":"Yes",i=(t?[t.id]:this.currentAttendee.attendeeID)||z.map(this.data.attendees,"id");if(n){let n=Object.assign(this.currentAttendee.conflictOfInterest,t.conflictOfInterest||{});n.comments="Yes"!=e?"None":n.comments,this.currentAttendee={attendeeID:i,conflictOfInterest:n},this.declareInterestModal.show()}this.currentAttendee.conflictOfInterest.answer=e,!n&&this.signaturePad&&(this.currentAttendee.conflictOfInterest.signature=this.signaturePad.toDataURL()),this.dataService.conflictOfInterest(this.id,i,this.currentAttendee.conflictOfInterest).subscribe(()=>{this.loadDetails(),n||(this.declareInterestModal.hide(),this.onResetAttendee()),this.toastr.success(g.a.Messages.DECLARE_INTEREST_SUCCESS,g.a.Title.RECORD_OPERATION)},t=>{this.currentAttendee.conflictOfInterest.answer=s,this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),n||this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}saveMinutesType(t){t.target.checked&&this.dataService.update(this.id,{minutesUploadType:this.data.minutesUploadType})}updateAllowance(t){this.dataService.updateAllowance(this.id,t.id,t.allowance).subscribe(()=>{this.toastr.success(g.a.Messages.UPDATE_SUCCESS,g.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}saveMinutes(t){this.dataService.update(this.id,{minutesContent:t}).subscribe(()=>{this.toastr.success(g.a.Messages.UPDATE_SUCCESS,g.a.Title.RECORD_OPERATION),this.agendaMinutesModal&&this.agendaMinutesModal.hide()},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}initializeMinutes(){if(this.data&&"A"==this.data.minutesUploadType){let t={};for(let e of this.data.agenda){let n=e.agendaNumber;t[n]=this.data.minutesContent[n]||null}this.minutesContent=t}}openAgendaMinutesEditor(t){let e=this.data.agenda.filter(e=>e.agendaNumber==t);this.currentAgenda=e.length>0?e[0]:{},this.agendaMinutesModal.show()}openAgendaDiscussionsEditor(t){let e=this.data.agenda.filter(e=>e.agendaNumber==t);this.currentAgenda=e.length>0?e[0]:{},this.dataService.openDiscussion(this.id,t,this.data.companyID).subscribe(t=>{this.currentTopic=t,this.agendaDiscussionModal.show()},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}uploadMeetingMinutes(){let t=this.data.quarter,e=this.meetingTypes[this.data.meetingTypeID],n=e?e.meetingTypeName:null,s=(this.datePipe.transform(this.data.meetingDate,"yyyy-MM-dd"),this.data.attendeeTeams.length>0?this.data.attendeeTeams[0]:null),i=s?this.teams[s]:{},a={moduleCode:this.constants.moduleCodes.mtn.name,year:(new Date).getFullYear(),resourceName:this.data.meetingSubject,companyID:this.data.companyID};this.uploadService.getYearDirectory(a.moduleCode,a.year,a.resourceName,a.companyID,n,t,i.teamName,this.data.attendees).subscribe(t=>{this.uploadFiles(t.companyID,t.moduleCode,t.resourceID,{meetingID:this.id,isMinutes:"Y"})})}populatePaymentItems(t,e,n){let s=t.target.checked?"Y":"N";t.target.value&&!this.selectedItems[n.id]&&Object.assign(this.selectedItems,JSON.parse('{"'+n.id+'":{}}')),this.selectedItems[n.id]=Object.assign(this.selectedItems[n.id],JSON.parse('{"'+e.Payment_Code+'":"'+s+'"}'))}postAllowances(){return Object(s.b)(this,void 0,void 0,function*(){if(Object.keys(this.selectedItems).length>0){let t=yield u.a.alertDelete(g.a.Title.RECORD_OPERATION,g.a.Messages.CONFIRM_SUBMIT);(null==t?void 0:t.value)&&this.paymentService.postAllowances(this.id,this.selectedItems).subscribe(t=>{1==t.status?(Object.assign(this.data,{hasPostedAllowances:"Y"}),this.toastr.success(g.a.Messages.UPDATE_SUCCESS,g.a.Title.RECORD_OPERATION)):this.toastr.error(t.message,g.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.UPDATE_FAILURE),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION)})}else this.toastr.error(g.a.Messages.SELECT_OPTION,g.a.Title.FORM_VALIDATION)})}};J.ctorParameters=()=>[{type:k.b},{type:w},{type:W.a},{type:Y.a},{type:j.a},{type:I.a},{type:F.a},{type:N},{type:M.a},{type:$},{type:u.a},{type:g.a},{type:D.f},{type:O.b},{type:D.a},{type:H.a},{type:p.DatePipe}],J.propDecorators={signaturePad:[{type:i.ViewChild,args:["signature"]}],declareInterestModal:[{type:i.ViewChild,args:["declareInterestModal"]}],agendaMinutesModal:[{type:i.ViewChild,args:["agendaMinutesModal"]}],agendaDiscussionModal:[{type:i.ViewChild,args:["agendaDiscussionModal"]}]},J=Object(s.c)([Object(i.Component)({selector:"meeting-details",template:'<app-basic-crumb [title]="title" [objects]="objects" [url]="parentUrl"></app-basic-crumb>\n<div class="row">\n\t<div class="col-sm-12">\n\t    <app-card hidHeader="false" blockClass="scrollable-body">\n  \t\t\t<perfect-scrollbar [style.max-height]="\'395px\'" [style.height]="\'395px\'">              \n\t\t\t\t<ngb-tabset>\n\t\t\t\t\t\x3c!-- Meeting Details --\x3e\t\n\t\t\t\t\t<ngb-tab title="Meeting Info">\n\t          \t\t\t<ng-template ngbTabContent>\t\t\t\t          \t  \n\t\t\t\t\t          <div class="row p-3">\n\t\t\t\t\t          \t<div class="col-lg-9 col-sm-12">\n\t\t\t\t\t          \t\t<div class="row">\n\t\t\t\t\t\t\t            <div class="form-group col-md-12 pt-3">\t\t\t\t            \t\n\t\t\t\t\t\t\t            \t<h5 class="font-weight-normal">\n\t\t\t\t\t\t\t            \t\t{{data?.meetingSubject || \'Meeting Subject\'}} &nbsp;\t\t\t\t\t            \t\t\n\t\t\t\t\t\t\t            \t</h5>            \t\n\t\t\t\t\t\t\t            </div>\t\t\t\t\t            \n\t\t\t\t\t\t\t            <div class="form-group col-md-12">\n\t\t\t\t\t\t\t            \t<i class="fa fa-map-marker text-success"></i>\n\t\t\t\t\t\t\t            \t &nbsp;\n\t\t\t\t\t\t\t            \tMeeting Location: &nbsp;\n\t\t\t\t\t\t\t            \t<span class="font-weight-bold">\n\t\t\t\t\t\t\t            \t\t{{data?.meetingLocation || \'Meeting Location\'}}\n\t\t\t\t\t\t\t            \t</span>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t            <div class="form-group col-md-12">\n\t\t\t\t\t\t\t            \t<i class="fa fa-calendar text-primary"></i>\n\t\t\t\t\t\t\t            \t &nbsp;\n\t\t\t\t\t\t\t            \tMeeting Date: &nbsp;\n\t\t\t\t\t\t\t            \t<span class="font-weight-italic">\n\t\t\t\t\t\t\t            \t\t{{\' on \' + (data?.meetingDate | date:\'dd-MMM-yyyy\') || \'-\'}}\n\t\t\t\t\t\t\t            \t\t{{ \', at \'}}\n\t\t\t\t\t\t\t            \t\t<span class="fa fa-clock text-danger"></span>\t\t\t\t            \t\t\n\t\t\t\t\t\t\t            \t\t{{ data?.startTime || \'-\' }}\n\t\t\t\t\t\t\t            \t</span>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t            <div class="form-group col-md-12">\n\t\t\t\t\t\t\t            \t<i class="fa fa-table text-warning"></i>\n\t\t\t\t\t\t\t            \t &nbsp;\n\t\t\t\t\t\t\t            \tMeeting Type: &nbsp;\n\t\t\t\t\t\t\t            \t<span class="">\n\t\t\t\t\t\t\t            \t\t{{meetingTypes[data?.meetingTypeID]?.meetingTypeName || \'Meeting Type\'}}\n\t\t\t\t\t\t\t            \t</span>\n\t\t\t\t\t\t\t            \t<span class="">\n\t\t\t\t\t\t            \t\t\t{{\' (\' + (venueTypes[data?.venueType]?.name || \'Physical & Virtual\') + \')\'}}\n\t\t\t\t\t\t            \t\t</span>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t            <div class="form-group col-md-12 mt-4" *ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t\t\t\t            \t\t<a class="btn btn-primary" href="{{data?.hostUrl || \'#\'}}" target="_blank">\n\t\t\t\t\t\t            \t\t\t<i class="feather icon-play"></i>\t\n\t\t\t\t\t\t            \t\t\t{{\'Host This Meeting\'}}\n\t\t\t\t\t\t            \t\t</a>\n\t\t\t\t\t\t            \t\t&nbsp;\n\t\t\t\t\t\t            \t\t<a class="btn btn-success" routerLink="{{editUrl + id}}">\n\t\t\t\t\t\t            \t\t\t<i class="feather icon-edit"></i>\t\t\t\t\t\t\t\t\t\t\t            \t\t\n\t\t\t\t\t\t\t            \t\tEdit This Meeting\n\t\t\t\t\t\t\t            \t</a>\t\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t\t            <div class="form-group col-md-12 mt-4" *ngIf="tokenService.getUserType()!=constants.userTypes.admin.name">\n\t\t\t\t\t\t\t            \t<a class="btn btn-primary" href="{{data?.joinUrl || \'#\'}}" target="_blank">\n\t\t\t\t\t\t            \t\t\t<i class="feather icon-users"></i>\t\n\t\t\t\t\t\t            \t\t\t{{\'Join This Meeting\'}}\n\t\t\t\t\t\t            \t\t</a>\n\t\t\t\t\t\t\t            </div>\t\t\t\t\t\t\t            \n\t\t\t\t\t\t\t         </div>\n\t\t\t\t\t\t        </div>\n\t\t\t\t\t            <div class="col-lg-3 col-sm-12 text-right">\n\t\t\t\t\t            \t<br/>Powered By<br/>\n\t\t\t\t\t            \t<a href="{{(tokenService.getUserType()==constants.userTypes.admin.name? data?.hostUrl : data?.joinUrl) || \'#\'}}" target="_blank">\n\t\t\t\t\t            \t\t<img height="100" src="/assets/images/brand-icons/{{(data.poweredBy || \'zoom\') + \'.png\'}}"/>\n\t\t\t\t\t            \t</a>\t\t\t\t\t            \t\n\t\t\t\t\t            </div>\t\t\t\t            \n\t\t\t\t\t          </div>\t\t\t\t          \n\t          \t\t\t</ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Details --\x3e  \n\t\t          \t\n\t\t\t\t\t\x3c!-- Meeting Attendees --\x3e\n\t\t\t\t\t<ngb-tab title="Attendees">\n\t\t\t\t\t\t<ng-template ngbTabContent>\t\t\n\t\t\t\t\t         <div class="row pt-3">\n\t\t\t\t\t            <div class="col-sm-12">\t\t\t\t\t            \t\n\t\t\t\t\t                <div class="table-responsive">\n\t\t\t\t\t\t\t\t        <table class="table table-sm">\n\t\t\t\t\t\t\t\t          <thead>\n\t\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t\t            <th>#</th>\n\t\t\t\t\t\t\t\t\t            <th>Full Name</th>\n\t\t\t\t\t\t\t\t\t            <th class="text-center" width="150">\n\t\t\t\t\t\t\t\t\t            \tRsvp?\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t            <th class="text-left" width="150">\n\t\t\t\t\t\t\t\t\t            \t<div class="checkbox checkbox-primary d-inline">\n\t\t\t\t\t\t\t\t\t\t              <input type="checkbox" name="rollcall" id="rollcall" (change)="markRollcall($event)" \n\t\t\t\t\t\t\t\t\t\t              \t[checked]="functions.countInArray(data?.attendees,{rollCall:\'att\'})==data?.attendees.length">\n\t\t\t\t\t\t\t\t\t\t              <label for="rollcall" class="cr mb-0">Rollcall</label>\n\t\t\t\t\t\t\t\t\t\t\t        </div>\t\t\t\t\t\t\t\t\t            \t\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t            <th class="text-left" width="150">\n\t\t\t\t\t\t\t\t\t            \t<label for="conflictOfInterest" class="cr mb-0">Declaration</label>\t\t\t\t\t\t\t\t\t            \t\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t            <th>Actions</th>\n\t\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t\t                   <tr  *ngFor="let attendee of data?.attendees; let i=index;">                  \t\n\t\t\t\t\t\t\t                    <td width="50">{{(i+1)+\'.\'}}</td>\n\t\t\t\t\t\t\t                    <td>{{ attendee.fullName }}</td>\n\t\t\t\t\t\t\t                    <td class="text-center">\n\t\t\t\t\t\t\t                    \t<span class="{{ constants.rsvp[attendee?.rsvp]?.badge || \'badge m-r-5 badge-warning\' }}">\n\t\t\t\t\t\t\t                    \t\t{{ constants.rsvp[attendee?.rsvp]?.name || \'Not Sure\' }}\n\t\t\t\t\t\t\t                    \t</span>\n\t\t\t\t\t\t\t                    </td>\n\t\t\t\t\t\t\t                    <td class="text-left" *ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t\t\t\t\t                    \t<div class="checkbox checkbox-primary d-inline" *ngIf="tokenService.getId() == attendee.id\n\t\t\t\t\t\t\t                    \t\t|| tokenService.getUserType()==constants.userTypes.admin.name">\t\t\t\t\t\t\t\t\t\t              \n\t\t\t\t\t\t\t\t\t\t              <select name="{{attendee.id}}" id="{{attendee.id}}" class="form-control input-sm"\n\t\t\t\t\t\t\t\t\t\t              \t(change)="markRollcall($event,attendee)" [(ngModel)]="attendee.rollCall">\n\t\t\t\t\t\t\t\t\t\t              \t<option *ngFor="let p of rsvp" value="{{p.code}}">\n\t\t\t\t\t\t\t\t\t\t              \t\t{{p.status}}\n\t\t\t\t\t\t\t\t\t\t              \t</option>\n\t\t\t\t\t\t\t\t\t\t              </select>\t\t\t\t\t\t\t\t\t\t              \n\t\t\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t\t\t        <div *ngIf="tokenService.getId() != attendee.id\n\t\t\t\t\t\t\t\t\t\t\t        \t&& tokenService.getUserType() != constants.userTypes.admin.name">\n\t\t\t\t\t\t\t\t\t\t\t        \t{{ constants.rsvp[attendee?.rollCall]?.name || \'Not Sure\' }}\n\t\t\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t                    </td>\n\t\t\t\t\t\t\t                    <td class="text-left" *ngIf="tokenService.getUserType()==constants.userTypes.admin.name \n\t\t\t\t\t\t\t                    \t&& attendee.conflictOfInterest">\t\t\t\t\t\t\t                    \t\n\t\t\t\t\t\t\t                    \t<select *ngIf="tokenService.getId() == attendee.id"\n\t\t\t\t\t\t\t                    \t\t[(ngModel)]="attendee.conflictOfInterest.answer" class="form-control input-sm"\n\t\t\t\t\t\t\t                    \t\t(change)="declareConflictofInterest(attendee,attendee.conflictOfInterest.answer,true)">\n\t\t\t\t\t\t\t                    \t\t<option>Yes</option>\n\t\t\t\t\t\t\t                    \t\t<option>None</option>\n\t\t\t\t\t\t\t                    \t</select>\n\t\t\t\t\t\t\t                    \t<div *ngIf="tokenService.getId() != attendee.id">\n\t\t\t\t\t\t\t                    \t\t{{attendee?.conflictOfInterest?.answer || \'None\'}}\n\t\t\t\t\t\t\t                    \t</div>\n\t\t\t\t\t\t\t\t                </td>\n\t\t\t\t\t\t\t\t                <td class="text-center" title="View Signature &amp; Comments">\n\t\t\t\t\t\t\t                    \t<span class="fa fa-exclamation-circle cursor text-primary"\n\t\t\t\t\t\t\t                    \t\t(click)="declareConflictofInterest(attendee,attendee.conflictOfInterest.answer,true)"></span>\t\t\t\t\t\t\t                    \t\n\t\t\t\t\t\t\t                    </td>\n\t\t\t\t\t\t\t                  </tr>\n\t\t\t\t\t\t                  </tbody>\n\t\t\t\t\t              \t\t</table>\n\t\t\t\t\t              \t\t\n\t\t\t\t\t              \t\t<app-ui-modal #declareInterestModal  [dialogClass]="\'modal-lg\'">\n\t\t\t\t\t\t\t\t\t        <div class="app-modal-header">\n\t\t\t\t\t\t\t\t\t          <h5 class="modal-title">\t\n\t\t\t\t\t\t\t\t\t          \tDeclaration of Interest {{currentAttendee?.fullName || \'\'}}\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t\t          </h5>\n\t\t\t\t\t\t\t\t\t          <button type="button" class="close basic-close" data-dismiss="modal" \n\t\t\t\t\t\t\t\t\t          \taria-label="Close" (click)="declareInterestModal.hide()">\n\t\t\t\t\t\t\t\t\t          \t<span aria-hidden="true">&times;</span>\n\t\t\t\t\t\t\t\t\t          </button>\n\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t        <div class="app-modal-body">\n\t\t\t\t\t\t\t\t\t          \t<div class="form-row">   \n\t\t\t\t\t\t\t\t\t\t\t        <div class="form-group col-sm-6">\n\t\t\t\t\t\t\t\t\t\t\t            <label>Please describe your conflict of interest:</label>\n\t\t\t\t\t\t\t\t\t\t\t            <textarea rows="6" class="form-control" \n\t\t\t\t\t\t\t\t\t\t\t                [disabled]="(currentAttendee.conflictOfInterest.answer!=\'Yes\'\n\t\t\t\t\t\t\t\t\t\t\t                || currentAttendee.attendeeID == tokenService.getId())"\n\t\t\t\t\t\t\t\t\t\t\t            \t[(ngModel)]="currentAttendee.conflictOfInterest.comments">\n\t\t\t\t\t\t\t\t\t\t\t            </textarea>\n\t\t\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t\t\t        <div class="form-group col-sm-6 text-right">\n\t\t\t\t\t\t\t\t\t\t\t        \t<label>Please append signature:</label>\n\t\t\t\t\t\t\t\t\t\t\t        \t<signature-pad #signature [options]="signaturePadOptions" (onBeginEvent)="drawStart()" \n\t\t\t\t\t\t\t\t\t\t\t        \t\t(onEndEvent)="drawComplete()" *ngIf="!currentAttendee?.conflictOfInterest.signature\n\t\t\t\t\t\t\t\t\t\t\t        \t\t&& currentAttendee.attendeeID == tokenService.getId()">\n\t\t\t\t\t\t\t\t\t\t\t        \t</signature-pad>\n\t\t\t\t\t\t\t\t\t\t\t        \t<img [src]="currentAttendee.conflictOfInterest.signature"\n\t\t\t\t\t\t\t\t\t\t\t        \t\t*ngIf="currentAttendee?.conflictOfInterest.signature"/>\n\t\t\t\t\t\t\t\t\t\t\t        \t<br/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<button width="100%" class="btn btn-danger"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t*ngIf="currentAttendee.attendeeID == tokenService.getId()"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(click)="(signaturePad? signaturePad.clear() : null);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcurrentAttendee.conflictOfInterest.signature=null">\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tClear Signature\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t\t\t    </div>\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t        <div class="app-modal-footer p-2">\n\t\t\t\t\t\t\t\t\t          <button type="button" class="btn btn-secondary" data-dismiss="modal" \n\t\t\t\t\t\t\t\t\t          \t(click)="declareInterestModal.hide()">Close</button>\n\t\t\t\t\t\t\t\t\t          &nbsp;\n\t\t\t\t\t\t\t\t\t          <button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\t\t\t          \t(click)="declareConflictofInterest(attendee,currentAttendee.conflictOfInterest.answer)">Save</button>\n\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t\t</app-ui-modal>\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t              \t</div>\n\t\t\t\t\t            </div>\n\t\t\t\t\t         </div>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t\t\t\t\x3c!-- Meeting Attendees --\x3e\n\t\t\t\t\t\t\t\t\t\t\n\t\t          \t\x3c!-- Meeting Guests --\x3e\n\t\t\t\t\t<ngb-tab title="Guests">\n\t\t\t\t\t\t<ng-template ngbTabContent>\t\t\n\t\t\t\t\t         <div class="row pt-3">\n\t\t\t\t\t            <div class="col-sm-12">\t\t\t\t\t            \t\n\t\t\t\t\t                <div class="table-responsive">\n\t\t\t\t\t\t\t\t        <table class="table table-sm" width="400">\n\t\t\t\t\t\t\t\t          <thead>\n\t\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t\t            <th>#</th>\n\t\t\t\t\t\t\t\t\t            <th>Full Name</th>\n\t\t\t\t\t\t\t\t\t            <th>Position</th>\n\t\t\t\t\t\t\t\t\t            <th class="text-center" width="150">\n\t\t\t\t\t\t\t\t\t            \tRsvp?\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t\t                   <tr  *ngFor="let attendee of data?.in_attendance; let i=index;">                  \t\n\t\t\t\t\t\t\t                    <td width="50">{{(i+1)+\'.\'}}</td>\n\t\t\t\t\t\t\t                    <td>{{ attendee.fullName }}</td>\n\t\t\t\t\t\t\t                    <td>{{ attendee?.position || \'-\' }}</td>\n\t\t\t\t\t\t\t                    <td class="text-center">{{ constants.rsvp[attendee?.rsvp].name || \'Not Sure\' }}</td>\n\t\t\t\t\t\t\t                  </tr>\n\t\t\t\t\t\t                  </tbody>\n\t\t\t\t\t              \t\t</table>\n\t\t\t\t\t              \t</div>\n\t\t\t\t\t            </div>\n\t\t\t\t\t         </div>\n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t\t\t\t\x3c!-- Meeting Guests --\x3e    \n\t\t          \t\t          \n\t\t          \t\x3c!-- Meeting Agenda  --\x3e\n\t\t          \t<ngb-tab title="Agenda">\n\t\t          \t\t<ng-template ngbTabContent>\n\t\t\t\t          <div class="row pt-3">\n\t\t\t\t            <div class="col-sm-12">\n\t\t\t\t                <div class="table-responsive">\n\t\t\t\t\t\t\t        <table class="table table-sm">\n\t\t\t\t\t\t\t          <thead>\n\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t            <th width="100">No.</th>\n\t\t\t\t\t\t\t\t            <th>Agenda</th>\n\t\t\t\t\t\t\t\t            <th>Speaker</th>\n\t\t\t\t\t\t\t\t            <th class="text-center" width="100">Start Time</th>\n\t\t\t\t\t\t\t\t            <th class="text-center" width="100">End Time</th>\n\t\t\t\t\t\t\t\t            <th>Actions</th>\n\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t                   <tr  *ngFor="let agenda of data?.agenda | OrderBy:\'agendaNumber\'">                  \t\n\t\t\t\t\t\t                    <td>{{ agenda.agendaNumber }}</td>\n\t\t\t\t\t\t                    <td class="word-overflow">\n\t\t\t\t\t\t                    \t{{agenda.agendaName}}\t\t\t\t\t\t                    \t\n\t\t\t\t\t\t\t\t\t            \x3c!-- Show Already Uploaded Files esp. Edit Mode --\x3e\n\t\t\t\t\t\t\t\t\t            <div *ngIf="documents && documents.length>0">\n\t\t\t\t\t\t\t\t\t            \t<div *ngFor="let f of documents; let m = index;">\n\t\t\t\t\t\t\t\t\t            \t\t<div *ngIf="f?.extraData?.agendaNumber==agenda?.agendaNumber">\n\t\t\t\t\t\t\t\t\t            \t\t\t<span class="{{ functions.getResourceIcon(f.mimeType) }} mr-2"></span>\n\t\t\t\t\t\t\t\t\t\t\t            \t<a routerLink="{{documentUrl + f.resourceID}}" \n\t\t\t\t\t\t\t\t\t\t\t            \t\t[queryParams]="{moduleCode:\'mtn\', fullScreen:\'Y\'}"  target="_blank">\t\t\t\t\t\t\t\t\t\t\t            \t\t\n\t\t\t\t\t\t\t\t\t\t\t            \t\t{{f.resourceName}}\n\t\t\t\t\t\t\t\t\t\t\t            \t</a>\t\n\t\t\t\t\t\t\t\t\t\t\t            \t<span class="cursor" (click)="deleteResource(f)" title="Remove this file"\n\t\t\t\t\t\t\t\t\t\t\t            \t \t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t\t\t\t\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t\t\t\t\t\t\t                </span>\t\t\n\t\t\t\t\t\t\t\t\t\t                </div>\t            \t\n\t\t\t\t\t\t\t\t\t            \t</div>\t\t \t            \t\t\t            \t\n\t\t\t\t\t\t\t\t\t            </div>     \t\n\t\t\t\t\t\t\t\t\t            \x3c!-- Show Already Uploaded Files esp. Edit Mode --\x3e\n\t\t\t\t\t\t                    </td>\n\t\t\t\t\t\t                    <td>{{agenda.speaker}}</td>\n\t\t\t\t\t\t                    <td class="text-center">{{agenda.agendaTime}}</td>\n\t\t\t\t\t\t                    <td class="text-center">{{agenda.agendaEndTime}}</td>  \n\t\t\t\t\t\t                    <td>\n\t\t\t\t\t\t                    \t<button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\t\t\t\t\t\t\t(click)="openAgendaDiscussionsEditor(agenda.agendaNumber)">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i class="feather icon-check"></i> \n\t\t\t\t\t\t\t\t\t\t\t\t\tDiscussions\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t                    </td>                     \n\t\t\t\t\t\t                  </tr>\n\t\t\t\t\t\t              </tbody>\n\t\t\t\t              \t\t</table>\n\t\t\t\t              \t\t<app-ui-modal #agendaDiscussionModal  [dialogClass]="\'modal-xl modal-lg modal-md\'">\n\t\t\t\t\t\t\t\t        <div class="app-modal-header">\n\t\t\t\t\t\t\t\t          <h5 class="modal-title">\t\n\t\t\t\t\t\t\t\t          \tDiscussions - {{ currentAgenda?.agendaName }}\t\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t          </h5>\n\t\t\t\t\t\t\t\t          <button type="button" class="close basic-close" data-dismiss="modal" \n\t\t\t\t\t\t\t\t          \taria-label="Close" (click)="agendaDiscussionModal.hide()">\n\t\t\t\t\t\t\t\t          \t<span aria-hidden="true">&times;</span>\n\t\t\t\t\t\t\t\t          </button>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t        <div class="app-modal-body">\n\t\t\t\t\t\t\t\t          \t<topic-details [isDialog]="true" [id]="currentTopic.topicID"></topic-details>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t        <div class="app-modal-footer p-2">\n\t\t\t\t\t\t\t\t          <button type="button" class="btn btn-secondary" data-dismiss="modal" \n\t\t\t\t\t\t\t\t          \t(click)="agendaDiscussionModal.hide()">Close Here</button>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t</app-ui-modal>\t\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t              \t</div>\n\t\t\t\t            </div>\n\t\t\t\t          </div>\n\t\t\t\t       </ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Agenda  --\x3e\n\t\t          \t\t\t          \t\n\t\t          \t\x3c!-- Meeting Resources  --\x3e\n\t\t          \t<ngb-tab title="Meeting Pack">\n\t\t          \t\t<ng-template ngbTabContent>\n\t\t\t\t          <div class="row pt-3">\n\t\t\t\t            <div class="col-sm-12">\t\t\t\t                \n\t\t\t\t                <div class="table-responsive">\n\t\t\t\t\t\t\t        <table class="table table-bordered table-sm">\n\t\t\t\t\t\t\t        \t<thead>\n\t\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t\t            <th>Resource Name</th>\n\t\t\t\t\t\t\t\t\t            <th>Size</th>\n\t\t\t\t\t\t\t\t\t            <th class="text-right" width="150">\n\t\t\t\t\t\t\t\t\t            \tActions\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t\t\t        \t<tr *ngFor="let f of documents | OrderBy:\'resourceName\'; let m = index;">                  \t\n\t\t\t\t\t\t\t                    <td class="word-overflow">\t\t\t\t\t\t                    \t\n\t\t\t\t\t\t\t\t\t\t            <span class="{{ functions.getResourceIcon(f.mimeType) }} mr-2"></span>\n\t\t\t\t\t\t\t\t\t            \t<a routerLink="{{documentUrl + f.resourceID}}" \n\t\t\t\t\t\t\t\t\t            \t\t[queryParams]="{moduleCode:\'mtn\', fullScreen:\'Y\'}" target="_blank">\t\t\t\t\t\t\t\t\t\t\t            \t\t\n\t\t\t\t\t\t\t\t\t            \t\t{{f.resourceName}}\n\t\t\t\t\t\t\t\t\t            \t</a>\t\n\t\t\t\t\t\t\t\t\t            \t<span class="cursor" (click)="deleteResource(f)" title="Remove this file"\n\t\t\t\t\t\t\t\t\t            \t \t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t\t\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t\t\t\t\t                </span>\n\t\t\t\t\t\t\t                    </td>   \n\t\t\t\t\t\t\t                    <td class="text-center">{{ functions.getResourceSize(f.resourceSize) }}</td>\n\t\t\t\t\t\t\t                    <td>\n\t\t\t\t\t\t\t                    \t<a title="View {{object}}" class="text-primary" \n\t\t\t\t\t\t\t\t\t            \t\trouterLink="{{documentUrl + f.resourceID}}" [queryParams]="{moduleCode:\'mtn\'}">\n\t\t\t\t\t\t\t\t\t            \t\t<i class="feather icon-eye"></i> Open\n\t\t\t\t\t\t\t\t\t            \t</a>\t\t\n\t\t\t\t\t\t\t                    </td>           \n\t\t\t\t\t\t\t                 </tr>\n\t\t\t\t\t\t\t                 <tr>\n\t\t\t\t\t\t\t                 \t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t\t\t\t\t            \t<a title="Click To View More Documents..." class="text-primary" \n\t\t\t\t\t\t\t\t\t            \t\trouterLink="{{browseUrl}}" [queryParams]="{parentID:parentID,moduleCode:\'mtn\'}">\n\t\t\t\t\t\t\t\t\t            \t\tMore Documents...\n\t\t\t\t\t\t\t\t\t            \t</a>\t\t\t\n\t\t\t\t\t\t\t                 \t</td>\n\t\t\t\t\t\t\t                 </tr>\n\t\t\t\t\t\t\t               </tbody>\n\t\t\t\t\t\t\t        </table>\n\t\t\t\t\t\t\t    </div>\n\t\t\t\t            </div>\n\t\t\t\t          </div>\n\t\t\t\t       </ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Resources  --\x3e\n\t\t          \t\t\t          \t\n\t\t\t\t\t\x3c!-- Meeting Allowances  --\x3e\n\t\t\t\t\t<ngb-tab title="Allowances" *ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t          \t\t<ng-template ngbTabContent>\t\n\t\t\t\t          <div class="row pt-3">\n\t\t\t\t            <div class="col-sm-12">\n\t\t\t\t                <div class="row" *ngIf="data?.attendees.length>0">\n\t\t\t\t\t\t            <div class="col-sm-12">\n\t\t\t\t\t\t                <table class="table table-sm">\n\t\t\t\t\t\t\t\t          <thead>\n\t\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t\t            <th>#</th>\n\t\t\t\t\t\t\t\t\t            <th>Full Name</th>\n\t\t\t\t\t\t\t\t\t            <th>Position</th>\n\t\t\t\t\t\t\t\t\t            <th class="text-left" width="200">\n\t\t\t\t\t\t\t\t\t            \tAllowance\n\t\t\t\t\t\t\t\t\t            </th>\n\t\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t\t                   <tr  *ngFor="let attendee of data?.attendees | KeyFilter:\'rollCall\':\'Y\';let i=index;">                \t\n\t\t\t\t\t\t\t                    <td width="50">{{(i+1)+\'.\'}}</td>\n\t\t\t\t\t\t\t                    <td>{{ attendee.fullName }}</td>\n\t\t\t\t\t\t\t                    <td>{{ attendee.position || \'-\'}}</td>\n\t\t\t\t\t\t\t                    <td class="text-left">\n\t\t\t\t\t\t\t                    \t\x3c!-- echo payment items here per attendee --\x3e\n\t\t\t\t\t\t\t                    \t<div class="form-group col-sm-12 mb-0" *ngFor="let row of (attendee.paymentItems || paymentItems) | OrderBy:\'Payment_Code\';;let j=index;">\n\t\t\t\t\t\t\t\t\t\t\t       \t  <div class="row">\n\t\t\t\t\t\t\t\t\t\t\t       \t  \t<div class="col-md-12 col-sm-12 col-xs-12 p-0">\n\t\t\t\t\t\t\t\t\t\t\t\t          <div class="checkbox checkbox-primary d-inline p-0">\n\t\t\t\t\t\t\t\t\t\t\t\t              <input type="checkbox" name="{{row.Payment_Code + i}}" id="{{row.Payment_Code + i}}" \n\t\t\t\t\t\t\t\t\t\t\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" (change)="populatePaymentItems($event,row,attendee)"\n\t\t\t\t\t\t\t\t\t\t\t\t              \t[checked]="selectedItems[attendee.id] && selectedItems[attendee.id][row.Payment_Code]==\'Y\'"\n\t\t\t\t\t\t\t\t\t\t\t\t              \t[disabled]="!(!data.hasPostedAllowances || data.hasPostedAllowances==\'N\')"/>\n\t\t\t\t\t\t\t\t\t\t\t\t              <label for="{{row.Payment_Code + i}}" class="cr p-0">{{row.Payment_Code}}</label>\n\t\t\t\t\t\t\t\t\t\t\t\t          </div>\n\t\t\t\t\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t\t\t\t        <input type="text" class="form-control" (blur)="updateAllowance(attendee)"\n\t\t\t\t\t\t\t                    \t\t\t*ngIf="false" [(ngModel)]="attendee.allowance" placeholder="Kes. ####">\n\t\t\t\t\t\t\t\t\t\t\t\t\t  </div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t                    </td>\t\t\t\t\t\t                    \n\t\t\t\t\t\t\t                  </tr>\n\t\t\t\t\t\t                  </tbody>\n\t\t\t\t\t              \t\t</table>\n\t\t\t\t\t              \t\t<button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\t\t\t\t\t(click)="postAllowances()" \n\t\t\t\t\t\t\t\t\t\t\t*ngIf="!data.hasPostedAllowances || data.hasPostedAllowances==\'N\'">\n\t\t\t\t\t\t\t\t\t\t\t<i class="feather icon-check"></i> \n\t\t\t\t\t\t\t\t\t\t\tPost Allowances\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t            </div>\n\t\t\t\t\t         \t</div>\n\t\t\t\t            </div>\n\t\t\t\t          </div>\n\t\t\t\t       </ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Allowances  --\x3e\n\t\t          \t\n\t\t          \t\x3c!-- Meeting Minutes --\x3e\t\n\t\t\t\t\t<ngb-tab title="Minutes"  *ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t          \t\t\t<ng-template ngbTabContent>\t\t\t\t          \t  \n\t\t\t\t\t          <div class="form-row pt-3">\n\t\t\t\t\t          \t<div class="form-group col-md-9">\n\t\t\t\t\t\t\t\t\t<label class="font-weight-bold">\n\t\t\t\t\t\t\t\t\t\tHow would you like to add minutes?\n\t\t\t\t\t\t\t\t\t\t&nbsp;&nbsp;\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<br/>\n\t\t\t\t\t          \t\t<div class="radio radio-primary d-inline">\n\t\t\t\t\t\t              <input type="radio" name="minutesUploadType" id="minutesHTMLContent" value="T" (change)="saveMinutesType($event);initializeMinutes()" \n\t\t\t\t\t\t              \t[(ngModel)]="data.minutesUploadType" [ngClass]="{\'is-invalid\': submitted && f.minutesUploadType.errors}">\n\t\t\t\t\t\t              <label for="minutesHTMLContent" class="cr pr-3">Type On Editor</label>\n\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t            <div class="radio radio-primary d-inline">\n\t\t\t\t\t\t              <input type="radio" name="minutesUploadType" id="minutesFileUpload" value="U" (change)="saveMinutesType($event);"\n\t\t\t\t\t\t              \t[(ngModel)] = "data.minutesUploadType" [ngClass]="{\'is-invalid\': submitted && f.minutesUploadType.errors}">\n\t\t\t\t\t\t              <label for="minutesFileUpload" class="cr pr-3">Upload File</label>\n\t\t\t\t\t\t            </div>\t\t\t\t\t\t            \n\t\t\t\t\t\t            <div class="radio radio-primary d-inline">\n\t\t\t\t\t\t              <input type="radio" name="minutesUploadType" id="minutesAdoptAgenda" value="A" (change)="saveMinutesType($event);initializeMinutes()" \n\t\t\t\t\t\t              \t[(ngModel)] = "data.minutesUploadType" [ngClass]="{\'is-invalid\': submitted && f.minutesUploadType.errors}">\n\t\t\t\t\t\t              <label for="minutesAdoptAgenda" class="cr pr-3">Use Agenda Items</label>\n\t\t\t\t\t\t            </div>\n\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t        <div class="form-group col-md-3 text-right" *ngIf="data.minutesUploadType==\'T\'">\n\t\t\t\t\t\t            <button type="button" (click)="saveMinutes(minutesContent)"\n\t\t\t\t\t\t            \tclass="btn btn-primary"\n\t\t\t\t\t\t            \t*ngIf="data.minutesUploadType!=\'U\' && minutesContent">\n\t\t\t\t\t\t            \t Save Minutes\n\t\t\t\t\t\t            </button>\n\t\t\t\t\t          \t</div>\n\t\t\t\t\t          </div>\n\t\t\t\t\t          <div class="form-row" *ngIf="data.minutesUploadType==\'T\'">\n\t\t\t\t\t            <div class="form-group col-md-12">\n\t\t\t\t\t            \t<app-tinymce [(ngModel)]=\'minutesContent\' #tinymce=\'tinymce\' [ngModelOptions]="{standalone: true}"></app-tinymce>\t\t\t\t\t\t\t                  \t\n\t\t\t\t\t            </div>\t\t\t\t\t            \n\t\t\t\t\t          </div>\n\t\t\t\t\t          <div class="form-row" *ngIf="data.minutesUploadType==\'A\'">\n\t\t\t\t\t            <div class="form-group col-md-12">\n\t\t\t\t\t\t\t        <table width="100%" class="table table-sm nowhitespace">\n\t\t\t\t\t\t\t          <thead>\n\t\t\t\t\t\t\t\t          <tr>\n\t\t\t\t\t\t\t\t            <th>Agenda</th>\n\t\t\t\t\t\t\t\t            <th class="text-center" width="200">Actions</th>\n\t\t\t\t\t\t\t\t          </tr>\n\t\t\t\t\t\t\t          </thead>\n\t\t\t\t\t\t\t          <tbody>\n\t\t\t\t\t\t                   <tr  *ngFor="let agenda of data?.agenda | OrderBy:\'agendaNumber\'">                  \t\n\t\t\t\t\t\t                    <td>\n\t\t\t\t\t\t                    \t<span class="font-weight-bold">{{ agenda.agendaNumber }}</span> \n\t\t\t\t\t\t                    \t&nbsp;\n\t\t\t\t\t\t                    \t<span class="font-weight-bold">{{ agenda.agendaName }}</span>\n\t\t\t\t\t\t                    \t<br/> \n\t\t\t\t\t\t                    \t<div [innerHTML]="minutesContent[agenda.agendaNumber] ||\n\t\t\t\t\t\t                    \t\t \'No content found here. Click on the notes button to edit minutes.\'">\n\t\t\t\t\t\t                    \t</div>\n\t\t\t\t\t\t                    </td>\t\t\t\t\t\t\t                    \n\t\t\t\t\t\t                    <td class="text-center">\n\t\t\t\t\t\t\t\t\t\t\t\t<button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\t\t\t\t\t\t\t(click)="openAgendaMinutesEditor(agenda.agendaNumber)">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<i class="fa fa-edit"></i> \n\t\t\t\t\t\t\t\t\t\t\t\t\tEdit Minutes\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t                    </td>                       \n\t\t\t\t\t\t                  </tr>\n\t\t\t\t\t\t              </tbody>\n\t\t\t\t              \t\t</table>\t\t\t\t\t              \t\t\n\t\t\t\t              \t\t<app-ui-modal #agendaMinutesModal  [dialogClass]="\'modal-lg\'">\n\t\t\t\t\t\t\t\t        <div class="app-modal-header">\n\t\t\t\t\t\t\t\t          <h5 class="modal-title">\t\n\t\t\t\t\t\t\t\t          \tEdit Minutes - {{ currentAgenda?.agendaName }}\t\t\t\t\t\t\t\t\t          \n\t\t\t\t\t\t\t\t          </h5>\n\t\t\t\t\t\t\t\t          <button type="button" class="close basic-close" data-dismiss="modal" \n\t\t\t\t\t\t\t\t          \taria-label="Close" (click)="agendaMinutesModal.hide()">\n\t\t\t\t\t\t\t\t          \t<span aria-hidden="true">&times;</span>\n\t\t\t\t\t\t\t\t          </button>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t        <div class="app-modal-body">\n\t\t\t\t\t\t\t\t          <div class="font-weight-normal mb-2">\n\t\t\t\t\t\t\t\t          \tEdit the minutes for agenda "{{ currentAgenda?.agendaName }}" below\n\t\t\t\t\t\t\t\t          </div>\n\t\t\t\t\t\t\t\t          <app-tinymce [(ngModel)]=\'minutesContent[currentAgenda?.agendaNumber]\' \n\t\t\t\t\t\t\t\t          \t#tinymce=\'tinymce\' [ngModelOptions]="{standalone: true}">\n\t\t\t\t\t\t\t\t          </app-tinymce>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t        <div class="app-modal-footer p-2">\n\t\t\t\t\t\t\t\t          <button type="button" class="btn btn-secondary" data-dismiss="modal" \n\t\t\t\t\t\t\t\t          \t(click)="agendaMinutesModal.hide()">Close</button>\n\t\t\t\t\t\t\t\t          &nbsp;\n\t\t\t\t\t\t\t\t          <button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\t\t          \t(click)="saveMinutes(minutesContent)">Save Minutes</button>\n\t\t\t\t\t\t\t\t        </div>\n\t\t\t\t\t\t\t\t\t</app-ui-modal>\n\t\t\t\t\t            </div>\n\t\t\t\t\t          </div>\n\t\t\t\t\t          <div class="form-row" *ngIf="data.minutesUploadType==\'U\'">\n\t\t\t\t\t          \t<div class="pb-3 pt-2 ml-2">\t\t\t\t\t\t            \n\t\t\t\t\t\t            \x3c!-- Show Already Uploaded File --\x3e\n\t\t\t\t\t\t            <div *ngIf="documents && documents.length>0">\n\t\t\t\t\t\t            \t<div *ngFor="let f of documents; let m = index;">\t\t\t            \t\n\t\t\t\t\t\t            \t\t<div *ngIf="f?.extraData?.isMinutes===\'Y\'">\n\t\t\t\t\t\t\t\t            \t<a href="javascript;">{{f.resourceName}}</a>\t\n\t\t\t\t\t\t\t\t            \t<span class="cursor" (click)="deleteResource(f)" title="Remove this file">\n\t\t\t\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t\t\t\t                </span>\t\t\n\t\t\t\t\t\t\t                </div>\t            \t\n\t\t\t\t\t\t            \t</div>\t\t \t            \t\t\t            \t\n\t\t\t\t\t\t            </div>     \t\n\t\t\t\t\t\t            \x3c!-- Show Already Uploaded File --\x3e\n\t\t\t\t\t\t            \n\t\t\t\t\t\t            \x3c!-- Show Selected File For Upload --\x3e\n\t\t\t\t\t\t            <div *ngIf="uploadService.selectedFiles && uploadService.selectedFiles.length>0">\n\t\t\t\t\t\t            \t<div *ngFor="let f of uploadService.selectedFiles; let m = index;">\n\t\t\t\t\t\t\t            \t<a href="javascript;">{{f.data.resourceName}}</a>\t\n\t\t\t\t\t\t\t            \t<span class="cursor" (click)="removeFiles(m)" title="Remove this file"\n\t\t\t\t\t\t\t            \t\t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t\t\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\n\t\t\t\t\t\t\t                </span>\n\t\t\t\t\t\t\t                <br/>\n\t\t\t\t\t\t\t                <div class="progress">\n\t\t\t\t\t\t\t\t\t\t\t    <div class="progress-bar progress-bar-info progress-bar-striped"\n\t\t\t\t\t\t\t\t\t\t\t      role="progressbar"\n\t\t\t\t\t\t\t\t\t\t\t      attr.aria-valuenow="{{ f.value }}"\n\t\t\t\t\t\t\t\t\t\t\t      aria-valuemin="0"\n\t\t\t\t\t\t\t\t\t\t\t      aria-valuemax="100"\n\t\t\t\t\t\t\t\t\t\t\t      [ngStyle]="{ width: f.value + \'%\' }">\n\t\t\t\t\t\t\t\t\t\t\t      {{ f.value }}%\n\t\t\t\t\t\t\t\t\t\t\t    </div>\n\t\t\t\t\t\t\t\t\t\t\t </div>\t\t    \t\n\t\t\t\t\t\t            \t</div>\t\t\t            \t\t\t            \t\n\t\t\t\t\t\t            </div>     \n\t\t\t\t\t\t            \x3c!-- Show Selected File For Upload --\x3e\t\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t            <div class="form-group col-md-12 mt-3 ml-2">\t\n\t\t\t\t\t\t\t\t\t<button [disabled]="uploadService.selectedFiles.length==1"\n\t\t\t\t\t\t\t\t\t\ttype="button" class="btn btn-primary" (click)="fileInput.click()">\n\t\t\t\t\t\t\t\t\t\t<i class="fa fa-plus"></i> \n\t\t\t\t\t\t\t\t\t\tAdd File\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t<input type="file" multiple="false" (change)="selectFiles($event)" \n\t\t\t\t\t\t\t\t\t  \tstyle="display: none" #fileInput/>\n\t\t\t\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t\t\t\t<button class="btn btn-primary" [disabled]="uploadService.selectedFiles.length==0" (click)="uploadMeetingMinutes()">\n\t\t\t\t\t\t\t\t\t\t<i class="fa fa-upload"></i>\n\t\t\t\t\t\t\t\t\t  \tUpload\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t         </div>\n\t\t\t\t\t   </ng-template>\n\t\t          \t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Minutes --\x3e\n\t\t          \t\n\t\t          \t\x3c!-- Meeting Reports --\x3e\t\n\t\t\t\t\t<ngb-tab title="Downloads"  *ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\n\t          \t\t\t<ng-template ngbTabContent>\t\t\t\t          \t  \n\t\t\t\t\t          <div class="form-row pt-3">\n\t\t\t\t\t\t\t\t\t<div class="form-group col-md-9">\n\t\t\t\t\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t\t\t\t\t<li class="cursor text-primary">\n\t\t\t\t\t\t\t\t\t\t\t\t<pdf-viewer [src]="reportService.getConflictInterestURL(this.id)"\n\t\t\t\t\t\t\t\t\t\t\t   \t\t[title]="\'Attendance &amp; Declaration of Interest Report\'">\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t\t\t\t\t   </pdf-viewer>\n\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t   </div>\t\t\t\t\t\t\t   \n\t\t\t\t\t\t</ng-template>\n\t\t\t\t\t</ngb-tab>\n\t\t          \t\x3c!-- Meeting Reports --\x3e\n\t\t          \t\n\t\t\t\t</ngb-tabset>\n\t\t\t</perfect-scrollbar>                   \n\t\t</app-card>\n\t</div>\n</div>',styles:[""]})],J);var Q=n("gG2O"),X=n("MxsQ");let K=class extends X.a{constructor(t,e){super(t,e)}ngOnInit(){}};K.ctorParameters=()=>[{type:X.c},{type:D.a}],K=Object(s.c)([Object(i.Component)({selector:"create-meeting",template:'<div class="row">\r\n\t<div class="col-sm-12">\r\n\t    <app-card cardTitle="{{\'Create Meeting\' | uppercase}}" cardClass="table-card" blockClass="pl-3 pr-3 pb-3 pt-0">\r\n\t\t\t<ng-wizard></ng-wizard>\r\n\t\t</app-card>\r\n\t</div>\r\n</div>',styles:[""]})],K);let Z=class extends L.a{constructor(t,e,n,s,i,a,r,o,l,d){super(l,n,e,o,r,a,i),this.dataService=t,this.companyService=e,this.uploadService=n,this.formBuilder=s,this.toastr=i,this.functions=a,this.constants=r,this.tokenService=o,this.route=l,this.router=d,this.pk="meetingID",this.object="Meeting",this.parentUrl="/meetings/list",this.loading=!1,this.errorMessage=""}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"meetings/create":"meetings/edit/"+this.id;if(!this.isAddMode||this.dataService.formValues){if(this.form=this.formBuilder.group({agenda:this.formBuilder.array([])}),this.dataService.formValues.agenda){for(let t=0;t<this.dataService.formValues.agenda.length;t++)this.addRow();this.form.patchValue({agenda:this.dataService.formValues.agenda})}else this.addRow(),this.addRow();this.documents=[],this.uploadService.getAll({where:{"extraData.meetingID":this.id||null}}).subscribe(t=>{this.documents=t},t=>{this.documents=[]})}else this.router.navigate([t])}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION),!1):(this.dataService.setFormValues(this.form.value),this.form.valid)}wsOnNext(){return!0}wsOnPrevious(){return!0}speakers(){let t=this.dataService.formValues.attendees||[],e=this.dataService.formValues.in_attendance||[],n=this.tokenService.getUser();return t.concat(e).concat([n])}addRow(){const t=this.form.get("agenda");t.push(this.formBuilder.group({agendaNumber:[t.length+1,k.j.required],agendaName:[null,k.j.required],speaker:[""],agendaTime:[""],agendaEndTime:[""],isEditable:[!0]}))}deleteRow(t){this.form.get("agenda").removeAt(t)}get c(){return this.form.get("agenda")}handleAttachments(t,e){for(let n of t.target.files)this.addMetaInfo(n),Object.assign(n.data,{extraData:{agendaNumber:e}}),this.uploadService.selectedFiles.push(n)}};Z.ctorParameters=()=>[{type:w},{type:j.a},{type:F.a},{type:k.b},{type:O.b},{type:u.a},{type:g.a},{type:I.a},{type:D.a},{type:D.f}],Z=Object(s.c)([Object(i.Component)({selector:"app-meeting-agenda",template:'<form [formGroup]="form">\r\n\t<div class="">\r\n        <table class="table table-borderless table-sm nopadding">\r\n\t\t\t<tr>\t\t\t\t\r\n\t\t\t\t<th width="120">No.</th>\r\n\t\t\t\t<th>Agenda Name</th>\r\n\t\t\t\t<th width="200">Speaker</th>\t\t\t\t\t\r\n\t\t\t\t<th width="130">Start Time</th>\r\n\t\t\t\t<th width="130">End Time</th>\t\t\t\t\r\n\t\t\t\t<th class="text-right">\r\n\t                <a href="javascript:" (click)="addRow();">\r\n\t                \t<i class="feather icon-plus f-16 ml-3 text-c-green"></i>\r\n\t                </a>\r\n\t\t\t\t</th>\r\n\t\t\t</tr>\r\n\t\t\t<ng-container formArrayName="agenda" *ngFor="let group of c.controls ; let i=index">\r\n\t\t\t\t<tr [formGroupName]="i">\r\n\t\t\t\t\t<td>\r\n\t\t                <input class="form-control" type="text" formControlName="agendaNumber"\r\n\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.agendaNumber.errors }"/>\r\n\t\t\t            <div *ngIf="submitted && group.controls.agendaNumber.errors" class="invalid-feedback">\r\n\t\t\t                <div *ngIf="group.controls.agendaNumber.errors.required">Agenda number is required</div>\r\n\t\t\t            </div>         \r\n\t\t            </td>\t\t\t\t\t\t            \r\n\t\t            <td  class="pr-2 pl-2 word-overflow">\r\n\t\t                <input class="form-control" type="text" formControlName="agendaName"\r\n\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.agendaName.errors }"\r\n\t\t                \tplaceholder="Agenda name">\r\n\t\t\t            <div *ngIf="submitted && group.controls.agendaName.errors" class="invalid-feedback">\r\n\t\t\t                <div *ngIf="group.controls.agendaName.errors.required">Agenda name is required</div>\r\n\t\t\t            </div> \r\n\t\t\t            \r\n\t\t\t            \x3c!-- Show Already Uploaded Files esp. Edit Mode --\x3e\r\n\t\t\t            <div *ngIf="documents && documents.length>0">\r\n\t\t\t            \t<div *ngFor="let f of documents; let m = index;">\t\t\t            \t\r\n\t\t\t            \t\t<div *ngIf="f?.extraData?.agendaNumber===group?.controls?.agendaNumber.value">\r\n\t\t\t\t\t            \t<a href="javascript;">{{f.resourceName}}</a>\t\r\n\t\t\t\t\t            \t<span class="cursor" (click)="deleteResource(f)" title="Remove this file">\r\n\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\r\n\t\t\t\t\t                </span>\t\t\r\n\t\t\t\t                </div>\t            \t\r\n\t\t\t            \t</div>\t\t \t            \t\t\t            \t\r\n\t\t\t            </div>     \t\r\n\t\t\t            \x3c!-- Show Already Uploaded Files esp. Edit Mode --\x3e\r\n\t\t\t            \r\n\t\t\t            \x3c!-- Show Selected Files For Upload --\x3e\r\n\t\t\t            <div *ngIf="uploadService.selectedFiles && uploadService.selectedFiles.length>0">\r\n\t\t\t            \t<div *ngFor="let f of uploadService.selectedFiles; let m = index;">\r\n\t\t\t            \t\t<div *ngIf="f?.data.extraData?.agendaNumber===group?.controls?.agendaNumber.value">\r\n\t\t\t\t\t            \t<a href="javascript;">{{f.data.resourceName}}</a>\t\r\n\t\t\t\t\t            \t<span class="cursor" (click)="removeFiles(m)" title="Remove this file"\r\n\t\t\t\t\t            \t\t*ngIf="tokenService.getUserType()==constants.userTypes.admin.name">\r\n\t\t\t\t\t                \t<i class="fa fa-times f-16 ml-3 text-c-red"></i>\r\n\t\t\t\t\t                </span>\t\t\r\n\t\t\t\t                </div>\t            \t\r\n\t\t\t            \t</div>\t\t\t            \t\t\t            \t\r\n\t\t\t            </div>     \r\n\t\t\t            \x3c!-- Show Selected Files For Upload --\x3e\t\r\n\t\t            </td>\r\n\t\t            <td>\t\r\n\t\t                <select formControlName="speaker" class="form-control" \r\n\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && group.controls.speaker.errors }">\r\n\t\t\t            \t<option value="">Speaker</option>\r\n\t\t\t\t\t\t\t<option *ngFor="let e of this.speakers() | OrderBy:\'fullName\'" [ngValue]="e.fullName">\r\n\t\t\t\t\t\t    \t{{e.fullName}}\r\n\t\t\t\t\t\t    </option>\r\n\t\t\t\t\t\t</select>\r\n\t\t\t            <div *ngIf="submitted && group.controls.speaker.errors" class="invalid-feedback">\r\n\t\t\t                <div *ngIf="group.controls.speaker.errors.required">Speaker is required</div>\r\n\t\t\t            </div>         \r\n\t\t            </td>\t\r\n\t\t            <td class="pr-2 pl-2">\r\n\t\t                <ng-autocomplete \r\n\t\t\t\t\t\t  [data]="constants.times"\r\n\t\t\t\t\t\t  placeholder="HH:MM"\r\n\t\t\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.agendaTime.errors }"\r\n\t\t\t\t\t\t  [itemTemplate]="itemTemplate"\r\n\t\t\t\t\t\t  formControlName = \'agendaTime\'>                                 \r\n\t\t\t\t\t\t</ng-autocomplete>\t\r\n\t\t\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\r\n\t\t\t            <div *ngIf="submitted && group.controls.agendaTime.errors" class="invalid-feedback">\r\n\t\t\t                <div *ngIf="group.controls.agendaTime.errors.required">Agenda start time is required</div>\r\n\t\t\t            </div>         \r\n\t\t            </td>\t\t   \r\n\t\t            <td class="pr-2 pl-2">\r\n\t\t            \t<ng-autocomplete \r\n\t\t\t\t\t\t  [data]="constants.times"\r\n\t\t\t\t\t\t  placeholder="HH:MM"\r\n\t\t\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.agendaEndTime.errors }"\r\n\t\t\t\t\t\t  [itemTemplate]="itemTemplate"\r\n\t\t\t\t\t\t  formControlName = \'agendaEndTime\'>                                 \r\n\t\t\t\t\t\t</ng-autocomplete>\t\r\n\t\t\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\r\n\t\t                <div *ngIf="submitted && group.controls.agendaEndTime.errors" class="invalid-feedback">\r\n\t\t\t                <div *ngIf="group.controls.agendaEndTime.errors.required">Agenda end time is required</div>\r\n\t\t\t            </div>         \r\n\t\t            </td>\t\t            \t\r\n\t\t            <td class="text-right pt-3">\t\r\n\t\t            \t<input type="file" multiple="true" style="display: none" #fileInput\r\n\t\t            \t\t(change)="handleAttachments($event,group?.controls?.agendaNumber.value)"/>\t\t\t\t\t            \t\r\n\t\t         \t\t<a href="javascript:" (click)="fileInput.click()" title="Attach files to agenda"\r\n\t\t         \t\t\t*ngIf="group.controls.agendaName.value">\r\n\t\t                \t<i class="fa fa-paperclip f-16 ml-3 text-primary"></i>\t\t                \t\r\n\t\t                </a>\r\n\t\t                <a href="javascript:" (click)="deleteRow(i)" title="Remove this agenda item">\r\n\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\r\n\t\t                </a>\t\t                \r\n\t\t            </td>\r\n\t\t\t\t</tr>\r\n\t\t\t</ng-container>\r\n\t\t</table>\r\n\t</div>\r\n\t<a class="btn btn-primary" href="javascript:" (click)="addRow();">\r\n     \t<i class="feather icon-plus"></i>\r\n     \tAdd Agenda\r\n    </a>\t\t\r\n</form>',styles:["file-upload {\r\n  min-height: 150px;\r\n  min-width: 300px;\r\n  border: 1px solid rgba(42,42,42,0.05);\r\n  background: rgba(204,204,204,0.15);\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  box-shadow: inset 0 0 5px 0 rgba(43,43,43,0.1);\r\n  outline: none !important;\r\n}"]})],Z);let tt=class{constructor(t,e,n,s,i,a,r,o){this.teamService=t,this.userService=e,this.dataService=n,this.formBuilder=s,this.toastr=i,this.route=a,this.router=r,this.orderBy=o,this.pk="meetingID",this.object="Meeting",this.parentUrl="/meetings/list",this.loading=!1,this.errorMessage="",this.teams={rows:[],selected:[]}}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;let t=this.isAddMode?"meetings/create":"meetings/edit/"+this.id;!this.isAddMode||this.dataService.formValues?(this.form=this.formBuilder.group({attendees:this.formBuilder.array([])}),this.dataService.formValues.attendees?this.populateMany():(this.addRow(),this.addRow()),this.teams.selected=this.dataService.formValues.attendeeTeams||[],this.teamService.getAll().subscribe(t=>{this.teams.rows=t})):this.router.navigate([t])}wsIsValid(){if(this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid)return this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION),!1;let t=Object.assign(this.form.value,{attendeeTeams:this.teams.selected});return this.dataService.setFormValues(t),this.form.valid}wsOnNext(){return!0}wsOnPrevious(){return!0}onTeamsChange(t,e){if(e.target.checked)this.teams.selected.push(t.teamID),this.userService.getAllByUserID(t.members).subscribe(e=>{let n=this.dataService.formValues.attendees||[];for(let s of e){let e={teamID:t.teamID,id:s.id,fullName:s.fullName,phoneNo:s.phoneNo,email:s.email,rsvp:s.rsvp,position:s.position};0==n.filter(t=>t.id===e.id).length&&n.push(e)}this.dataService.formValues.attendees=G.a.uniqBy(n,"id"),this.populateMany()});else{let e=this.teams.selected.indexOf(t.teamID);this.teams.selected.splice(e,1);let n=this.dataService.formValues.attendees||[];this.dataService.formValues.attendees=n.filter(e=>e.teamID!==t.teamID),this.populateMany()}this.dataService.setFormValues({attendeeTeams:this.teams.selected})}populateMany(){let t=this.form.get("attendees").length,e=this.dataService.formValues.attendees.length,n=e>t?e-t:0,s=t>e?t-e:0;for(let a=0;a<n;a++)this.addRow();for(let a=0;a<s;a++)this.deleteRow(a);let i=this.orderBy.transform(this.dataService.formValues.attendees,["fullName"]);this.form.patchValue({attendees:i})}addRow(){this.form.get("attendees").push(this.formBuilder.group({id:[""],teamID:[""],fullName:["",k.j.required],phoneNo:[""],email:[""],rollCall:["N"],rsvp:["pnd"],position:[""],isEditable:[!0]}))}deleteRow(t){this.form.get("attendees").removeAt(t)}get c(){return this.form.get("attendees")}};tt.ctorParameters=()=>[{type:M.a},{type:T.a},{type:w},{type:k.b},{type:O.b},{type:D.a},{type:D.f},{type:H.a}],tt=Object(s.c)([Object(i.Component)({selector:"app-meeting-attendees",template:'<form [formGroup]="form">\t\n\t<div class="row">\t\t\n\t\t<div class="col-md-4 col-sm-12">\n\t\t\t<h6 class="mb-3 text-normal text-italic">Click on the teams below to add attendees to the right</h6>\n\t\t \t<div class="form-row">\n\t\t\t    <div class="form-group col-sm-12 p-0" *ngFor="let row of teams.rows | OrderBy:\'teamName\';">\n\t\t\t       <div class="checkbox checkbox-primary d-inline">\n\t\t\t           <input type="checkbox" name="{{row.teamName}}" id="{{row.teamID}}" \n\t\t\t           \t(change)="onTeamsChange(row,$event)" [checked]="teams.selected.indexOf(row.teamID)>-1">\n\t\t\t           <label for="{{row.teamID}}" class="cr">{{row.teamName + \' (\' + row.members.length + \')\'}}</label>\n\t\t\t       </div>\n\t\t\t    </div>\n\t\t    </div>\n\t\t</div>\n\t\t<div class="col-md-8 col-sm-12">\n\t\t\t<div class="table-responsive">\t\t\n\t\t        <table class="table table-borderless table-sm nopadding">\t\t\n\t\t\t\t\t<tr>\t\t\t\t\n\t\t\t\t\t\t<th>Added ({{ c.controls.length }}) attendees</th>\t\t\t\t\t\t\n\t\t\t\t\t\t<th class="text-right">\n\t\t\t                Actions\n\t\t\t\t\t\t</th>\n\t\t\t\t\t</tr>\n\t\t\t\t\t<ng-container formArrayName="attendees" *ngFor="let group of c.controls; let i=index">\n\t\t\t\t\t\t<tr [formGroupName]="i">\t\t\t\t\t            \n\t\t\t\t            <td>\n\t\t\t\t            \t<div class="form-row">\n\t\t\t\t            \t\t<div class="form-group col-md-6">\t\t\t\t            \t\t\t\n\t\t\t\t\t\t                <input class="form-control font-weight-bold" type="text" formControlName="fullName"\n\t\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.fullName.errors }"\n\t\t\t\t\t\t                \tplaceholder="Full name" [readonly]="true">\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.fullName.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.fullName.errors.required">Full name is required</div>\n\t\t\t\t\t\t\t            </div>  \n\t\t\t\t            \t\t</div>\n\t\t\t\t            \t\t<div class="form-group col-md-6">\n\t\t\t\t            \t\t\t<input class="form-control" placeholder="e.g. +254 000 000 000" formControlName="phoneNo"\n\t\t\t\t\t\t\t\t\t\t\ttype="text" [ngClass]="{\'is-invalid\': submitted && group.controls.phoneNo.errors}"\n\t\t\t\t\t\t\t\t\t\t\tmask="(+000) 000-000000" [readonly]="true">\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.phoneNo.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.required">Phone number is required</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.minlength">Must be equal to 12 character(s)</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.phoneNo.errors.maxlength">Must be equal to 12 character(s)</div>\n\t\t\t\t\t\t\t\t\t\t\t<div *ngIf="group.controls.phoneNo.errors.pattern">Incorrect! use format e.g. (+000) 000-000000</div>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t            \t\t</div>\t\t\t\t            \t\t\n\t\t\t\t            \t\t<div class="form-group col-md-7">\n\t\t\t\t            \t\t\t<input type="text" formControlName="email" class="form-control" \n\t\t\t\t\t\t\t            \t[ngClass]="{ \'is-invalid\': submitted && group.controls.email.errors }"\n\t\t\t\t\t\t\t            \tplaceholder="Email address" [readonly]="true"/>\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.email.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.email.errors.required">Email is required</div>\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.email.errors.email">Email must be a valid email address</div>\n\t\t\t\t\t\t\t            </div>\n\t\t\t\t            \t\t</div>\n\t\t\t\t            \t\t<div class="form-group col-md-5">\t\t\t\t            \t\t\t\n\t\t\t\t\t\t                <input class="form-control font-weight-bold" type="text" formControlName="position"\n\t\t\t\t\t\t                \t[ngClass]="{ \'is-invalid\': submitted && group.controls.position.errors }"\n\t\t\t\t\t\t                \tplaceholder="Position" [readonly]="true">\n\t\t\t\t\t\t\t            <div *ngIf="submitted && group.controls.position.errors" class="invalid-feedback">\n\t\t\t\t\t\t\t                <div *ngIf="group.controls.position.errors.required">Position is required</div>\n\t\t\t\t\t\t\t            </div>  \n\t\t\t\t            \t\t</div>\n\t\t\t\t            \t</div>       \n\t\t\t\t            </td>\t\t\t\t\t\t            \t\n\t\t\t\t            <td class="text-right pt-4">\n\t\t\t\t         \t\t<a href="javascript:" (click)="deleteRow(i)">\n\t\t\t\t                \t<i class="feather icon-trash-2 f-16 ml-3 text-c-red"></i>\n\t\t\t\t                \tRemove\n\t\t\t\t                </a>\n\t\t\t\t            </td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</ng-container>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</form>',styles:[""]})],tt);let et=class{constructor(t,e,n,s,i,a,r,o,l,d,c){this.dataService=t,this.meetingTypeService=e,this.uploadService=n,this.companyService=s,this.tokenService=i,this.constants=a,this.functions=r,this.formBuilder=o,this.router=l,this.toastr=d,this.route=c,this.pk="meetingID",this.object="Meeting",this.parentUrl="/meetings/list",this.loading=!1,this.errorMessage="",this.today=new Date(Date.now()),this.meetingTypes=[],this.companies=[]}ngOnInit(){this.id=this.route.parent.snapshot.params.id,this.isAddMode=!this.id,this.title=(this.isAddMode?"Add":"Edit")+" "+this.object;this.isAddMode||this.id;this.uploadService.selectedFiles=[],this.form=this.formBuilder.group({meetingTypeID:[null,k.j.required],companyID:[this.tokenService.getSelectedCompany().companyID||""],meetingSubject:["",k.j.required],meetingDate:["",k.j.required],startTime:["",k.j.required],endTime:[""],venueType:["both",k.j.required],quarter:[""],poweredBy:[""],hostUrl:[""],joinUrl:[""],meetingLocation:[""],meetingStatus:["pending",k.j.required],sendSms:["N"],sendEmail:["Y"]}),this.isAddMode?this.form.patchValue(this.dataService.formValues):this.dataService.get(this.id).pipe(Object(_.a)()).subscribe(t=>{this.dataService.setFormValues(t),this.form.patchValue(t),this.form.patchValue({meetingDate:t.meetingDate?new Date(t.meetingDate):null}),this.toastr.success(g.a.Messages.RECORD_LOADED,g.a.Title.RECORD_OPERATION)},t=>{this.errorMessage=u.a.handleError(t,g.a.Messages.RECORDS_NOT_FOUND),this.toastr.error(this.errorMessage,g.a.Title.RECORD_OPERATION),this.router.navigate([this.parentUrl])}),this.meetingTypeService.getAll().subscribe(t=>{this.meetingTypes=t}),this.companyService.getUserCompanies().subscribe(t=>{this.companies=t})}wsIsValid(){return this.form.markAllAsTouched(),this.submitted=!0,this.form.invalid?(this.toastr.error(g.a.Messages.FORM_ERROR_FOUND,g.a.Title.FORM_VALIDATION),!1):this.functions.isTimeLarger(this.form.get("startTime").value,this.form.get("endTime").value)?(this.toastr.error(g.a.Messages.ERROR_TIME_RANGE,g.a.Title.FORM_VALIDATION),!1):this.form.valid}wsOnNext(){this.dataService.setFormValues(this.form.value)}wsOnPrevious(){}get f(){return this.form.controls}};et.ctorParameters=()=>[{type:w},{type:N},{type:F.a},{type:j.a},{type:I.a},{type:g.a},{type:u.a},{type:k.b},{type:D.f},{type:O.b},{type:D.a}],et=Object(s.c)([Object(i.Component)({selector:"app-meeting-info",template:'<div class="row">\n  <div class="col-sm-12">\n    \t<form [formGroup]="form">\n    \t\t<div class="form-row">    \n    \t\t\t<div class="form-group col-md-6 col-sm-12">\n    \t\t\t\t<label for="evaluationName">Choose Venue Type:</label>\t\n\t\t\t\t\t<div class="form-group text-left mt-2 mb-0">\t\t\t\t\t\t\n\t\t\t            <div class="radio radio-primary d-inline" *ngFor="let venue of constants.meetingVenueType">\n\t\t\t              <input type="radio" name="venueType" id="{{\'venueType\' + venue.name}}" value="{{venue.value}}" \n\t\t\t              \tformControlName="venueType" [ngClass]="{\'is-invalid\': submitted && f.venueType.errors}">\n\t\t\t              <label for="{{\'venueType\' + venue.name}}" class="cr pr-3">{{venue.name}}</label>\n\t\t\t            </div>\n\t\t\t\t\t</div>\n\t\t            <div *ngIf="submitted && f.venueType.errors" class="invalid-option-check text-left">\n\t\t                <div *ngIf="f.venueType.errors.required">Venue type required</div>\n\t\t            </div> \n\t           </div>\t\t\t\t\n\t\t       <div class="form-group col-md-3 col-sm-12">\n\t\t          \t<label for="evaluationName">Choose Meeting Type:</label>\t\t          \n\t\t            <select formControlName="meetingTypeID" class="form-control" \n\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.meetingTypeID.errors }">\n\t\t\t\t\t\t<option *ngFor="let e of meetingTypes" [ngValue]="e.meetingTypeID">\n\t\t\t\t\t    \t{{e.meetingTypeName}}\n\t\t\t\t\t    </option>\n\t\t\t\t\t</select>\n\t\t            <div *ngIf="submitted && f.meetingTypeID.errors" class="invalid-feedback">\n\t\t                <div *ngIf="f.meetingTypeID.errors.required">Meeting type required</div>\n\t\t            </div>   \n\t\t       </div>\n\t\t       <div class="form-group col-md-3 col-sm-12">\n\t\t            <label>Owner Company:</label>\n\t\t            <select class="form-control" formControlName="companyID" \n\t\t\t            [ngClass]="{ \'is-invalid\': submitted && f.companyID.errors }">\n\t\t\t\t  \t\t<option value="">No Company Selected</option>\n\t\t\t\t        <option *ngFor="let c of companies | OrderBy:\'fullName\'" value="{{c.companyID}}">\n\t\t\t\t        \t{{c.fullName}}\n\t\t\t\t        </option>\n\t\t\t\t    </select>\n\t\t            <div *ngIf="submitted && f.companyID.errors" class="invalid-feedback">\n\t\t                <div *ngIf="f.companyID.errors.required">Owner company is required</div>\n\t\t            </div>\n\t\t        </div>\t\n\t\t        <div class="form-group col-md-6 col-sm-12">\n\t\t          <label for="meetingSubject">Meeting Subject:</label>\n\t\t          <input type="text" class="form-control" formControlName="meetingSubject" placeholder="e.g. 28th All Directors Annual Meeting"\n\t\t          \t [ngClass]="{ \'is-invalid\': submitted && f.meetingSubject.errors }">\n\t\t          <div *ngIf="submitted && f.meetingSubject.errors" class="invalid-feedback">\n\t\t\t        <div *ngIf="f.meetingSubject.errors.required">Meeting subject is required</div>\n\t\t\t      </div>\n\t\t        </div>\n\t\t        <div class="form-group col-md-2 col-sm-12">\n\t\t          \t<label for="quarter">Quarter:</label>\t\t          \n\t\t            <select formControlName="quarter" class="form-control" \n\t\t            \t[ngClass]="{ \'is-invalid\': submitted && f.quarter.errors }">\n\t\t\t\t\t\t<option>Q1</option>\n\t\t\t\t\t\t<option>Q2</option>\n\t\t\t\t\t\t<option>Q3</option>\n\t\t\t\t\t\t<option>Q4</option>\n\t\t\t\t\t</select>\n\t\t            <div *ngIf="submitted && f.quarter.errors" class="invalid-feedback">\n\t\t                <div *ngIf="f.quarter.errors.required">Quarter required</div>\n\t\t            </div>   \n\t\t       </div>\n\t\t        <div class="form-group col-md-4 col-sm-12">\n\t\t          <label for="meetingLocation">Meeting Location:</label>\n\t\t          <input type="text" class="form-control" formControlName="meetingLocation" placeholder="Apartment, studio, or floor"\n\t\t          \t[ngClass]="{ \'is-invalid\': submitted && f.meetingLocation.errors }">\n\t\t          <div *ngIf="submitted && f.meetingLocation.errors" class="invalid-feedback">\n\t\t\t        <div *ngIf="f.meetingLocation.errors.required">Meeting location is required</div>\n\t\t\t      </div>\n\t\t        </div>\t     \n\t        </div>\n\t        <div class="form-row">\n\t          <div class="form-group col-md-6 col-sm-12">\n\t            <label for="meetingDate">Meeting Date:</label>\n\t            <input type="text" class="form-control" formControlName="meetingDate" placeholder="dd-mmm-yyyy"\n\t            \t[ngClass]="{ \'is-invalid\': submitted && f.meetingDate.errors }"\n\t            \t#datepickerYMD="bsDatepicker" bsDatepicker placement="top" [bsConfig]="{ dateInputFormat: \'DD-MMM-YYYY\'}">\n\t            <div *ngIf="submitted && f.meetingDate.errors" class="invalid-feedback">\n\t\t\t        <div *ngIf="f.meetingDate.errors.required">Meeting date is required</div>\n\t\t\t      </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12">\n\t            <label for="startTime">Start Time:</label>\n\t            <ng-autocomplete \n\t\t\t\t  [data]="constants.times"\n\t\t\t\t  placeholder="HH:MM"\n\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.startTime.errors }"\n\t\t\t\t  [itemTemplate]="itemTemplate"\n\t\t\t\t  formControlName = \'startTime\'>                                 \n\t\t\t\t</ng-autocomplete>\t\n\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\n\t            <div *ngIf="submitted && f.startTime.errors" class="invalid-feedback">\n\t\t\t        <div *ngIf="f.startTime.errors.required">Start time is required</div>\n\t\t\t    </div>\n\t          </div>\n\t          <div class="form-group col-md-3 col-sm-12">\n\t            <label for="endTime">End Time:</label>\n\t            <ng-autocomplete \n\t\t\t\t  [data]="constants.times"\n\t\t\t\t  placeholder="HH:MM"\n\t\t\t\t  [ngClass]="{ \'is-invalid\': submitted && f.endTime.errors }"\n\t\t\t\t  [itemTemplate]="itemTemplate"\n\t\t\t\t  formControlName = \'endTime\'>                                 \n\t\t\t\t</ng-autocomplete>\t\n\t\t\t\t<ng-template #itemTemplate let-item><a [innerHTML]="item"></a></ng-template>\n\t            <div *ngIf="submitted && f.endTime.errors" class="invalid-feedback">\n\t\t        \t<div *ngIf="f.endTime.errors.required">End time is required</div>\n\t\t      \t</div>\n\t          </div>\n\t        </div>\t    \n\t        <div class="row">\n\t        \t<div class="form-group col-md-6 col-sm-12">    \t    \t    \n\t\t\t        <div class="form-row">\n\t\t\t        \t<div class="form-group col-sm-12 mb-2">\n\t\t\t\t          <div class="checkbox checkbox-primary d-inline">\n\t\t\t\t              <input type="checkbox" name="sendEmail" id="sendEmail" \n\t\t\t\t                trueFalseValue trueValue="Y" falseValue="N" formControlName="sendEmail">\n\t\t\t\t              <label for="sendEmail" class="cr">\n\t\t\t\t              \t\tNotify Meeting Attendees Via \n\t\t\t\t              \t\t<span class="font-weight-bold">Email</span>&nbsp;<span class="feather icon-mail"></span>\n\t\t\t\t              </label>\n\t\t\t\t          </div>\n\t\t\t\t        </div>\n\t\t\t\t    </div>\t\t    \n\t\t\t        <div class="form-row">\n\t\t\t        \t<div class="form-group col-sm-12 mb-0">\n\t\t\t\t          <div class="checkbox checkbox-primary d-inline">\n\t\t\t\t              <input type="checkbox" name="sendSms" id="sendSms" \n\t\t\t\t              \ttrueFalseValue trueValue="Y" falseValue="N" formControlName="sendSms">\n\t\t\t\t              <label for="sendSms" class="cr">\n\t\t\t\t              \t\tNotify Meeting Attendees Via \n\t\t\t\t              \t\t<span class="font-weight-bold">SMS</span>&nbsp;<span class="feather icon-message-square">\n\t\t\t\t              \t\t</span>\n\t\t\t\t              </label>\n\t\t\t\t          </div>\n\t\t\t\t        </div>\n\t\t\t\t    </div>\n\t\t\t\t </div>\n\t\t\t\t <div class="form-group col-md-6 col-sm-12" *ngIf="f.venueType.value!=\'physical\'">\n\t\t\t\t\t<div class="form-group text-left mt-2 mb-0">\t\n\t\t\t\t\t\t<label class="cr pr-3">Schedule On: </label>\t\t\n\t\t\t            <div class="radio radio-primary d-inline pr-5" *ngFor="let software of constants.meetingSoftware">\n\t\t\t              <input type="radio" name="poweredBy" id="{{\'poweredBy\' + software.name}}" value="{{software.value}}" \n\t\t\t              \tformControlName="poweredBy" [ngClass]="{\'is-invalid\': submitted && f.poweredBy.errors}">\n\t\t\t              <label for="{{\'poweredBy\' + software.name}}" class="cr"></label>\n\t\t\t              <img height="50" src="/assets/images/brand-icons/{{(software.value || \'zoom\') + \'.png\'}}"/>\n\t\t\t            </div>\n\t\t\t\t\t</div>\n\t\t            <div *ngIf="submitted && f.poweredBy.errors" class="invalid-option-check text-left">\n\t\t                <div *ngIf="f.poweredBy.errors.required">Meeting software required</div>\n\t\t            </div> \n\t           \t</div>\t\n\t\t    </div>\n      </form>\n  </div>\n</div>\n',styles:[""]})],et);const nt={name:"NewMeetingWizard",navBar:{icons:{previous:'<i class="material-icons ng-wizard-icon">done</i>',current:'<i class="material-icons ng-wizard-icon">edit</i>',next:'<i class="material-icons ng-wizard-icon">lock</i>'}},roles:["admin"]},st={title:"Message Body",icon:'<i class="material-icons ng-wizard-icon">done_all</i>',buttons:{current:{}}},it=[{path:"",redirectTo:"list",pathMatch:"full"},{path:"create",component:K,data:nt,canActivate:[Q.a],children:[{path:"",pathMatch:"full",redirectTo:"meeting-info"},{path:"meeting-info",component:et,data:{title:"Meeting Info"}},{path:"meeting-attendees",component:tt,data:{title:"Attendees"}},{path:"in-attendance",component:P,data:{title:"In Attendance"}},{path:"meeting-agenda",component:Z,data:{title:"Agenda Items"}},{path:"invitation-message",component:V,data:st},{path:"**",redirectTo:"meeting-info"}]},{path:"edit/:id",component:K,data:nt,canActivate:[Q.a],children:[{path:"",pathMatch:"full",redirectTo:"meeting-info"},{path:"meeting-info",component:et,data:{title:"Meeting Info"}},{path:"meeting-attendees",component:tt,data:{title:"Attendees"}},{path:"in-attendance",component:P,data:{title:"In Attendance"}},{path:"meeting-agenda",component:Z,data:{title:"Agenda Items"}},{path:"invitation-message",component:V,data:st},{path:"**",redirectTo:"meeting-info"}]},{path:"list",component:x,canActivate:[Q.a]},{path:"archives",component:A,canActivate:[Q.a],data:{roles:["admin"]}},{path:"details/:id",component:J,canActivate:[Q.a]},{path:"types",component:U,canActivate:[Q.a]},{path:"edit-type/:id",component:U,canActivate:[Q.a],data:{roles:["admin"]}},{path:"rsvp/:id",component:C}];let at=class{};at=Object(s.c)([Object(i.NgModule)({imports:[D.g.forChild(it)],exports:[D.g]})],at);let rt=class{constructor(t){this.meetingTypeService=t,this.selectedTab="",this.parentUrl="/meetings/list",this.meetingTypes=[],this.tabs=[],this.title="Meetings"}ngOnInit(){this.meetingTypeService.getAll().subscribe(t=>{this.tabs.push({id:"",name:"All Meetings",path:this.parentUrl,params:[]});for(let e in t){let n=t[e],s={meetingTypeID:n.meetingTypeID};this.tabs.push({id:n.meetingTypeID,name:n.meetingTypeName,path:this.parentUrl,params:s})}})}};rt.ctorParameters=()=>[{type:N}],rt.propDecorators={selectedTab:[{type:i.Input}],parentUrl:[{type:i.Input}]},rt=Object(s.c)([Object(i.Component)({selector:"meeting-tabs",template:'<ul class="nav nav-pills m-3">\n  <li class="nav-item" *ngFor="let t of tabs">\n  \t<a class="nav-link" [ngClass]="{\'active\':(t?.id==selectedTab)}" \n  \t\trouterLink="{{t?.path}}" [queryParams]="t?.params">{{t?.name}}</a>\n  </li>\n</ul>',styles:[""]})],rt);var ot=n("1kSV"),lt=n("is2z");let dt=class{};dt=Object(s.c)([Object(i.NgModule)({declarations:[x,et,tt,Z,K,V,J,P,U,rt,C,A],imports:[p.CommonModule,lt.a,c,at,ot.h,m.a,h.DiscussionsModule]})],dt)}}]);